<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东方娇子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kangyonggan.com/"/>
  <updated>2018-09-02T13:45:42.000Z</updated>
  <id>http://kangyonggan.com/</id>
  
  <author>
    <name>康永敢</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu安装及配置系列-gitlab的安装配置.md</title>
    <link href="http://kangyonggan.com/2018/09/02/Ubuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-gitlab%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://kangyonggan.com/2018/09/02/Ubuntu安装及配置系列-gitlab的安装配置/</id>
    <published>2018-09-02T13:42:16.000Z</published>
    <updated>2018-09-02T13:45:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><h2 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><h2 id="修改root的默认密码"><a href="#修改root的默认密码" class="headerlink" title="修改root的默认密码"></a>修改root的默认密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console production</span><br><span class="line">&gt; user = User.where(id: 1).first</span><br><span class="line">&gt; user.password=12345678</span><br><span class="line">&gt; user.password_confirmation=12345678</span><br><span class="line">&gt; user.save!</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="系统运维" scheme="http://kangyonggan.com/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="http://kangyonggan.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>性能测试工具jmeter</title>
    <link href="http://kangyonggan.com/2018/08/28/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter/"/>
    <id>http://kangyonggan.com/2018/08/28/性能测试工具jmeter/</id>
    <published>2018-08-28T01:55:05.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。<br>Apache jmeter 可以用于对静态的和动态的资源（文件，Servlet，Perl脚本，java 对象，数据库和查询，FTP服务器等等）的性能进行测试。它可以用于对服务器、网络或对象模拟繁重的负载来测试它们的强度或分析不同压力类型下的整体性能。你可以使用它做性能的图形分析或在大并发负载测试你的服务器/脚本/对象。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>能够对HTTP和FTP服务器进行压力和性能测试， 也可以对任何数据库进行同样的测试（通过JDBC）。</li><li>完全的可移植性和100% 纯java。</li><li>完全 Swing 和轻量组件支持（预编译的JAR使用 javax.swing.*)包。</li><li>完全多线程 框架允许通过多个线程并发取样和 通过单独的线程组对不同的功能同时取样。</li><li>精心的GUI设计允许快速操作和更精确的计时。</li><li>缓存和离线分析/回放测试结果。</li></ol><a id="more"></a><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>Label： 定义的HTTP请求名称</li><li>Samples： 表示这次测试中一共发出了多少个请求</li><li>Average： 访问页面的平均响应时间</li><li>Min: 访问页面的最小响应时间</li><li>Max: 访问页面的最大响应时间</li><li>Error%： 错误的请求的数量/请求的总数</li><li>Throughput：每秒完成的请求数</li><li>KB/Sec： 每秒从服务器端接收到的数据量</li></ol><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>解压下载的安装包，可以在bin目录下找到启动命令<code>jmeter.sh</code>或<code>jmeter.bat</code>，运行启动命令即可启动。</p><p>启动界面如下图：<br><img src="/uploads/jmeter-01.png" alt=""></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>比如我们有一个接口需要压测。接口是http协议，post请求，地址是<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a>, 参数为”username=admin&amp;password=123456”</p><h3 id="创建测试计划"><a href="#创建测试计划" class="headerlink" title="创建测试计划"></a>创建测试计划</h3><p><img src="/uploads/jmeter-02.png" alt=""></p><h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><p><img src="/uploads/jmeter-03.png" alt=""><br><img src="/uploads/jmeter-04.png" alt=""></p><h3 id="创建请求"><a href="#创建请求" class="headerlink" title="创建请求"></a>创建请求</h3><p><img src="/uploads/jmeter-05.png" alt=""><br><img src="/uploads/jmeter-06.png" alt=""></p><p>到这里我们已经可以运行刚刚创建的请求了，但是对于请求结果及分析我们还没地方观察，因此我们还需要创建一些监听器，用于观察及分析结果。</p><h3 id="观察结果树"><a href="#观察结果树" class="headerlink" title="观察结果树"></a>观察结果树</h3><p><img src="/uploads/jmeter-07.png" alt=""><br><img src="/uploads/jmeter-08.png" alt=""></p><h3 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h3><p><img src="/uploads/jmeter-09.png" alt=""><br><img src="/uploads/jmeter-10.png" alt=""></p><p>至此一个简单的压测就搭建好了，可以运行一下试试了，运行之后就可以在观察结果数和聚合报告中查看、分析接口性能了。</p><p><img src="/uploads/jmeter-11.png" alt=""><br><img src="/uploads/jmeter-12.png" alt=""></p><p>更多高级用法请自行研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。&lt;br&gt;Apache jmeter 可以用于对静态的和动态的资源（文件，Servlet，Perl脚本，java 对象，数据库和查询，FTP服务器等等）的性能进行测试。它可以用于对服务器、网络或对象模拟繁重的负载来测试它们的强度或分析不同压力类型下的整体性能。你可以使用它做性能的图形分析或在大并发负载测试你的服务器/脚本/对象。&lt;/p&gt;
&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;能够对HTTP和FTP服务器进行压力和性能测试， 也可以对任何数据库进行同样的测试（通过JDBC）。&lt;/li&gt;
&lt;li&gt;完全的可移植性和100% 纯java。&lt;/li&gt;
&lt;li&gt;完全 Swing 和轻量组件支持（预编译的JAR使用 javax.swing.*)包。&lt;/li&gt;
&lt;li&gt;完全多线程 框架允许通过多个线程并发取样和 通过单独的线程组对不同的功能同时取样。&lt;/li&gt;
&lt;li&gt;精心的GUI设计允许快速操作和更精确的计时。&lt;/li&gt;
&lt;li&gt;缓存和离线分析/回放测试结果。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>集群中关于会话信息的解决方案</title>
    <link href="http://kangyonggan.com/2018/08/16/%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BC%9A%E8%AF%9D%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://kangyonggan.com/2018/08/16/集群中关于会话信息的解决方案/</id>
    <published>2018-08-16T04:12:31.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般有三种解决方案"><a href="#一般有三种解决方案" class="headerlink" title="一般有三种解决方案"></a>一般有三种解决方案</h2><ol><li>IP分流</li><li>会话复制</li><li>会话共享（推荐）</li></ol><h2 id="IP分流"><a href="#IP分流" class="headerlink" title="IP分流"></a>IP分流</h2><p>这个技术我曾经在我的个人博客中用过，简单方便。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>服务端代码不用变</li><li>Nginx只需要加个ip_hash的配置</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>会破坏Nginx的负载均衡</li><li>当某个服务器挂了的时候，服务器所在用户也会退出登录状态</li><li>服务器重启时，用户需要重新登录</li></ul><a id="more"></a><h2 id="会话复制"><a href="#会话复制" class="headerlink" title="会话复制"></a>会话复制</h2><p>这个我没用过，据说就是把session在所有服务器上都复制一份，且服务器数量太多时容易出问题，由于没用过，暂不讨论。</p><h2 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h2><p>既然是共享，共享到哪？当然是共享到redis了。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>实现麻烦</li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>不会破坏负载均衡</li><li>没有服务器节点的数量限制</li></ul><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="/uploads/redis-session-1.png" alt=""></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><ol><li>生成一个定长的随机字符串作为JSESSIONID，当然了，随机字符串并不能保证唯一，所以在后面再加一个自增的数字，这个自增的数字可以放在redis中</li><li>用JSESSIONID作为key，用户信息作为value，有效期30分钟，存入redis</li><li>像客户浏览器中写入cookie，其key为“JSESSIONID”，value为JSESSIONID的值。</li></ol><h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><ol><li>从请求中找出key=“JSESSIONID”的cookie，用它的值作为key去redis中查找用户的登录信息。</li></ol><h3 id="验证码等用户零时信息"><a href="#验证码等用户零时信息" class="headerlink" title="验证码等用户零时信息"></a>验证码等用户零时信息</h3><ol><li>生成验证码</li><li>从请求中找出key=“JSESSIONID”的cookie，其实就是JSESSIONID</li><li>把验证码放入redis，他的key=JSESSIONID + “:code”，最好设置有效期</li></ol><h2 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码"></a>校验验证码</h2><ol><li>从请求中找出key=“JSESSIONID”的cookie，其实就是JSESSIONID</li><li>从redis中找出验证码，key=JSESSIONID + “:code”</li><li>用过之后删除redis中的验证码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一般有三种解决方案&quot;&gt;&lt;a href=&quot;#一般有三种解决方案&quot; class=&quot;headerlink&quot; title=&quot;一般有三种解决方案&quot;&gt;&lt;/a&gt;一般有三种解决方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;IP分流&lt;/li&gt;
&lt;li&gt;会话复制&lt;/li&gt;
&lt;li&gt;会话共享（推荐）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;IP分流&quot;&gt;&lt;a href=&quot;#IP分流&quot; class=&quot;headerlink&quot; title=&quot;IP分流&quot;&gt;&lt;/a&gt;IP分流&lt;/h2&gt;&lt;p&gt;这个技术我曾经在我的个人博客中用过，简单方便。&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;服务端代码不用变&lt;/li&gt;
&lt;li&gt;Nginx只需要加个ip_hash的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会破坏Nginx的负载均衡&lt;/li&gt;
&lt;li&gt;当某个服务器挂了的时候，服务器所在用户也会退出登录状态&lt;/li&gt;
&lt;li&gt;服务器重启时，用户需要重新登录&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="综合" scheme="http://kangyonggan.com/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot完美集成Freemarker</title>
    <link href="http://kangyonggan.com/2018/08/06/SpringBoot%E5%AE%8C%E7%BE%8E%E9%9B%86%E6%88%90Freemarker/"/>
    <id>http://kangyonggan.com/2018/08/06/SpringBoot完美集成Freemarker/</id>
    <published>2018-08-06T10:46:03.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--freemarker--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.kangyonggan&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其中<code>com.kangyonggan.freemarker</code>是我发布到中央仓库的一个jar。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>application.yml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  freemarker:</span><br><span class="line">    settings:</span><br><span class="line">      auto_import: common.ftl as c</span><br></pre></td></tr></table></figure></p><p>spring-boot是很讲究零配置的，所以Freemarker大部分配置都已经被默认配置好了，完美只需要配置一些自定义的即可，如上面的配置，我想配置一个自动导入（通用）模板。</p><h2 id="集成、覆写等"><a href="#集成、覆写等" class="headerlink" title="集成、覆写等"></a>集成、覆写等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.ck.config;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.freemarker.BlockDirective;</span><br><span class="line">import com.kangyonggan.freemarker.ExtendsDirective;</span><br><span class="line">import com.kangyonggan.freemarker.OverrideDirective;</span><br><span class="line">import com.kangyonggan.freemarker.SuperDirective;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 8/6/18</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class FreemarkerConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    freemarker.template.Configuration configuration;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void setSharedVariable() &#123;</span><br><span class="line">        configuration.setSharedVariable(&quot;block&quot;, new BlockDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;override&quot;, new OverrideDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;extends&quot;, new ExtendsDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;super&quot;, new SuperDirective());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就可以在模板中使用<code>&lt;#include &quot;footer.ftl&quot;/&gt;</code>、<code>&lt;@block name=&quot;main&quot;/&gt;</code>、<code>&lt;@extends name=&quot;layout.ftl&quot;/&gt;</code>指令了。</p><h2 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h2><p>当我们修改了ftl界面内容后，springboot默认是不会进行热加载的，我们需要对idea动手脚。  </p><p><img src="/uploads/freemarker-01.png" alt=""></p><p><img src="/uploads/freemarker-02.png" alt=""></p><p><img src="/uploads/freemarker-03.png" alt=""></p><p>当配置好这两个之后，修改ftl保存之后，刷新界面就会加载了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--freemarker--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.kangyonggan&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;com.kangyonggan.freemarker&lt;/code&gt;是我发布到中央仓库的一个jar。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习Activiti 6.0.0 （三）</title>
    <link href="http://kangyonggan.com/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://kangyonggan.com/2018/08/06/编译时注解从入门到精通（三）/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何debug？"><a href="#如何debug？" class="headerlink" title="如何debug？"></a>如何debug？</h2><p>对于debug应该都会熟悉，但是如果让你在<code>mvn clean install</code>的过程中debug，你还会吗？会的请跳过，不会的向下看。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- jca</span><br><span class="line">    - jca-core</span><br><span class="line">        - src</span><br><span class="line">            - main</span><br><span class="line">                - java</span><br><span class="line">                    - com.github.ofofs.jca.processor</span><br><span class="line">                        - JcaProcessor.java</span><br><span class="line">                - resources</span><br><span class="line">                    - META-INF</span><br><span class="line">                        - services</span><br><span class="line">                            - javax.annotation.processing.Processor</span><br><span class="line">        - pom.xml</span><br><span class="line">    - jca-test</span><br><span class="line">        - src</span><br><span class="line">            - main</span><br><span class="line">                - java</span><br><span class="line">                    - com.github.ofofs.jca.serial</span><br><span class="line">                        - SerialTest.java</span><br><span class="line">        - pom.xml</span><br><span class="line">    - pom.xml</span><br></pre></td></tr></table></figure><a id="more"></a><p>上篇文章贴出了<code>jca-core</code>模块下的代码。下面贴出其余代码。</p><p><code>jca/pom.xml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没啥特殊的，正常的父模块代码。</span><br></pre></td></tr></table></figure></p><p><code>jca-test/pom.xml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--Compiler Plugin --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.ofofs&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jca-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><p><code>SerialTest,java</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.jca.serial;</span><br><span class="line"></span><br><span class="line">import com.github.ofofs.jca.annotation.Serial;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/22/18</span><br><span class="line"> */</span><br><span class="line">@Serial</span><br><span class="line">public class SerialTest &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>先在<code>JcaProcessor.java</code>的某个地方打上断点。然后以debug的形式对jca项目进行<code>clean install</code>即可。</p><p>下篇文章将会逐个介绍编译时的一些语法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何debug？&quot;&gt;&lt;a href=&quot;#如何debug？&quot; class=&quot;headerlink&quot; title=&quot;如何debug？&quot;&gt;&lt;/a&gt;如何debug？&lt;/h2&gt;&lt;p&gt;对于debug应该都会熟悉，但是如果让你在&lt;code&gt;mvn clean install&lt;/code&gt;的过程中debug，你还会吗？会的请跳过，不会的向下看。&lt;/p&gt;
&lt;h2 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- jca&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - jca-core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                - java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    - com.github.ofofs.jca.processor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        - JcaProcessor.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                - resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    - META-INF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        - services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            - javax.annotation.processing.Processor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - pom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - jca-test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                - java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    - com.github.ofofs.jca.serial&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        - SerialTest.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - pom.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - pom.xml&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>利用编译时注解增强方法</title>
    <link href="http://kangyonggan.com/2018/08/06/%E5%88%A9%E7%94%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E5%A2%9E%E5%BC%BA%E6%96%B9%E6%B3%95/"/>
    <id>http://kangyonggan.com/2018/08/06/利用编译时注解增强方法/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ol><li>在任何一个方法上加上注解，都要能打印出参、入参信息，而不局限于spring管理的类方法。</li><li>不要每次调用方法都要经过各种反射，而是编译时就把增强代码注入到方法第一行。这样性能更好。</li><li>可以自定义使用什么日志框架输出日志。</li></ol><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul><li>开发工具：idea或eclipse</li><li>项目管理工具：maven3.3.9</li><li>jdk版本：1.8.0_144</li></ul><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h4><p>使用idea创建一个普通的maven项目hello。并创建两个子模块hello-core和hello-test。整体项目结构如下图：</p><p><img src="/uploads/method-logger.png" alt="method-logger"></p><h4 id="父模块pom-xml"><a href="#父模块pom-xml" class="headerlink" title="父模块pom.xml"></a>父模块pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;hello-core&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;hello-test&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!--Project--&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.build.version&gt;1.0-SNAPSHOT&lt;/project.build.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Plugins--&gt;</span><br><span class="line">        &lt;plugin.compiler.version&gt;3.5.1&lt;/plugin.compiler.version&gt;</span><br><span class="line">        &lt;plugin.compiler.level&gt;1.8&lt;/plugin.compiler.level&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!--compiler plugin --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;$&#123;plugin.compiler.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="hello-core模块pom-xml"><a href="#hello-core模块pom-xml" class="headerlink" title="hello-core模块pom.xml"></a>hello-core模块pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hello-core&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--compiler plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;plugin.compiler.level&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;plugin.compiler.level&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                    &lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;sun.jdk&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;java.home&#125;/../lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：编译插件一定要配置：<code>&lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</code>, 否则编译时报错：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad service configuration file, or exception thrown while constructing Processor object: javax.annotation.processing.Processor: Provider com.kangyonggan.demo.hello.core.MethodLoggerProcessor not found</span><br></pre></td></tr></table></figure><blockquote><p>注意：一定要依赖<code>tools.jar</code>，否则编译时报错：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.sun.tools.javac.processing does not exist</span><br></pre></td></tr></table></figure><h3 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h3><p><code>MethodLogger.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.core;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 9/28/17</span><br><span class="line"> */</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface MethodLogger &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><p><code>MethodLoggerProcessor.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.core;</span><br><span class="line"></span><br><span class="line">import com.sun.source.util.Trees;</span><br><span class="line">import com.sun.tools.javac.processing.JavacProcessingEnvironment;</span><br><span class="line">import com.sun.tools.javac.tree.JCTree;</span><br><span class="line">import com.sun.tools.javac.tree.TreeMaker;</span><br><span class="line">import com.sun.tools.javac.tree.TreeTranslator;</span><br><span class="line">import com.sun.tools.javac.util.*;</span><br><span class="line"></span><br><span class="line">import javax.annotation.processing.*;</span><br><span class="line">import javax.lang.model.SourceVersion;</span><br><span class="line">import javax.lang.model.element.Element;</span><br><span class="line">import javax.lang.model.element.ElementKind;</span><br><span class="line">import javax.lang.model.element.TypeElement;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 注解处理器</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 9/28/17</span><br><span class="line"> */</span><br><span class="line">@SupportedAnnotationTypes(&quot;com.kangyonggan.demo.hello.core.MethodLogger&quot;)</span><br><span class="line">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span><br><span class="line">public class MethodLoggerProcessor extends AbstractProcessor &#123;</span><br><span class="line"></span><br><span class="line">    private Trees trees;</span><br><span class="line">    private TreeMaker treeMaker;</span><br><span class="line">    private Name.Table names;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化，获取编译环境</span><br><span class="line">     *</span><br><span class="line">     * @param env</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public synchronized void init(ProcessingEnvironment env) &#123;</span><br><span class="line">        super.init(env);</span><br><span class="line"></span><br><span class="line">        trees = Trees.instance(env);</span><br><span class="line">        Context context = ((JavacProcessingEnvironment) env).getContext();</span><br><span class="line">        treeMaker = TreeMaker.instance(context);</span><br><span class="line">        names = Names.instance(context).table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理注解</span><br><span class="line">     *</span><br><span class="line">     * @param annotations</span><br><span class="line">     * @param env</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env) &#123;</span><br><span class="line">        // 处理有@MethodLogger注解的元素</span><br><span class="line">        for (Element element : env.getElementsAnnotatedWith(MethodLogger.class)) &#123;</span><br><span class="line">            // 只处理作用在方法上的注解</span><br><span class="line">            if (element.getKind() == ElementKind.METHOD) &#123;</span><br><span class="line">                JCTree tree = (JCTree) trees.getTree(element);</span><br><span class="line">                tree.accept(new TreeTranslator() &#123;</span><br><span class="line">                    /**</span><br><span class="line">                     * 方法的代码块，在代码块的第一行添加代码：System.out.println(&quot;Hello World!!!&quot;);</span><br><span class="line">                     *</span><br><span class="line">                     * @param tree</span><br><span class="line">                     */</span><br><span class="line">                    @Override</span><br><span class="line">                    public void visitBlock(JCTree.JCBlock tree) &#123;</span><br><span class="line">                        ListBuffer&lt;JCTree.JCStatement&gt; statements = new ListBuffer();</span><br><span class="line"></span><br><span class="line">                        // 创建代码: System.out.println(&quot;Hello World!!!&quot;);</span><br><span class="line">                        JCTree.JCFieldAccess fieldAccess = treeMaker.Select(treeMaker.Select(treeMaker.Ident(names.fromString(&quot;System&quot;)), names.fromString(&quot;out&quot;)), names.fromString(&quot;println&quot;));</span><br><span class="line">                        JCTree.JCExpression argsExpr = treeMaker.Literal(&quot;Hello world!!!&quot;);</span><br><span class="line">                        JCTree.JCMethodInvocation methodInvocation = treeMaker.Apply(List.nil(), fieldAccess, List.of(argsExpr));</span><br><span class="line">                        JCTree.JCExpressionStatement code = treeMaker.Exec(methodInvocation);</span><br><span class="line"></span><br><span class="line">                        // 把代码加到方法体之前</span><br><span class="line">                        statements.append(code);</span><br><span class="line"></span><br><span class="line">                        // 把原来的方法体写回去</span><br><span class="line">                        for (int i = 0; i &lt; tree.getStatements().size(); i++) &#123;</span><br><span class="line">                            statements.append(tree.getStatements().get(i));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        result = treeMaker.Block(0, statements.toList());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册注解处理器"><a href="#注册注解处理器" class="headerlink" title="注册注解处理器"></a>注册注解处理器</h3><p>在<code>resources/META-INF/services</code>目录下创建文件<code>javax.annotation.processing.Processor</code>， 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.kangyonggan.demo.hello.core.MethodLoggerProcessor</span><br></pre></td></tr></table></figure><h3 id="hello-test模块pom-xml"><a href="#hello-test模块pom-xml" class="headerlink" title="hello-test模块pom.xml"></a>hello-test模块pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hello-test&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--compiler plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;plugin.compiler.level&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;plugin.compiler.level&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hello-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><code>MethodLoggerTest.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.test;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.demo.hello.core.MethodLogger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/17/17</span><br><span class="line"> */</span><br><span class="line">public class MethodLoggerTest &#123;</span><br><span class="line"></span><br><span class="line">    @MethodLogger</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new MethodLoggerTest().test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world!!!</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h3 id="反编译MethodLoggerTest-class"><a href="#反编译MethodLoggerTest-class" class="headerlink" title="反编译MethodLoggerTest.class"></a>反编译MethodLoggerTest.class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">// (powered by Fernflower decompiler)</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">package com.kangyonggan.demo.hello.test;</span><br><span class="line"></span><br><span class="line">public class MethodLoggerTest &#123;</span><br><span class="line">    public MethodLoggerTest() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;Hello world!!!&quot;);</span><br><span class="line">        System.out.println(&quot;test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        (new MethodLoggerTest()).test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>Hello World的源代码托管在github上：<a href="https://github.com/kangyonggan/method-logger-hello.git" target="_blank" rel="noopener">https://github.com/kangyonggan/method-logger-hello.git</a></p><p>最终实现的代码：<a href="https://github.com/kangyonggan/extra.git" target="_blank" rel="noopener">https://github.com/kangyonggan/method-logger.git</a></p><p>此jar包已经发布到中央仓库，联网即可依赖。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;想法&quot;&gt;&lt;a href=&quot;#想法&quot; class=&quot;headerlink&quot; title=&quot;想法&quot;&gt;&lt;/a&gt;想法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在任何一个方法上加上注解，都要能打印出参、入参信息，而不局限于spring管理的类方法。&lt;/li&gt;
&lt;li&gt;不要每次调用方法都要经过各种反射，而是编译时就把增强代码注入到方法第一行。这样性能更好。&lt;/li&gt;
&lt;li&gt;可以自定义使用什么日志框架输出日志。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开发工具：idea或eclipse&lt;/li&gt;
&lt;li&gt;项目管理工具：maven3.3.9&lt;/li&gt;
&lt;li&gt;jdk版本：1.8.0_144&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里巴巴开发规范扫描我的博客发现的问题总结</title>
    <link href="http://kangyonggan.com/2018/08/06/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%AB%E6%8F%8F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://kangyonggan.com/2018/08/06/使用阿里巴巴开发规范扫描我的博客发现的问题总结/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、 在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式（发现1处）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (condition) statements;</span><br></pre></td></tr></table></figure><p>二应该写成下面这样的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (flag) &#123;</span><br><span class="line">    System.out.println(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>二、 所有的覆写方法，必须加@Override注解。 反例：getObject()与get0bject()的问题。一个是字母的O，一个是数字的0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错（发现25处）。</p><p>三、 Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals（发现62处）。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void f(String str)&#123;</span><br><span class="line">    String inner = &quot;hi&quot;;</span><br><span class="line">    if (inner.equals(str)) &#123;</span><br><span class="line">        System.out.println(&quot;hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、 SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类（发现62处）。</p><p>说明：如果是JDK8的应用，可以使用instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p><p>Positive example 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static final String FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">public String getFormat(Date date)&#123;</span><br><span class="line">    SimpleDateFormat dateFormat = new SimpleDateFormat(FORMAT);</span><br><span class="line">    return sdf.format(date);</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">Positive example 2：</span><br></pre></td></tr></table></figure><p>private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>public void getFormat(){<br>    synchronized (sdf){<br>    sdf.format(new Date());<br>    ….;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">Positive example 3：</span><br></pre></td></tr></table></figure></p><p>private static final ThreadLocal<dateformat> DATE_FORMATTER = new ThreadLocal<dateformat>() {<br>    @Override<br>    protected DateFormat initialValue() {<br>        return new SimpleDateFormat(“yyyy-MM-dd”);<br>    }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 我玩意说是这么说，但是经过我的实验，发现SimpleDateFormat的parse确实需要加锁，但是format方法不需要。</span><br><span class="line"></span><br><span class="line">五、 不能使用过时的类或方法。 说明：java.net.URLDecoder 中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)（发现1处）。</span><br><span class="line"></span><br><span class="line">接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</span><br><span class="line"></span><br><span class="line">六、常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长（发现6处） </span><br><span class="line"></span><br><span class="line">```            </span><br><span class="line">public class ConstantNameDemo &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * max stock count</span><br><span class="line">     */</span><br><span class="line">    public static final Long MAX_STOCK_COUNT = 50000L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></dateformat></dateformat></p><p>七、 所有的枚举类型字段必须要有注释，说明每个数据项的用途。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public enum TestEnum &#123;</span><br><span class="line">    /**</span><br><span class="line">     * agree</span><br><span class="line">     */</span><br><span class="line">    agree(&quot;agree&quot;),</span><br><span class="line">    /**</span><br><span class="line">     * reject</span><br><span class="line">     */</span><br><span class="line">    reject(&quot;reject&quot;);</span><br><span class="line">    </span><br><span class="line">    private String action;</span><br><span class="line"></span><br><span class="line">    TestEnum(String action) &#123;</span><br><span class="line">        this.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAction() &#123;</span><br><span class="line">        return action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>八、 方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从驼峰形式(发现4处)</p><p>九、线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题(发现8处)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class="line">    .setNameFormat(&quot;demo-pool-%d&quot;).build();</span><br><span class="line">ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,</span><br><span class="line">    0L, TimeUnit.MILLISECONDS,</span><br><span class="line">    new LinkedBlockingQueue&lt;Runnable&gt;(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">singleThreadPool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class="line">singleThreadPool.shutdown();</span><br></pre></td></tr></table></figure><p>十、 不允许任何魔法值（即未经定义的常量）直接出现在代码中(发现212处)。 </p><p>Negative example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Magic values, except for predefined, are forbidden in coding.</span><br><span class="line">if (key.equals(&quot;Id#taobao_1&quot;)) &#123;</span><br><span class="line">        //...</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>String KEY_PRE = “Id#taobao_1”;<br>if (KEY_PRE.equals(key)) {<br>        //…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">十一、中括号是数组类型的一部分，数组定义如下(发现19处)：</span><br></pre></td></tr></table></figure></p><p>String[] args;</p><p>String[] a = new String[3];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十二、及时清理不再使用的代码段或配置信息。 说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余(发现2处)。</span><br><span class="line"></span><br><span class="line">Positive example: For codes which are temporarily removed and likely to be reused, use /// to add a reasonable note.</span><br></pre></td></tr></table></figure></p><p>public static void hello() {<br>    /// Business is stopped temporarily by the owner.<br>    // Business business = new Business();<br>    // business.active();<br>    System.out.println(“it’s finished”);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十三、所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 说明：如有实现和调用注意事项，请一并说明(发现2处)。</span><br></pre></td></tr></table></figure></p><p>/**</p><ul><li>fetch data by rule id</li><li></li><li>@param ruleId rule id</li><li>@param page page number</li><li>@param jsonContext json format context</li><li>@return Result<xxxxdo><br>*/<br>Result<xxxxdo> fetchDataByRuleId(Long ruleId, Integer page, String jsonContext);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十四、所有的类都必须添加创建者信息。 说明：在设置模板时，注意IDEA的@author为$&#123;USER&#125;，而eclipse的@author为$&#123;user&#125;，大小写有区别，而日期的设置统一为yyyy/MM/dd的格式（发现45处）。</span><br></pre></td></tr></table></figure></xxxxdo></xxxxdo></li></ul><p>/**</p><ul><li>Demo class</li><li></li><li>@author keriezhang</li><li>@date 2016/10/31<br>*/<br>public class CodeNoteDemo {<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十五、集合初始化时，指定集合初始值大小。 说明：HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可(发现6处)。</span><br><span class="line">         </span><br><span class="line">Negative example:</span><br></pre></td></tr></table></figure></li></ul><p>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(16);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十六、类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO（发现1处）</span><br><span class="line"></span><br><span class="line">十七、除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量，以提高可读性。 说明：很多if语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</span><br><span class="line">            </span><br><span class="line">Negative example:</span><br></pre></td></tr></table></figure></p><p>if ((file.open(fileName, “w”) != null) &amp;&amp; (…) || (…)) {<br>    // …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">            </span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>boolean existed = (file.open(fileName, “w”) != null) &amp;&amp; (…) || (…);<br>if (existed) {<br>    //…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十八、类、类属性、类方法的注释必须使用javadoc规范，使用/**内容*/格式，不得使用//xxx方式和/*xxx*/方式。 说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率(发现2处)。</span><br></pre></td></tr></table></figure></p><p>/**</p><ul><li></li><li><p>XXX class function description.<br><em></em>/<br>public class XxClass implements Serializable {<br> private static final long serialVersionUID = 113323427779853001L;<br> /**</p><ul><li>id<br>*/<br>private Long id;<br>/**</li><li><p>title<br>*/<br>private String title;</p><p>/**</p></li><li>find by id</li><li></li><li>@param ruleId rule id</li><li>@param page start from 1</li><li>@return Result<xxxx><br>*/<br>public Result<xxxx> funcA(Long ruleId, Integer page) {<br> return null;<br>}<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">十九、方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐(发现12处)。</span><br></pre></td></tr></table></figure></xxxx></xxxx></li></ul></li></ul><p>public void method() {<br>    // Put single line comment above code. (Note: align ‘//‘ comment with code)<br>    int a = 3;</p><pre><code>/*** Some description about follow code. (Note: align &apos;/**&apos; comment with code)*/int b = 4;</code></pre><p>}<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、 在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式（发现1处）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (condition) statements;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;二应该写成下面这样的形式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&amp;quot;hello world&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(一)</title>
    <link href="http://kangyonggan.com/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%B8%80)/"/>
    <id>http://kangyonggan.com/2018/08/06/IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(一)/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><ul><li>IntelliJ IDEA下载地址：<a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a></li><li>TeamCity下载地址：<a href="https://www.jetbrains.com/teamcity/download" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/download</a></li><li>Upsource下载地址：<a href="https://www.jetbrains.com/upsource/download" target="_blank" rel="noopener">https://www.jetbrains.com/upsource/download</a></li><li>TeamCity Plugin：<a href="https://plugins.jetbrains.com/plugin/1820-teamcity-integration" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/1820-teamcity-integration</a></li><li>Upsource Pligin：<a href="https://plugins.jetbrains.com/plugin/7431-upsource-integration" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7431-upsource-integration</a></li><li>阿里巴巴代码质量检测插件：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul><p>后面三个是idea插件，如果电脑能联网，可以在插件中搜索到直接安装，如果是公司内网，可以下载离线安装包，然后手动安装idea插件。</p><p>安装IDEA插件方法：<code>Preferences &gt; Plugins &gt; Install plugin from disk...</code></p><a id="more"></a><h2 id="TeamCity的安装"><a href="#TeamCity的安装" class="headerlink" title="TeamCity的安装"></a>TeamCity的安装</h2><blockquote><p>以下都是以我博客服务器（ubuntu 16.04.4）为例</p></blockquote><h3 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf soft/TeamCity-2017.2.3.tar.gz  -C install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/TeamCity/bin/runAll.sh start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/TeamCity/bin/runAll.sh stop</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://kangyonggan.com:8111">http://kangyonggan.com:8111</a></p><p>TeamCity内置了一个tomcat容器，默认端口为8111，可以在<br><code>/home/hxzq/install/TeamCity/conf/server.xml</code>修改端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8111&quot; ...</span><br></pre></td></tr></table></figure><p><img src="/uploads/ARTICLE20180401b89693552301f2e1d60c3a780427f167a4738378.png" alt=""></p><p>默认即可，点击<code>Proceed</code>， 接下来是选择数据库，如下图：</p><p><img src="/uploads/ARTICLE201804014eb4101e00e74b27246e5ad2c387ebc2b149c35b.png" alt=""></p><p>这里我选择的是mysql，选择mysql后，需要把mysql的驱动包(可以从本地maven仓库中找到)拷贝到<br><code>/home/hxzq/.BuildServer/lib/jdbc</code>目录下，然后点击<code>Refresh JDBC Drivers</code>, 如果jar包没问题，会出现下面的界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.34.jar /home/hxzq/.BuildServer/lib/jdbc/</span><br></pre></td></tr></table></figure><p><img src="/uploads/ARTICLE2018040187bd260ade064bf05398f4c6a05612a27606d408.png" alt=""></p><p>最后填写jdbc连接的相关信息后点击<code>Proceed</code>，需要先自己创建一个数据库<code>teamcity</code><br>下一步就是接受条款，不多说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS teamcity;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE teamcity</span><br><span class="line">  DEFAULT CHARACTER SET utf8</span><br><span class="line">  COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p>然后就是让我们创建一个管理员, 如下图：</p><p><img src="/uploads/ARTICLE2018040192a3a27d4ed5cc2c1fe4b149c8d1a57e8122a2e3.png" alt=""></p><p>创建完成后会直接登录，并让我们补全个人信息，如下图：</p><p><img src="/uploads/ARTICLE20180401b2cbe1b9fbf4274961a274da47d9daf9ec109958.png" alt=""></p><p>到此，TeamCity就算安装完毕了，接下来就是配置一个项目，用于持续集成。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="/uploads/ARTICLE2018040164a3c5faec96dfedb57c97f0b0f7515353ec7bde.png" alt=""></p><p>此处我使用的是github上的项目。<br><img src="/uploads/ARTICLE2018040114db8b0e9e377d0f3d04b5641a351780877ba0e9.png" alt=""></p><p><img src="/uploads/ARTICLE2018040190c432c5b896215b65196e70be7329b53479978a.png" alt=""></p><p>如果是maven项目，它会自动识别出，并推荐你使用它的构建步骤，这里选不选都行，因为回头可以修改，基本上必须修改。<br><img src="/uploads/ARTICLE20180401945610b306ddc518538f8b34fd225bb99ca0b047.png" alt=""></p><p>勾选后，跳转到下面的构建步骤界面，这里你可以自由配置自己的构建步骤</p><p><img src="/uploads/ARTICLE2018040119397adc0f74429b8bfd0ebbe8bb2a3e636c6e43.png" alt=""></p><p>比如我配置的三个构建步骤：  </p><ul><li>第一步：更新代码并打包</li><li>第二步：把war包拷贝到服务器</li><li>第三步：执行几个shell命令，停止服务+替换war包+启动服务</li></ul><h3 id="配置第一步"><a href="#配置第一步" class="headerlink" title="配置第一步"></a>配置第一步</h3><p>点击<code>Edit</code><br><img src="/uploads/ARTICLE2018040142d927ce6004bb654d9e2da17b9ddc413604006f.png" alt=""></p><p><img src="/uploads/ARTICLE2018040169fed61178e0e18087a094c631c280880dbdf920.png" alt=""></p><p>如果配置的settings.xml不管用，可以在下面上传settings.xml文件</p><p><img src="/uploads/ARTICLE20180401ab7f2e264df5a3e87c93d11c1104da6cb39c7ef3.png" alt=""></p><h2 id="配置第二步"><a href="#配置第二步" class="headerlink" title="配置第二步"></a>配置第二步</h2><p>点击<code>Add build setup</code></p><p><img src="/uploads/ARTICLE201804010377f4258ce46f3fb1ef2c6f93ea0928a70f45b8.png" alt=""></p><p><img src="/uploads/ARTICLE2018040157a4a890be0e9580e47679a58a504c31b024f2d3.png" alt=""></p><p>如果不知道，第一步打出的war包在什么路径，可以先随意写几个字符，后面尝试运行时，会打印第一步的日志，从日志中可以看到war包路径。</p><p>接下来就可以尝试启动了，点击右上角的<code>run</code>， 注意看日志，顺便看看第一步打的war包的路径。</p><blockquote><p>首次构建，时间会比较久，需要耐心等待</p></blockquote><p><img src="/uploads/ARTICLE20180401ea6ffbce26284267db7f2cc11729e6144aab803d.png" alt=""></p><h3 id="配置第三步"><a href="#配置第三步" class="headerlink" title="配置第三步"></a>配置第三步</h3><p>点击<code>Add build setup</code></p><p><img src="/uploads/ARTICLE201804016153dda66dbc3992f894a5ca779771ad5cb1f513.png" alt=""></p><blockquote><p>我再第一步打的war包路径为<code>/home/hxzq/install/TeamCity/buildAgent/work/23d0c25675dc1f18/blog-web/target/blog-web-1.0-SNAPSHOT.war</code>，可供参考。</p></blockquote><p>其中ssh命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line">rm -rf /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/*</span><br><span class="line"></span><br><span class="line">unzip -d /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/ /home/hxzq/data/wars/blog-*.war </span><br><span class="line"></span><br><span class="line">ln -s /home/hxzq/data/blog/upload/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line">ln -s /home/hxzq/data/blog/cover/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line">ln -s /home/hxzq/data/blog/rss/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line"></span><br><span class="line">sh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/startup.sh</span><br><span class="line"></span><br><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure><p>配置完成后界面如下：<br><img src="/uploads/ARTICLE201804019b2233e08610bf055fa4767a0af395580886ad2a.png" alt=""></p><p>到此，算是搞定了，但是它还有另外一种操作，那就是集成在IDEA中。</p><h2 id="集成到IDEA"><a href="#集成到IDEA" class="headerlink" title="集成到IDEA"></a>集成到IDEA</h2><p>在idea中搜索插件<code>teamcity</code>，安装后重启。<br><img src="/uploads/tc-16.png" alt=""></p><p>重启后，会发现下面3点变化，右下角的那个图标表示暂未登录到TeamView。<br><img src="/uploads/tc-17.png" alt=""></p><p>点击右下角的图标登录TeamView：<br><img src="/uploads/tc-18.png" alt=""></p><p>登录成功后，即可在IDEA中一键发布项目了。<br><img src="/uploads/tc-19.png" alt=""></p><p>这样的话，一个IDEA就可以开发代码，运行项目，控制版本，操作数据库，一键发布，强大的不要不要的。</p><p>但是！如果代码没有改变，是不能remote run的，我也没有找到怎么在没改变代码的情况下运行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IntelliJ IDEA下载地址：&lt;a href=&quot;https://www.jetbrains.com/idea/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jetbrains.com/idea/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TeamCity下载地址：&lt;a href=&quot;https://www.jetbrains.com/teamcity/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jetbrains.com/teamcity/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upsource下载地址：&lt;a href=&quot;https://www.jetbrains.com/upsource/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jetbrains.com/upsource/download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TeamCity Plugin：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/1820-teamcity-integration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://plugins.jetbrains.com/plugin/1820-teamcity-integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upsource Pligin：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7431-upsource-integration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://plugins.jetbrains.com/plugin/7431-upsource-integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;阿里巴巴代码质量检测插件：&lt;a href=&quot;https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面三个是idea插件，如果电脑能联网，可以在插件中搜索到直接安装，如果是公司内网，可以下载离线安装包，然后手动安装idea插件。&lt;/p&gt;
&lt;p&gt;安装IDEA插件方法：&lt;code&gt;Preferences &amp;gt; Plugins &amp;gt; Install plugin from disk...&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring配置多数据源</title>
    <link href="http://kangyonggan.com/2018/08/06/%E4%BD%BF%E7%94%A8Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://kangyonggan.com/2018/08/06/使用Spring配置多数据源/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:46:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两个dataSources"><a href="#两个dataSources" class="headerlink" title="两个dataSources"></a>两个dataSources</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置dbcp数据源 - dev --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSourceDev&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;ehelper.jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;ehelper.jdbc.url.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;ehelper.jdbc.username.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;ehelper.jdbc.password.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minIdle&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxActive&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="line">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot; &gt;&lt;/property&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">    &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置dbcp数据源 - uat --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSourceUat&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;ehelper.jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;ehelper.jdbc.url.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;ehelper.jdbc.username.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;ehelper.jdbc.password.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minIdle&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxActive&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="line">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot; &gt;&lt;/property&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">    &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="MultiDataSource"><a href="#MultiDataSource" class="headerlink" title="MultiDataSource"></a>MultiDataSource</h2><p>需要自己实现数据源路由， 继承AbstractRoutingDataSource，覆写determineCurrentLookupKey方法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.util;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 多数据源</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">public class MultiDataSource extends AbstractRoutingDataSource &#123;</span><br><span class="line"></span><br><span class="line">    private static final ThreadLocal&lt;String&gt; dataSourceKey = new InheritableThreadLocal();</span><br><span class="line"></span><br><span class="line">    public static void setDataSource(DataSource dataSource) &#123;</span><br><span class="line">        dataSourceKey.set(dataSource.name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object determineCurrentLookupKey() &#123;</span><br><span class="line">        return dataSourceKey.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中DataSource是个枚举：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.model.constants;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">public enum DataSource &#123;</span><br><span class="line">    DEV, UAT;</span><br><span class="line"></span><br><span class="line">    public static DataSource getDataSource(String name) &#123;</span><br><span class="line">        for (DataSource dataSource : DataSource.values()) &#123;</span><br><span class="line">            if (dataSource.name().equalsIgnoreCase(name)) &#123;</span><br><span class="line">                return dataSource;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return DataSource.DEV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sqlSessionFactory"><a href="#sqlSessionFactory" class="headerlink" title="sqlSessionFactory"></a>sqlSessionFactory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建SqlSessionFactory，同时指定数据源 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;multiDataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.shhxzq.fin.ehelper.model.vo&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;plugins&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;bean class=&quot;com.github.pagehelper.PageHelper&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;properties&quot;&gt;</span><br><span class="line">                    &lt;value&gt;</span><br><span class="line">                        dialect=mysql</span><br><span class="line">                    &lt;/value&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="sqlSession"><a href="#sqlSession" class="headerlink" title="sqlSession"></a>sqlSession</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SQLSession模板 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot; scope=&quot;prototype&quot;&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/constructor&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用JDBC事务 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;multiDataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionAdvice"><a href="#transactionAdvice" class="headerlink" title="transactionAdvice"></a>transactionAdvice</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- AOP配置事物 --&gt;</span><br><span class="line">&lt;tx:advice id=&quot;transactionAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;remove*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;send*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tx:method name=&quot;search*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionPointcut"><a href="#transactionPointcut" class="headerlink" title="transactionPointcut"></a>transactionPointcut</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置AOP切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--切点，用于事务--&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;transactionPointcut&quot;</span><br><span class="line">                  expression=&quot;execution(* com.shhxzq.fin.ehelper.biz.service.impl.transaction..*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--事物切面--&gt;</span><br><span class="line">    &lt;aop:advisor pointcut-ref=&quot;transactionPointcut&quot; advice-ref=&quot;transactionAdvice&quot;&gt;&lt;/aop:advisor&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>原本我是想在spring初始化bean的时候就指定数据源，这样的话事务就不会和数据源打架，我想到的方案是，给不同的包指定不同的数据源，但是这样会带来一个问题，就是会冗余代码。</p><p>比如dev环境和uat环境的service分别放在dev和uat包下，再分别给dev包河uat包指定dev的数据源和uat的数据源。</p><p>引发的问题：dev和uat业务逻辑一样，仅数据源不一样，但是却有两份代码！冗余还是小事，以后维护才是大事，所以此方案果断排除。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>在调用方法的时候传入一个参数，指定调用哪个数据源，这样代码就没冗余的地方了，但是会带来一个问题。</p><p>就是需要修改老代码，在参数中增加一个参数，然后在方法中指定数据源，在方法中指定数据源可以使用注解和切面完成，但不可避面的还是要增加一个参数。</p><p>如果不增加一个参数，而是在注解中加参数呢？我也这么想过，但是这样的话，这个方法就只能使用固定的数据源了，达不到动态的效果。</p><p>进一步分析，如果在注解中加参数，另外再多写一个方法指定为另一个数据源呢？显然是不可取的，方法冗余，维护困难，如果再次增加数据源还得再加一个方法。</p><p>所以，最后我还是选择了使用【传参+注解】的方案，没办法，要想动态切换数据源，你总的告诉方法你要用哪个数据源吧，怎么告诉他？传参是最好途径了，并且扩展性强。下面是我具体实现代码。</p><h2 id="DataSourceSwitch"><a href="#DataSourceSwitch" class="headerlink" title="DataSourceSwitch"></a>DataSourceSwitch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.model.annotation;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在方法上加此注解，会使用第一个参数即DataSource枚举切换数据源</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/12/8</span><br><span class="line"> */</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface DataSourceSwitch &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataSourceAop"><a href="#DataSourceAop" class="headerlink" title="DataSourceAop"></a>DataSourceAop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.aop;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.biz.util.MultiDataSource;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class DataSourceAop &#123;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(* com.shhxzq.fin.ehelper.biz.service.impl..*.*(..))&quot;)</span><br><span class="line">    public void pointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    @Around(&quot;pointcut()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        Object args[] = joinPoint.getArgs();</span><br><span class="line">        Class clazz = joinPoint.getTarget().getClass();</span><br><span class="line"></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());</span><br><span class="line"></span><br><span class="line">        DataSourceSwitch dataSourceSwitch = method.getAnnotation(DataSourceSwitch.class);</span><br><span class="line">        if (dataSourceSwitch != null) &#123;</span><br><span class="line">            log.info(&quot;使用指定的数据源.&quot;);</span><br><span class="line">            if (args.length &gt; 0) &#123;</span><br><span class="line">                Object obj = args[0];</span><br><span class="line">                if (obj instanceof DataSource) &#123;</span><br><span class="line">                    DataSource dataSource = (DataSource) obj;</span><br><span class="line">                    MultiDataSource.setDataSource(dataSource);</span><br><span class="line">                    log.info(&quot;数据源：&#123;&#125;&quot;, dataSource.name());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    log.info(&quot;第一个参数不是DataSource枚举，所以仍然使用默认数据源.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.info(&quot;第一个参数不是DataSource枚举，所以仍然使用默认数据源.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.info(&quot;使用默认数据源.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return joinPoint.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BeCommandServiceImpl"><a href="#BeCommandServiceImpl" class="headerlink" title="BeCommandServiceImpl"></a>BeCommandServiceImpl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.service.impl;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.biz.service.BeCommandService;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.LogTime;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.vo.BeCommand;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class BeCommandServiceImpl extends BaseService&lt;BeCommand&gt; implements BeCommandService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @LogTime</span><br><span class="line">    @DataSourceSwitch</span><br><span class="line">    public BeCommand findBeCommandBySerialNo(DataSource dataSource, String serialNo) &#123;</span><br><span class="line">        BeCommand beCommand = new BeCommand();</span><br><span class="line">        beCommand.setSerialNo(serialNo);</span><br><span class="line"></span><br><span class="line">        return super.selectOne(beCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>另外我还遇到了一个问题，那就是事务和多数据源打架了，我的解决方案是把它们两个分开。但也不是太好，先这样吧，以后再研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两个dataSources&quot;&gt;&lt;a href=&quot;#两个dataSources&quot; class=&quot;headerlink&quot; title=&quot;两个dataSources&quot;&gt;&lt;/a&gt;两个dataSources&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 配置dbcp数据源 - dev --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;dataSourceDev&amp;quot; class=&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      destroy-method=&amp;quot;close&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.driver&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.url.dev&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.username.dev&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.password.dev&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置初始化大小、最小、最大 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;100&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置获取连接等待超时的时间 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxWait&amp;quot; value=&amp;quot;60000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;timeBetweenEvictionRunsMillis&amp;quot; value=&amp;quot;60000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;minEvictableIdleTimeMillis&amp;quot; value=&amp;quot;300000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;validationQuery&amp;quot; value=&amp;quot;SELECT &amp;apos;x&amp;apos;&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testWhileIdle&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testOnBorrow&amp;quot; value=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testOnReturn&amp;quot; value=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;poolPreparedStatements&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxPoolPreparedStatementPerConnectionSize&amp;quot; value=&amp;quot;20&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 关闭长时间不使用的连接 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;removeAbandoned&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 打开removeAbandoned功能 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;removeAbandonedTimeout&amp;quot; value=&amp;quot;1200&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 1200秒，也就是20分钟 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;logAbandoned&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 关闭abanded连接时输出错误日志 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 配置dbcp数据源 - uat --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;bean id=&amp;quot;dataSourceUat&amp;quot; class=&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      destroy-method=&amp;quot;close&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.driver&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.url.uat&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.username.uat&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;ehelper.jdbc.password.uat&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置初始化大小、最小、最大 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;initialSize&amp;quot; value=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;minIdle&amp;quot; value=&amp;quot;5&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxActive&amp;quot; value=&amp;quot;100&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置获取连接等待超时的时间 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxWait&amp;quot; value=&amp;quot;60000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;timeBetweenEvictionRunsMillis&amp;quot; value=&amp;quot;60000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;minEvictableIdleTimeMillis&amp;quot; value=&amp;quot;300000&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;validationQuery&amp;quot; value=&amp;quot;SELECT &amp;apos;x&amp;apos;&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testWhileIdle&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testOnBorrow&amp;quot; value=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;testOnReturn&amp;quot; value=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;poolPreparedStatements&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;maxPoolPreparedStatementPerConnectionSize&amp;quot; value=&amp;quot;20&amp;quot; &amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- 关闭长时间不使用的连接 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;removeAbandoned&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 打开removeAbandoned功能 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;removeAbandonedTimeout&amp;quot; value=&amp;quot;1200&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 1200秒，也就是20分钟 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;property name=&amp;quot;logAbandoned&amp;quot; value=&amp;quot;true&amp;quot; &amp;gt;&amp;lt;/property&amp;gt; &amp;lt;!-- 关闭abanded连接时输出错误日志 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA自动生成setter方法丢失is</title>
    <link href="http://kangyonggan.com/2018/08/06/IntelliJ%20IDEA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90setter%E6%96%B9%E6%B3%95%E4%B8%A2%E5%A4%B1is/"/>
    <id>http://kangyonggan.com/2018/08/06/IntelliJ IDEA自动生成setter方法丢失is/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>有一个实体类Demo，他有一个boolean类型的属性isUpdate。</p><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>如果使用idea自动生成setter方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void setUpdate(boolean update) &#123;</span><br><span class="line">    isUpdate = update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端请求"><a href="#前端请求" class="headerlink" title="前端请求"></a>前端请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.post(&quot;xxxxx/update&quot;, &#123;</span><br><span class="line">    isUpdate: true</span><br><span class="line">&#125;, function(data,status)&#123;</span><br><span class="line">    alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="spring注入"><a href="#spring注入" class="headerlink" title="spring注入"></a>spring注入</h3><p>我们在前端请求后台controller时，controller方法的参数是实体类Demo，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;update&quot;, method = RequestMethod.POST)</span><br><span class="line">public String update(Demo demo) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    System.out.println(&quot;isUpdate is &quot; + demo.getIsUpdate());</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isUpdate is false</span><br></pre></td></tr></table></figure><p>说明spring在注入时找不到isUpdate对应的setter方法。</p><h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h3><p>如果使用eclipse自动生成setter方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void setIsUpdate(boolean isUpdate) &#123;</span><br><span class="line">    this.isUpdate = isUpdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换成eclipse之后，生成的setter就是好的了, 如果使用lombok插件自动生成setter也是好的</p><blockquote><p>说明：只有属性是boolean或者Boolean时，并且以is开头的字段，使用idea自动生成setter时才会丢失is。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实体类&quot;&gt;&lt;a href=&quot;#实体类&quot; class=&quot;headerlink&quot; title=&quot;实体类&quot;&gt;&lt;/a&gt;实体类&lt;/h3&gt;&lt;p&gt;有一个实体类Demo，他有一个boolean类型的属性isUpdate。&lt;/p&gt;
&lt;h3 id=&quot;idea&quot;&gt;&lt;a href=&quot;#idea&quot; class=&quot;headerlink&quot; title=&quot;idea&quot;&gt;&lt;/a&gt;idea&lt;/h3&gt;&lt;p&gt;如果使用idea自动生成setter方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void setUpdate(boolean update) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isUpdate = update;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;前端请求&quot;&gt;&lt;a href=&quot;#前端请求&quot; class=&quot;headerlink&quot; title=&quot;前端请求&quot;&gt;&lt;/a&gt;前端请求&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.post(&amp;quot;xxxxx/update&amp;quot;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isUpdate: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, function(data,status)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(&amp;quot;数据: \n&amp;quot; + data + &amp;quot;\n状态: &amp;quot; + status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="综合" scheme="http://kangyonggan.com/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(二)</title>
    <link href="http://kangyonggan.com/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%BA%8C)/"/>
    <id>http://kangyonggan.com/2018/08/06/IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(二)/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Upsource的安装"><a href="#Upsource的安装" class="headerlink" title="Upsource的安装"></a>Upsource的安装</h2><h3 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip soft/upsource-2017.3.2888.zip -d install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/upsource-2017.3.2888/bin/upsource.sh start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/upsource-2017.3.2888/bin/upsource.sh stop</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://kangyonggan.com:8081/">http://kangyonggan.com:8081/</a><br>upsource会从8080端口开始，找到一个不是正在使用的端口使用，比如说8080端口没在使用的话，他就会使用8080端口</p><p><img src="/uploads/itu-20.png" alt=""></p><p>配置应用地址和端口，保持默认即可</p><p><img src="/uploads/itu-21.png" alt=""></p><p>设置管理员密码</p><p><img src="/uploads/itu-22.png" alt=""></p><p>使用默认的60天免费授权码</p><p><img src="/uploads/itu-23.png" alt=""></p><p>接下来就是等待配置，可能需要几分钟的时间</p><p><img src="/uploads/itu-24.png" alt=""><br><img src="/uploads/itu-25.png" alt=""></p><p>加载完成之后，如下图：</p><p><img src="/uploads/itu-26.png" alt=""></p><p>点击右上角的<code>Log in...</code>，登录后提示你完善个人信息</p><p><img src="/uploads/itu-27.png" alt=""></p><p>当我填写邮箱后点击保存，他提示我邮箱没有验证，当我点击发送验证邮件时，又提示邮件通知被禁用了</p><p>下图是开启邮件通知和smtp的配置</p><p><img src="/uploads/itu-28.png" alt=""><br><img src="/uploads/itu-29.png" alt=""><br><img src="/uploads/itu-30.png" alt=""><br><img src="/uploads/itu-31.png" alt=""><br><img src="/uploads/itu-32.png" alt=""></p><p>配置好smtp并且开启邮件通知之后，再回到profile，重新发送一个校验邮件，收到邮件后，点击邮件中的链接即可。</p><p><img src="/uploads/itu-33.png" alt=""></p><p>补充好个人信息之后，切到<code>upsource</code>视图去创建一个项目，从而开始review之路。</p><p><img src="/uploads/itu-34.png" alt=""><br><img src="/uploads/itu-35.png" alt=""><br><img src="/uploads/itu-36.png" alt=""><br><img src="/uploads/itu-37.png" alt=""></p><h2 id="集成到idea中"><a href="#集成到idea中" class="headerlink" title="集成到idea中"></a>集成到idea中</h2><p>在idea中安装upsource插件<br><img src="/uploads/itu-38.png" alt=""></p><p>重启idea后会在右下角看见up图标，点击后会弹框让你输入upsource服务器的地址，输入后弹出浏览器登录界面。</p><p><img src="/uploads/itu-39.png" alt=""></p><p>如何审核代码呢？在idea中找到要审核的代码<code>行</code>，<code>右键 &gt; upsource &gt; 留言</code></p><p><img src="/uploads/itu-40.png" alt=""></p><p>留言后，在代码行首可以看见图标，点击图标可以查看留言内容，并且可以对其进行评论或其他骚操作。</p><p><img src="/uploads/itu-41.png" alt=""></p><p>还有其他更多操作，请自行探索。</p><h2 id="代码质量检测"><a href="#代码质量检测" class="headerlink" title="代码质量检测"></a>代码质量检测</h2><p>代码质量检测是按照阿里巴巴开发规范来进行检测的，为此阿里还开发了对应的idea、eclipse插件。在idea中按照此插件如下图：</p><p><img src="/uploads/itu-42.png" alt=""></p><p>安装完成重启idea后，可以在tools中看到对应的菜单、右键菜单里也有对应的菜单，也可以使用快捷键。</p><p><img src="/uploads/itu-43.png" alt=""></p><p><img src="/uploads/itu-44.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Upsource的安装&quot;&gt;&lt;a href=&quot;#Upsource的安装&quot; class=&quot;headerlink&quot; title=&quot;Upsource的安装&quot;&gt;&lt;/a&gt;Upsource的安装&lt;/h2&gt;&lt;h3 id=&quot;解压到指定目录&quot;&gt;&lt;a href=&quot;#解压到指定目录&quot; class=&quot;headerlink&quot; title=&quot;解压到指定目录&quot;&gt;&lt;/a&gt;解压到指定目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unzip soft/upsource-2017.3.2888.zip -d install/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sh install/upsource-2017.3.2888/bin/upsource.sh start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;停止&quot;&gt;&lt;a href=&quot;#停止&quot; class=&quot;headerlink&quot; title=&quot;停止&quot;&gt;&lt;/a&gt;停止&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sh install/upsource-2017.3.2888/bin/upsource.sh stop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JDBC连接MySQL数据库的代码片段</title>
    <link href="http://kangyonggan.com/2018/08/06/JDBC%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    <id>http://kangyonggan.com/2018/08/06/JDBC连接MySQL数据库的代码片段/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/25/17</span><br><span class="line"> */</span><br><span class="line">public class ExcelParse605 &#123;</span><br><span class="line"></span><br><span class="line">    private static String url = &quot;jdbc:mysql://127.0.0.1:3306/dfjz?useUnicode=true&amp;characterEncoding=UTF-8&quot;;</span><br><span class="line">    private static String username = &quot;root&quot;;</span><br><span class="line">    private static String password = &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">    private static Connection conn;</span><br><span class="line">    private static PreparedStatement ps;</span><br><span class="line">    private static ResultSet rs;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">            ps = conn.prepareStatement(&quot;SELECT bnk_resp_co FROM be_resp WHERE bnk_no = &apos;605&apos;&quot;);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                String bnkRespCo = rs.getString(&quot;bnk_resp_co&quot;);</span><br><span class="line">                System.out.println(bnkRespCo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (rs != null) &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (ps != null) &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (conn != null) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Compile Expression Language</title>
    <link href="http://kangyonggan.com/2018/08/06/JavaCompileExpressionLanguage/"/>
    <id>http://kangyonggan.com/2018/08/06/JavaCompileExpressionLanguage/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.kangyonggan&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jcel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// treeMaker and names is JCTree&apos;s environment</span><br><span class="line">JCExpressionParser parser = new JCExpressionParser(treeMaker, names);</span><br><span class="line">JCTree.JCExpression expression = parser.parse(</span><br><span class="line">    &quot;Hello $&#123;user.info.name&#125;, welcome use my $&#123;project[0](1).name&#125;, thanks!&quot;);</span><br><span class="line">System.out.println(expression);</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello &quot; + user.getInfo().getName() + &quot;, welcome use my &quot; + project[0].get(1).getName();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Dependency&quot;&gt;&lt;a href=&quot;#Depende
      
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用Log4j2的Rewrite过滤敏感信息</title>
    <link href="http://kangyonggan.com/2018/08/06/%E4%BD%BF%E7%94%A8Log4j2%E7%9A%84Rewrite%E8%BF%87%E6%BB%A4%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://kangyonggan.com/2018/08/06/使用Log4j2的Rewrite过滤敏感信息/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摸索过程"><a href="#摸索过程" class="headerlink" title="摸索过程"></a>摸索过程</h2><p>查看官方文档<a href="https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender</a>，官方文档中虽然有所介绍，但是没给demo，百度谷歌都很难查到此类文章，所有配置起来有一定难度。</p><a id="more"></a><h3 id="pom-xml的配置"><a href="#pom-xml的配置" class="headerlink" title="pom.xml的配置"></a>pom.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j2-rewrite&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;log4j2.api.version&gt;2.8.2&lt;/log4j2.api.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Log4j2--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="log4j2-xml的配置"><a href="#log4j2-xml的配置" class="headerlink" title="log4j2.xml的配置"></a>log4j2.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;warn&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Rewrite name=&quot;Rewrite&quot;&gt;</span><br><span class="line">            &lt;MyRewritePolicy&gt;&lt;/MyRewritePolicy&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Rewrite&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;info&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Rewrite&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>其中MyRewritePolicy是我自定义的，它实现了RewritePolicy接口，同时需要实现一个方法public LogEvent rewrite(final LogEvent event)</p><h3 id="MyRewritePolicy-java的实现"><a href="#MyRewritePolicy-java的实现" class="headerlink" title="MyRewritePolicy.java的实现"></a>MyRewritePolicy.java的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小测一下"><a href="#小测一下" class="headerlink" title="小测一下"></a>小测一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LogManager.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        logger.info(&quot;手机号:&#123;&#125;&quot;, &quot;15121149571&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2017-04-24 23:35:04,827 main ERROR Unable to invoke factory method in class class com.kangyonggan.demo.MyRewritePolicy for element MyRewritePolicy. java.lang.IllegalStateException: No factory method found for class com.kangyonggan.demo.MyRewritePolicy</span><br><span class="line">at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.findFactoryMethod(PluginBuilder.java:224)</span><br><span class="line">at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:130)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:952)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:892)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:508)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:232)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:244)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:545)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:617)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:634)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:229)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:152)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:45)</span><br><span class="line">at org.apache.logging.log4j.LogManager.getContext(LogManager.java:194)</span><br><span class="line">at org.apache.logging.log4j.LogManager.getLogger(LogManager.java:551)</span><br><span class="line">at com.kangyonggan.demo.Test.&lt;clinit&gt;(Test.java:12)</span><br><span class="line"></span><br><span class="line">[INFO ] 2017-04-24 23:35:04.884 [com.kangyonggan.demo.Test.main:15] - 手机号:15121149571</span><br></pre></td></tr></table></figure><p>从报错信息中可以看出：没有工厂方法（No factory method found）。<br>还提到了org.apache.logging.log4j.core.config.plugins这个包下面的插件。<br>所以去这个包下面看一下相关的插件：</p><p><img src="/uploads/log4j2-rewrite-01.png" alt="plugin"></p><p>果然看到了factory相关的plugin，并且PluginFactory是作用在method上的。</p><h3 id="使用-PluginFactory注解"><a href="#使用-PluginFactory注解" class="headerlink" title="使用@PluginFactory注解"></a>使用@PluginFactory注解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.PluginFactory;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static void factory() &#123;</span><br><span class="line">        System.out.println(&quot;factory&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次运行后没有报错了，也打印了“factory”，但是rewrite方法没被执行。</p><p>仔细一想，这既然是工厂方法，一定是为了创建对象的，所以再次修改如下。</p><h3 id="PluginFactory返回自定义的实例"><a href="#PluginFactory返回自定义的实例" class="headerlink" title="PluginFactory返回自定义的实例"></a>PluginFactory返回自定义的实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.PluginFactory;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static MyRewritePolicy factory() &#123;</span><br><span class="line">        System.out.println(&quot;factory&quot;);</span><br><span class="line">        return new MyRewritePolicy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此运行后发现成功了！</p><h3 id="完整log4j2-xml的配置"><a href="#完整log4j2-xml的配置" class="headerlink" title="完整log4j2.xml的配置"></a>完整log4j2.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;AllFile&quot; fileName=&quot;$&#123;dfjz.log4j2.home&#125;/all.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;dfjz.log4j2.home&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;dfjz.log4j2.home&#125;/error.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;dfjz.log4j2.home&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;SMTP name=&quot;Mail&quot; subject=&quot;$&#123;dfjz.app.name&#125; - 报警通知&quot; to=&quot;$&#123;dfjz.mail.receiver&#125;&quot; from=&quot;$&#123;dfjz.mail.username&#125;&quot;</span><br><span class="line">              smtpHost=&quot;$&#123;dfjz.mail.host&#125;&quot; smtpUsername=&quot;$&#123;dfjz.mail.username&#125;&quot; smtpPassword=&quot;$&#123;dfjz.mail.password&#125;&quot; bufferSize=&quot;$&#123;dfjz.mail.bufferSize&#125;&quot; &gt;</span><br><span class="line">        &lt;/SMTP&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncAll&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AllFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncError&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ErrorFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Mail&quot; &gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Rewrite name=&quot;Rewrite&quot;&gt;</span><br><span class="line">            &lt;MyRewritePolicy&gt;&lt;/MyRewritePolicy&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Rewrite&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Rewrite&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>用以上配置就已经可以解决我们项目中的所有需求了，不对，还漏了一个，就是普通日志只打印info级别的，sql需要打印debug级别的。</p><h3 id="打印debug级别的SQL"><a href="#打印debug级别的SQL" class="headerlink" title="打印debug级别的SQL"></a>打印debug级别的SQL</h3><p>请参考我的另一篇文章<a href="https://kangyonggan.com/#article/41">使用Log4j2让项目输出info级别的日志和debug级别的sql</a></p><blockquote><p>觉得不错就赏点吧，你的支持是我进步的动力！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摸索过程&quot;&gt;&lt;a href=&quot;#摸索过程&quot; class=&quot;headerlink&quot; title=&quot;摸索过程&quot;&gt;&lt;/a&gt;摸索过程&lt;/h2&gt;&lt;p&gt;查看官方文档&lt;a href=&quot;https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender&lt;/a&gt;，官方文档中虽然有所介绍，但是没给demo，百度谷歌都很难查到此类文章，所有配置起来有一定难度。&lt;/p&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java对象的生命周期</title>
    <link href="http://kangyonggan.com/2018/08/06/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://kangyonggan.com/2018/08/06/Java对象的生命周期/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T06:00:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java对象的生命周期分为下面七个阶段"><a href="#Java对象的生命周期分为下面七个阶段" class="headerlink" title="Java对象的生命周期分为下面七个阶段"></a>Java对象的生命周期分为下面七个阶段</h2><ol><li>创建阶段（Created）</li><li>应用阶段（In Use）</li><li>不可见阶段（Invisible）</li><li>不可达阶段（Unreachable）</li><li>收集阶段（Collected）</li><li>终结阶段（Finalized）</li><li>对象空间重新分配阶段（De-allocated）</li></ol><a id="more"></a><h2 id="创建阶段（Created）"><a href="#创建阶段（Created）" class="headerlink" title="创建阶段（Created）"></a>创建阶段（Created）</h2><p>系统创建对象的过程如下：  </p><ul><li>为对象分配存储空间</li><li>开始构造对象</li><li>从超类到子类对类成员变量进行初始化</li><li>超类成员变量按顺序初始化，递归调用超类的构造方法</li><li>子类成员变量按顺序初始化，调用子类构造方法</li></ul><p>一旦对象创建，并被赋给某些变量，这个对象就进入了下一个阶段，也就是应用阶段。</p><h2 id="应用阶段（In-Use）"><a href="#应用阶段（In-Use）" class="headerlink" title="应用阶段（In Use）"></a>应用阶段（In Use）</h2><p>对象至少被一个强引用持有着（需先了解一下强引用、弱引用、虚引用、软引用）。</p><h2 id="不可见阶段（Invisible）"><a href="#不可见阶段（Invisible）" class="headerlink" title="不可见阶段（Invisible）"></a>不可见阶段（Invisible）</h2><p>程序本身不再持有对象的任何强引用，但是这些引用任然可能存在着。一般来说就是程序的执行<code>超出对象的作用域</code>。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure></p><p>最后一行的i已经超出了它的作用域，此时称<code>i处于不可见阶段</code>。当然，这在编译时会报错。</p><h2 id="不可达阶段（Unreachable）"><a href="#不可达阶段（Unreachable）" class="headerlink" title="不可达阶段（Unreachable）"></a>不可达阶段（Unreachable）</h2><p>是指对象不再被任何强引用持有着。但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</p><h2 id="收集阶段（Collected）"><a href="#收集阶段（Collected）" class="headerlink" title="收集阶段（Collected）"></a>收集阶段（Collected）</h2><p>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了finalize()方法，则会去执行该方法的终端操作。<br>这里要特别说明一下：不要重载finazlie()方法！原因有两点：  </p><ol><li>会影响JVM的对象分配与回收速度</li><li>可能造成该对象的再次“复活”</li></ol><h2 id="终结阶段（Finalized）"><a href="#终结阶段（Finalized）" class="headerlink" title="终结阶段（Finalized）"></a>终结阶段（Finalized）</h2><p>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</p><h2 id="对象空间重新分配阶段（De-allocated）"><a href="#对象空间重新分配阶段（De-allocated）" class="headerlink" title="对象空间重新分配阶段（De-allocated）"></a>对象空间重新分配阶段（De-allocated）</h2><p>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</p><p>原文地址：<a href="http://blog.csdn.net/sodino/article/details/38387049" target="_blank" rel="noopener">http://blog.csdn.net/sodino/article/details/38387049</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java对象的生命周期分为下面七个阶段&quot;&gt;&lt;a href=&quot;#Java对象的生命周期分为下面七个阶段&quot; class=&quot;headerlink&quot; title=&quot;Java对象的生命周期分为下面七个阶段&quot;&gt;&lt;/a&gt;Java对象的生命周期分为下面七个阶段&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建阶段（Created）&lt;/li&gt;
&lt;li&gt;应用阶段（In Use）&lt;/li&gt;
&lt;li&gt;不可见阶段（Invisible）&lt;/li&gt;
&lt;li&gt;不可达阶段（Unreachable）&lt;/li&gt;
&lt;li&gt;收集阶段（Collected）&lt;/li&gt;
&lt;li&gt;终结阶段（Finalized）&lt;/li&gt;
&lt;li&gt;对象空间重新分配阶段（De-allocated）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>量化分析HashMap</title>
    <link href="http://kangyonggan.com/2018/08/06/%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90HashMap/"/>
    <id>http://kangyonggan.com/2018/08/06/量化分析HashMap/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>HashMap是由<code>数组</code>和<code>链表</code>构成的，如下图：</p><p><img src="/uploads/hashmap.png" alt="HashMap"></p><a id="more"></a><p>用代码来描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; &#123;</span><br><span class="line">    // 数组。数组元素为链表的首节点</span><br><span class="line">    Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    // 链表的节点</span><br><span class="line">    class Node&lt;K,V&gt; &#123;</span><br><span class="line">        int hash;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        // 下一个节点</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 默认容量，16。</span><br><span class="line">     */</span><br><span class="line">    private static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 最大容量</span><br><span class="line">     */</span><br><span class="line">    private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认负载因子，0.75f。</span><br><span class="line">     */</span><br><span class="line">    private static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 数组</span><br><span class="line">     */</span><br><span class="line">    private Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 节点的总数</span><br><span class="line">     */</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 阈值。当size大于阈值时会进行扩容</span><br><span class="line">     */</span><br><span class="line">    private int threshold;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 负载因子，是用于计算阈值的一个因子</span><br><span class="line">     */</span><br><span class="line">    private float loadFactor;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new-HashMap"><a href="#new-HashMap" class="headerlink" title="new HashMap()"></a>new HashMap()</h2><p>当我们new一个HashMap时，量化分析法如下。</p><h3 id="new-HashMap-1"><a href="#new-HashMap-1" class="headerlink" title="new HashMap()"></a>new HashMap()</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li></ul><h3 id="第1次put"><a href="#第1次put" class="headerlink" title="第1次put"></a>第1次put</h3><ul><li>size++; // 1</li><li>table = new Node[DEFAULT_INITIAL_CAPACITY]; // table.length: 16</li><li>threshold = (int) DEFAULT_INITIAL_CAPACITY * loadFactor; // 12</li></ul><h3 id="第2次put"><a href="#第2次put" class="headerlink" title="第2次put"></a>第2次put</h3><ul><li>size++; // 2</li><li>table.length不变; // 16</li><li>threshold不变; // 12</li></ul><h3 id="第13次put"><a href="#第13次put" class="headerlink" title="第13次put"></a>第13次put</h3><ul><li>size++; // 13</li><li>table.length扩大一倍;// 32</li><li>threshold扩大一倍;// 24</li></ul><h2 id="new-HashMap-5"><a href="#new-HashMap-5" class="headerlink" title="new HashMap(5)"></a>new HashMap(5)</h2><p>当我们new一个带一个参数的HashMap时，量化分析法如下。</p><h3 id="new-HashMap-5-1"><a href="#new-HashMap-5-1" class="headerlink" title="new HashMap(5)"></a>new HashMap(5)</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li><li>threshold = 不小于5的最小的2的n次方; // 8</li></ul><h3 id="第1次put-1"><a href="#第1次put-1" class="headerlink" title="第1次put"></a>第1次put</h3><ul><li>size++; // 1</li><li>table = new Node[threshold]; // table.length: 8</li><li>threshold = (int) table.length * loadFactor;// 6</li></ul><h3 id="第2次put-1"><a href="#第2次put-1" class="headerlink" title="第2次put"></a>第2次put</h3><ul><li>size++; // 2</li><li>table.length不变; // 8</li><li>threshold不变; // 6</li></ul><h3 id="第7次put"><a href="#第7次put" class="headerlink" title="第7次put"></a>第7次put</h3><ul><li>size++; // 7</li><li>table.length扩大一倍; // 16</li><li>threshold扩大一倍; // 12</li></ul><h2 id="new-HashMap-0-1"><a href="#new-HashMap-0-1" class="headerlink" title="new HashMap(0/1)"></a>new HashMap(0/1)</h2><p>当我们new一个带一个参数的HashMap时，参数值为负数时会报错，参数值为0或1时，量化分析法如下。</p><h3 id="new-HashMap-0-1-1"><a href="#new-HashMap-0-1-1" class="headerlink" title="new HashMap(0/1)"></a>new HashMap(0/1)</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li><li>threshold = 不小于0/1的最小的2的n次方; // 1</li></ul><h3 id="第1次put（会扩容）"><a href="#第1次put（会扩容）" class="headerlink" title="第1次put（会扩容）"></a>第1次put（会扩容）</h3><ul><li>size++; // 1</li><li>table = new Node[threshold]; // table.length: 1</li><li>threshold = (int) table.length * loadFactor;// 0</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 2</li><li>threshold = (int) table.length * loadFactor;// 1</li></ul><h3 id="第2次put（会扩容）"><a href="#第2次put（会扩容）" class="headerlink" title="第2次put（会扩容）"></a>第2次put（会扩容）</h3><ul><li>size++; // 2</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 4</li><li>threshold = (int) table.length * loadFactor;// 2</li></ul><h3 id="第3次put（会扩容）"><a href="#第3次put（会扩容）" class="headerlink" title="第3次put（会扩容）"></a>第3次put（会扩容）</h3><ul><li>size++; // 3</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 8</li><li>threshold = (int) table.length * loadFactor;// 4</li></ul><h3 id="第4次put"><a href="#第4次put" class="headerlink" title="第4次put"></a>第4次put</h3><ul><li>size++; // 4</li><li>table.length不变; // 8</li><li>threshold不变;// 4</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>不要new HashMap(0)或者new HasMap(1)，即使你只需要存1个值。</li><li>尽量在new HashMap时指定容量大小，因为默认为16，可能有点浪费。</li><li>如果你需要存放1~3个，那就new HashMap(2~4)。</li><li>new Hash(2)和new HashMap(3)、new HashMap(4)是一样的。</li><li>如果想要存放4~6个，那就new HashMap(5~8)。</li><li>如果想要存放7~12个，那就new HashMap(9~16)或者new HashMap()。</li><li>并不是new HashMap(初始大小)，它的容量就是‘初始大小’。</li></ol><blockquote><p>new HashMap还有两个参数的构造，第二个参数是负载因子，一般不需要指定，默认0.75即可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HashMap的数据结构&quot;&gt;&lt;a href=&quot;#HashMap的数据结构&quot; class=&quot;headerlink&quot; title=&quot;HashMap的数据结构&quot;&gt;&lt;/a&gt;HashMap的数据结构&lt;/h2&gt;&lt;p&gt;HashMap是由&lt;code&gt;数组&lt;/code&gt;和&lt;code&gt;链表&lt;/code&gt;构成的，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/hashmap.png&quot; alt=&quot;HashMap&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CSS3实现加载中的动画效果</title>
    <link href="http://kangyonggan.com/2018/08/06/CSS3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://kangyonggan.com/2018/08/06/CSS3实现加载中的动画效果/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>主要使用transform的rotate属性，将线条组合成Loading图形 (也就是菊花图形)。</p><p>animation实现将线条颜色由浅到深，再由深到浅来回变换的动画，通过animation-delay属性来使颜色的变换产生过渡的效果，从而达到类似于Loading动画的效果。</p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;line1&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line2&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line3&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line4&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line5&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line6&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line7&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line8&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">.loading &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading span &#123;</span><br><span class="line">    width: 4px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 38px;</span><br><span class="line">    -webkit-animation: loading 1s infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line1 &#123;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">    -webkit-animation-delay: .3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line2 &#123;</span><br><span class="line">    top: 5px;</span><br><span class="line">    left: 52px;</span><br><span class="line">    -webkit-transform: rotate(45deg);</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    -webkit-animation-delay: .4s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line3 &#123;</span><br><span class="line">    top: 18px;</span><br><span class="line">    left: 57px;</span><br><span class="line">    -webkit-transform: rotate(90deg);</span><br><span class="line">    transform: rotate(90deg);</span><br><span class="line">    -webkit-animation-delay: .5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line4 &#123;</span><br><span class="line">    top: 31px;</span><br><span class="line">    left: 52px;</span><br><span class="line">    -webkit-transform: rotate(135deg);</span><br><span class="line">    transform: rotate(135deg);</span><br><span class="line">    -webkit-animation-delay: .6s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line5 &#123;</span><br><span class="line">    top: 37px;</span><br><span class="line">    -webkit-animation-delay: .7s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line6 &#123;</span><br><span class="line">    top: 32px;</span><br><span class="line">    left: 24px;</span><br><span class="line">    -webkit-transform: rotate(-135deg);</span><br><span class="line">    transform: rotate(-135deg);</span><br><span class="line">    -webkit-animation-delay: .8s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line7 &#123;</span><br><span class="line">    top: 18px;</span><br><span class="line">    left: 19px;</span><br><span class="line">    -webkit-transform: rotate(-90deg);</span><br><span class="line">    transform: rotate(-90deg);</span><br><span class="line">    -webkit-animation-delay: .9s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line8 &#123;</span><br><span class="line">    top: 5px;</span><br><span class="line">    left: 24px;</span><br><span class="line">    -webkit-transform: rotate(-45deg);</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    -webkit-animation-delay: 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes loading &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        background-color: #000;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/uploads/loading-demo.gif" alt="loading-demo.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;p&gt;主要使用transform的rotate属性，将线条组合成Loading图形 (也就是菊花图形)。&lt;/p&gt;
&lt;p&gt;animation实现将线条颜色由浅到深，再由深到浅来回变换的动画，通过animation-delay属性来使颜色的变换产生过渡的效果，从而达到类似于Loading动画的效果。&lt;/p&gt;
&lt;h3 id=&quot;html代码&quot;&gt;&lt;a href=&quot;#html代码&quot; class=&quot;headerlink&quot; title=&quot;html代码&quot;&gt;&lt;/a&gt;html代码&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;loading&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line1&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line2&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line3&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line4&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line5&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line6&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line7&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;span class=&amp;quot;line8&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://kangyonggan.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://kangyonggan.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>配置dubbo多注册中心</title>
    <link href="http://kangyonggan.com/2018/08/06/%E9%85%8D%E7%BD%AEdubbo%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://kangyonggan.com/2018/08/06/配置dubbo多注册中心/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T05:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考dubbo官方文档<a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" target="_blank" rel="noopener">http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83</a></p><h2 id="consumer-xml"><a href="#consumer-xml" class="headerlink" title="consumer.xml"></a>consumer.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:annotation-config&gt;&lt;/context:annotation&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;ENGINE_HELPER&quot;&gt;&lt;/dubbo:application&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:registry id=&quot;dev_address&quot; address=&quot;zookeeper://10.199.101.211:8080?backup=10.199.101.212:2181,10.199.101.213:2181&quot;&gt;&lt;/dubbo:registry&gt;</span><br><span class="line">    &lt;dubbo:registry id=&quot;uat_address&quot; address=&quot;zookeeper://10.199.105.204:2181?backup=10.199.105.203:2181,10.199.105.202:2181&quot; default=&quot;false&quot;&gt;&lt;/dubbo:registry&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:reference id=&quot;bankEngineServiceDev&quot; cluster=&quot;failfast&quot;</span><br><span class="line">                     interface=&quot;com.shhxzq.fin.bankengine.service.BankEngineService&quot;</span><br><span class="line">                     lazy=&quot;true&quot; version=&quot;1.2.0&quot; check=&quot;false&quot; timeout=&quot;100000&quot; registry=&quot;dev_address&quot;&gt;&lt;/dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:reference id=&quot;bankEngineServiceUat&quot; cluster=&quot;failfast&quot;</span><br><span class="line">                     interface=&quot;com.shhxzq.fin.bankengine.service.BankEngineService&quot;</span><br><span class="line">                     lazy=&quot;true&quot; version=&quot;1.2.0&quot; check=&quot;false&quot; timeout=&quot;100000&quot; registry=&quot;uat_address&quot;&gt;&lt;/dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考dubbo官方文档&lt;a href=&quot;http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>让百度分享支持https的网站</title>
    <link href="http://kangyonggan.com/2018/08/06/%E8%AE%A9%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%94%AF%E6%8C%81https%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://kangyonggan.com/2018/08/06/让百度分享支持https的网站/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-28T03:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><p>百度分享地址：<a href="http://share.baidu.com" target="_blank" rel="noopener">http://share.baidu.com</a><br>由于我的网站的https的，而百度分享代码中是http的，所以不能按照百度分享提供的代码直接使用。<br>我的做法是将百度分享所使用的js、css、image全部下载下来，放在我自己的服务器。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="/uploads/baidu-share.zip">baidu-share.zip</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>下面的代码是使用百度分享自动生成的，首先是把zip文件解压到服务器根目录下，然后需要把域名改为自己域名的就ok了。<br>比如我是将“<a href="http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”" target="_blank" rel="noopener">http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”</a></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; window._bd_share_config = &#123;</span><br><span class="line">    &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;bdSize&quot;: &quot;16&quot;</span><br><span class="line">    &#125;, &quot;slide&quot;: &#123;&quot;type&quot;: &quot;slide&quot;, &quot;bdImg&quot;: &quot;1&quot;, &quot;bdPos&quot;: &quot;right&quot;, &quot;bdTop&quot;: &quot;100&quot;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">with (document)0[(getElementsByTagName(&apos;head&apos;)[0] || body).appendChild(createElement(&apos;script&apos;)).src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)];&lt;/script&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/uploads/https-share.png" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;百度分享&quot;&gt;&lt;a href=&quot;#百度分享&quot; class=&quot;headerlink&quot; title=&quot;百度分享&quot;&gt;&lt;/a&gt;百度分享&lt;/h3&gt;&lt;p&gt;百度分享地址：&lt;a href=&quot;http://share.baidu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://share.baidu.com&lt;/a&gt;&lt;br&gt;由于我的网站的https的，而百度分享代码中是http的，所以不能按照百度分享提供的代码直接使用。&lt;br&gt;我的做法是将百度分享所使用的js、css、image全部下载下来，放在我自己的服务器。&lt;/p&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;/uploads/baidu-share.zip&quot;&gt;baidu-share.zip&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;下面的代码是使用百度分享自动生成的，首先是把zip文件解压到服务器根目录下，然后需要把域名改为自己域名的就ok了。&lt;br&gt;比如我是将“&lt;a href=&quot;http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="http://kangyonggan.com/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS" scheme="http://kangyonggan.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>自动生成测试数据</title>
    <link href="http://kangyonggan.com/2018/08/06/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://kangyonggan.com/2018/08/06/自动生成测试数据/</id>
    <published>2018-08-06T05:45:08.000Z</published>
    <updated>2018-08-06T06:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eunit"><a href="#eunit" class="headerlink" title="eunit"></a>eunit</h2><p>eunit是一个工具包。可以根据指定的规则生成符合条件的测试数据。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ofofs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eunit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;eunit.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>可以到<a href="http://mvnrepository.com/search?q=eunit" target="_blank" rel="noopener">http://mvnrepository.com/search?q=eunit</a>查看最新版本。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.eunit.test;</span><br><span class="line"></span><br><span class="line">import com.github.ofofs.eunit.DataFactory;</span><br><span class="line">import com.github.ofofs.eunit.test.model.User;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2018/7/21 0021</span><br><span class="line"> */</span><br><span class="line">public class UserSimpleTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User user = DataFactory.instance(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=8462870299209684556, username=&apos;kolH4D8roMdK2Kpnq&apos;, password=&apos;Xace7HK&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在User的字段上加上@Rule注解，可以指定字段生成规则，目前有下列规则可用：    </p><ul><li>字符串型：可以指定最小长度minLength、最大长度maxLength和正则表达式regex。</li><li>数字类型：可以指定最小值min、最大值max和精度precision。</li></ul><blockquote><p>说明: 目前只能生成八大基本数据类型和String、Date、BigDecimal。其他引用类型暂时不会生成，后续会考虑。</p></blockquote><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ul><li>提供更多细腻的规则。</li><li>怎么解实体类和规则注解的耦合？</li><li>如何实现多规则？</li><li>规则之间如何依赖？</li><li>如何优雅的自定义规则？</li></ul><blockquote><p>在实现想法的基础上要考虑到用户体验，如果设计的不优雅不好用宁愿不要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;eunit&quot;&gt;&lt;a href=&quot;#eunit&quot; class=&quot;headerlink&quot; title=&quot;eunit&quot;&gt;&lt;/a&gt;eunit&lt;/h2&gt;&lt;p&gt;eunit是一个工具包。可以根据指定的规则生成符合条件的测试数据。&lt;/p&gt;
&lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.github.ofofs&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;eunit&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;$&amp;#123;eunit.version&amp;#125;&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以到&lt;a href=&quot;http://mvnrepository.com/search?q=eunit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mvnrepository.com/search?q=eunit&lt;/a&gt;查看最新版本。&lt;/p&gt;
    
    </summary>
    
      <category term="Java后台" scheme="http://kangyonggan.com/categories/Java%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Java" scheme="http://kangyonggan.com/tags/Java/"/>
    
  </entry>
  
</feed>
