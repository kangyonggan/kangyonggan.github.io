<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>一套完整的生成缩略图及点击缩略图显示原图的解决方案</title>
      <link href="/2019/01/24/%E4%B8%80%E5%A5%97%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE%E5%8F%8A%E7%82%B9%E5%87%BB%E7%BC%A9%E7%95%A5%E5%9B%BE%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9B%BE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/01/24/%E4%B8%80%E5%A5%97%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE%E5%8F%8A%E7%82%B9%E5%87%BB%E7%BC%A9%E7%95%A5%E5%9B%BE%E6%98%BE%E7%A4%BA%E5%8E%9F%E5%9B%BE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><a href="https://kangyonggan.com/album">https://kangyonggan.com/album</a><br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzhrslbd1fj31110u0thf.jpg" alt=""></p><a id="more"></a><h2 id="使用缩略图的优点"><a href="#使用缩略图的优点" class="headerlink" title="使用缩略图的优点"></a>使用缩略图的优点</h2><p>可以减轻服务器压力，给用户更好的体验。一个界面可能有很多图片，但是用户关心的图片可能只有那么一两个，如果我们加载全部原图，并且原图很大的时候，会浪费很多服务器资源，并且用户会看见大量图片处于加载中(如下图)。<br>如果使用缩略图，就可以解决这个问题。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzhrsp4qjfj31mk0oqmyi.jpg" alt=""></p><h2 id="如何生成缩略图"><a href="#如何生成缩略图" class="headerlink" title="如何生成缩略图"></a>如何生成缩略图</h2><p>如果只是简单的生成缩略图，方法有很多，但是如何生成一个”好看”的缩略图呢？先捋一下思路，如下：</p><h3 id="仅压缩"><a href="#仅压缩" class="headerlink" title="仅压缩"></a>仅压缩</h3><p>如果强行把一个长图压缩成宽图，就可能导致图片中的人变矮变胖。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzhrsmp8bpj310u0g476z.jpg" alt=""></p><h3 id="仅剪裁"><a href="#仅剪裁" class="headerlink" title="仅剪裁"></a>仅剪裁</h3><p>如果把一个大图，比如：800x2000的图，剪裁成400x300的图，可能图片中的主要内容根本都显示出来。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzhrubyo37j316x0u0qub.jpg" alt=""></p><h3 id="剪裁中心区域"><a href="#剪裁中心区域" class="headerlink" title="剪裁中心区域"></a>剪裁中心区域</h3><p>一般来说，图片中心是主要内容，我们剪裁中心区域400x300的图。<br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzhry5hld2j319t0u0u0b.jpg" alt=""></p><h3 id="等比例压缩后再剪裁中心区域"><a href="#等比例压缩后再剪裁中心区域" class="headerlink" title="等比例压缩后再剪裁中心区域"></a>等比例压缩后再剪裁中心区域</h3><p>虽然好了很多，但是还有一个明显的问题，那就是图片包含的内容太少了，因此我先把原图等比例压缩成400x1000的图片，在剪裁中心区域的400x300。<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fzhs4u982aj317u0u04o7.jpg" alt=""></p><p>注意：如果是宽图，先把高度压成300，再把宽度等比例压缩，最后剪裁中心区域。</p><h3 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.app.util;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.geom.AffineTransform;</span><br><span class="line">import java.awt.image.AffineTransformOp;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 6/23/17</span><br><span class="line"> */</span><br><span class="line">public final class Images &#123;</span><br><span class="line"></span><br><span class="line">    private Images() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成缩略图。</span><br><span class="line">     *</span><br><span class="line">     * @param source 原图（大）</span><br><span class="line">     * @param desc   目标图片</span><br><span class="line">     * @param width  目标宽</span><br><span class="line">     * @param height 目标高</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void thumb(String source, String desc, int width, int height) throws Exception &#123;</span><br><span class="line">        BufferedImage image = ImageIO.read(new FileInputStream(source));</span><br><span class="line"></span><br><span class="line">        // 判断原图的长宽比是不是比目标图的长宽比大，用于计算压缩后的宽和高</span><br><span class="line">        int pressWidth;</span><br><span class="line">        int pressHeight;</span><br><span class="line">        if (image.getHeight() * 1.0 / image.getWidth() &gt; height * 1.0 / width) &#123;</span><br><span class="line">            // 原图是高图</span><br><span class="line">            // 让压缩后的宽度等于目标宽度</span><br><span class="line">            pressWidth = width;</span><br><span class="line">            // 等比例计算高度</span><br><span class="line">            pressHeight = (int) (1.0 * image.getHeight() * width / image.getWidth());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 原图是宽图</span><br><span class="line">            // 让压缩后的高度等于目标高度</span><br><span class="line">            pressHeight = height;</span><br><span class="line">            // 等比例计算高度</span><br><span class="line">            pressWidth = (int) (1.0 * image.getWidth() * height / image.getHeight());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 先压缩</span><br><span class="line">        BufferedImage temp = zoomImage(image, pressWidth, pressHeight);</span><br><span class="line"></span><br><span class="line">        // 再截取</span><br><span class="line">        int x = (temp.getWidth() - width) / 2;</span><br><span class="line">        int y = (temp.getHeight() - height) / 2;</span><br><span class="line">        temp = temp.getSubimage(x, y, width, height);</span><br><span class="line"></span><br><span class="line">        // 最后写文件</span><br><span class="line">        ImageIO.write(temp, &quot;png&quot;, new FileOutputStream(desc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 缩放图片</span><br><span class="line">     *</span><br><span class="line">     * @param image</span><br><span class="line">     * @param w</span><br><span class="line">     * @param h</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private static BufferedImage zoomImage(BufferedImage image, int w, int h) throws Exception &#123;</span><br><span class="line">        double wr = w * 1.0 / image.getWidth();</span><br><span class="line">        double hr = h * 1.0 / image.getHeight();</span><br><span class="line"></span><br><span class="line">        AffineTransformOp ato = new AffineTransformOp(AffineTransform.getScaleInstance(wr, hr), null);</span><br><span class="line">        return ato.filter(image, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        thumb(&quot;/Users/kyg/Desktop/origin.jpeg&quot;, &quot;/Users/kyg/Desktop/demo.png&quot;, 400, 300);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面过程仅是生成缩略图，当生成缩略图后，我们要在网站上展示缩略图，点击放大可查看原图。为此，我写了一个jQuery插件，如下。</p><h2 id="zoomer的使用"><a href="#zoomer的使用" class="headerlink" title="zoomer的使用"></a>zoomer的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;img src=&quot;thubm_1.png&quot; data-origin=&quot;1.png&quot;/&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;img src=&quot;thubm_2.png&quot;/&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;img src=&quot;thubm_3.png&quot; data-origin=&quot;3.png&quot;/&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;jquery/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;zoomer/zoomer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(&quot;.list&quot;).zoomer();</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="zoomer-js源码"><a href="#zoomer-js源码" class="headerlink" title="zoomer.js源码"></a>zoomer.js源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 图片缩放</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/21</span><br><span class="line"> */</span><br><span class="line">(function ($) &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 总入口</span><br><span class="line">     *</span><br><span class="line">     * @param $target</span><br><span class="line">     * @param settings</span><br><span class="line">     */</span><br><span class="line">    function Zoomer($target, settings) &#123;</span><br><span class="line">        // 把settings的属性合并到defaults，并且不改变defaults</span><br><span class="line">        settings = $.extend(true, $.fn.zoomer.defaults, settings);</span><br><span class="line"></span><br><span class="line">        // 模态框图层</span><br><span class="line">        var $overlay = $();</span><br><span class="line">        // 全部图片</span><br><span class="line">        var $allImgs = $target.find(&quot;img&quot;);</span><br><span class="line"></span><br><span class="line">        // 修改光标</span><br><span class="line">        $allImgs.css(&quot;cursor&quot;, &quot;zoom-in&quot;);</span><br><span class="line"></span><br><span class="line">        // 绑定点击事件</span><br><span class="line">        $allImgs.click(function () &#123;</span><br><span class="line">            showModal($(this));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 显示模态框</span><br><span class="line">         *</span><br><span class="line">         * @param $img</span><br><span class="line">         */</span><br><span class="line">        function showModal($img) &#123;</span><br><span class="line">            $overlay.remove();</span><br><span class="line">            var src = $img.data(&apos;origin&apos;);</span><br><span class="line">            if (!src) &#123;</span><br><span class="line">                src = $img.attr(&apos;src&apos;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $overlay = $(&apos;&lt;div&gt;&apos; +</span><br><span class="line">                &apos;&lt;div style=&quot;text-align: center;color: #ddd;position: absolute;left: 0;right: 0;top: 40%;&quot;&gt;加载中...&lt;/div&gt;&apos; +</span><br><span class="line">                &apos;&lt;img src=&quot;&apos; + src + &apos;&quot; style=&quot;max-width: 100%;max-height: 100%;display: none&quot;/&gt;&lt;/div&gt;&apos;).css(&#123;</span><br><span class="line">                position: &quot;fixed&quot;,</span><br><span class="line">                left: 0,</span><br><span class="line">                top: 0,</span><br><span class="line">                bottom: 0,</span><br><span class="line">                right: 0,</span><br><span class="line">                color: &apos;#fff&apos;,</span><br><span class="line">                zIndex: 9999,</span><br><span class="line">                cursor: &apos;zoom-out&apos;,</span><br><span class="line">                background: &apos;rgba(0, 0, 0, 0.4)&apos;,</span><br><span class="line">                textAlign: &quot;center&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(&quot;body&quot;).append($overlay);</span><br><span class="line"></span><br><span class="line">            // 图片加载完成事件</span><br><span class="line">            $overlay.find(&quot;img&quot;).load(function () &#123;</span><br><span class="line">                $(this).parents(&quot;div&quot;).find(&quot;div&quot;).css(&#123;&quot;display&quot;: &quot;none&quot;&#125;);</span><br><span class="line">                $(this).css(&#123;&quot;display&quot;: &quot;inline-block&quot;&#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // 图片加载失败事件</span><br><span class="line">            $overlay.find(&quot;img&quot;).error(function () &#123;</span><br><span class="line">                if (settings.failure &amp;&amp; typeof settings.failure === &apos;function&apos;) &#123;</span><br><span class="line">                    settings.failure($(this), $allImgs, $target, $overlay);</span><br><span class="line">                &#125;</span><br><span class="line">                $(this).parents(&quot;div&quot;).find(&quot;div&quot;).html(&quot;加载失败！&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // 给模态框绑定点击事件</span><br><span class="line">            $overlay.click(function () &#123;</span><br><span class="line">                $overlay.remove();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 图片缩放</span><br><span class="line">     *</span><br><span class="line">     * @param option</span><br><span class="line">     * @returns &#123;*&#125;</span><br><span class="line">     */</span><br><span class="line">    $.fn.zoomer = function (option) &#123;</span><br><span class="line">        return this.each(function () &#123;</span><br><span class="line">            $(this).data(&apos;zoomer&apos;, new Zoomer($(this), option));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认配置</span><br><span class="line">     *</span><br><span class="line">     * @type &#123;&#123;failure: null&#125;&#125;</span><br><span class="line">     */</span><br><span class="line">    $.fn.zoomer.defaults = &#123;</span><br><span class="line">        // 图片加载失败回调</span><br><span class="line">        failure: null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window.jQuery);</span><br></pre></td></tr></table></figure><h3 id="zoomer下载"><a href="#zoomer下载" class="headerlink" title="zoomer下载"></a>zoomer下载</h3><p><a href="/uploads/zoomer.js">zoomer.js</a><br><a href="/uploads/zoomer.min.js">zoomer.min.js</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>纯前端JS生成GIF</title>
      <link href="/2019/01/18/%E7%BA%AF%E5%89%8D%E7%AB%AFJS%E7%94%9F%E6%88%90GIF/"/>
      <url>/2019/01/18/%E7%BA%AF%E5%89%8D%E7%AB%AFJS%E7%94%9F%E6%88%90GIF/</url>
      <content type="html"><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><a href="https://kangyonggan.com/tool/gif">https://kangyonggan.com/tool/gif</a><br><img src="/uploads/gif-1.png" alt=""></p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>选择文件后并不会上传至服务器，因此你可以很大很大的图片。</li><li>不管你选择多大的图片，最终生成的gif都会很小。</li><li>gif被压缩后会失真，会有一定程度的模糊。</li></ol><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><a href="/uploads/gif.zip">gif.zip</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; data-index=&quot;0&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; data-index=&quot;1&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; data-index=&quot;2&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;开始生成&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;canvas width=&quot;400&quot; height=&quot;300&quot; id=&quot;canvas&quot; style=&quot;display:none&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;img src=&quot;&quot; id=&quot;result&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;../jquery/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;gif.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        // 生成gif的图片源</span><br><span class="line">        var imgList = [];</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 选择图片</span><br><span class="line">         */</span><br><span class="line">        $(&quot;input[type=file]&quot;).change(function (e) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            var pic = this.files[0];</span><br><span class="line">            // TODO 校验是不是图片格式（自行实现）</span><br><span class="line"></span><br><span class="line">            // TODO 图片预览（自行实现，可参考：https://blog.kangyonggan.com/2019/01/14/%E7%BE%8E%E5%8C%96%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A1%86/）</span><br><span class="line"></span><br><span class="line">            // 把选中的图片加到图片源 imgList</span><br><span class="line">            var file = new FileReader();</span><br><span class="line">            file.readAsDataURL(pic);</span><br><span class="line"></span><br><span class="line">            // 图片的下标</span><br><span class="line">            var index = $(this).data(&quot;index&quot;);</span><br><span class="line"></span><br><span class="line">            file.onload = function () &#123;</span><br><span class="line">                imgList[index] = this.result;</span><br><span class="line">            &#125;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        var gif;</span><br><span class="line">        var canvas = document.getElementById(&apos;canvas&apos;);</span><br><span class="line">        var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 开始生成</span><br><span class="line">         */</span><br><span class="line">        $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">            gif = new GIF(&#123;</span><br><span class="line">                workers: imgList.length,</span><br><span class="line">                quality: 30,</span><br><span class="line">                workerScript: &quot;gif.worker.js&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">            gif.on(&quot;finished&quot;, function (blob) &#123;</span><br><span class="line">                var file = new FileReader();</span><br><span class="line">                file.readAsDataURL(blob);</span><br><span class="line">                file.onload = function () &#123;</span><br><span class="line">                    document.getElementById(&quot;result&quot;).setAttribute(&quot;src&quot;, file.result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            var imgObjList = [], count = 0;</span><br><span class="line"></span><br><span class="line">            for (var i = 0; i &lt; imgList.length; i++) &#123;</span><br><span class="line">                var tmpImg = new Image();</span><br><span class="line">                tmpImg.src = imgList[i];</span><br><span class="line">                imgObjList.push(tmpImg);</span><br><span class="line">                tmpImg.onload = function () &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    if (count === imgList.length) &#123;</span><br><span class="line">                        generateGif(imgObjList);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 生成gif</span><br><span class="line">         *</span><br><span class="line">         * @param imgObjList</span><br><span class="line">         */</span><br><span class="line">        function generateGif(imgObjList) &#123;</span><br><span class="line">            for (var i = 0; i &lt; imgObjList.length; i++) &#123;</span><br><span class="line">                ctx.save();</span><br><span class="line">                ctx.drawImage(imgObjList[i], 0, 0, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">                // 给图片配字幕</span><br><span class="line">//                ctx.font = &quot;14px 宋体&quot;;</span><br><span class="line">//                ctx.fillStyle = &quot;White&quot;;</span><br><span class="line">//                ctx.textAlign = &quot;center&quot;;</span><br><span class="line">//                ctx.fillText(title, 200, 280);</span><br><span class="line"></span><br><span class="line">                ctx.restore();</span><br><span class="line">                gif.addFrame(canvas, &#123;copy: true, delay: 1500&#125;);</span><br><span class="line">                ctx.clearRect(0, 0, canvas.width, canvas.height)</span><br><span class="line">            &#125;</span><br><span class="line">            gif.render();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/uploads/gif-2.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用freemarker手动实现i18n</title>
      <link href="/2019/01/14/%E4%BD%BF%E7%94%A8freemarker%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0i18n/"/>
      <url>/2019/01/14/%E4%BD%BF%E7%94%A8freemarker%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0i18n/</url>
      <content type="html"><![CDATA[<h2 id="FTL中的调用效果"><a href="#FTL中的调用效果" class="headerlink" title="FTL中的调用效果"></a>FTL中的调用效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;@message &quot;app.name&quot;/&gt;</span><br><span class="line">&lt;@message &quot;app.name&quot; local=&quot;zh_CN&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;#macro message code local=&quot;&quot;&gt;</span><br><span class="line">    &lt;#if local!=&quot;&quot;&gt;</span><br><span class="line">        $&#123;i18n(&quot;msg&quot;, code, local)&#125;</span><br><span class="line">    &lt;#else&gt;</span><br><span class="line">        $&#123;i18n(&quot;msg&quot;, code, &apos;$&#123;springMacroRequestContext.getLocale().language&#125;_$&#123;springMacroRequestContext.getLocale().country&#125;&apos;)&#125;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#macro&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.freemarker;</span><br><span class="line"></span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2018/12/13</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Log4j2</span><br><span class="line">public class I18nTag extends AbstractFunctionTag &#123;</span><br><span class="line"></span><br><span class="line">    private static Map&lt;String, Properties&gt; data = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 国际化</span><br><span class="line">     *</span><br><span class="line">     * @param arguments 参数</span><br><span class="line">     * @return 返回UUID</span><br><span class="line">     */</span><br><span class="line">    public String msg(List arguments) throws IOException &#123;</span><br><span class="line">        if (!hasLessThreeArgs(arguments)) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;国际化时没有指定参数&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String code = arguments.get(1).toString();</span><br><span class="line">        String local = arguments.get(2).toString();</span><br><span class="line"></span><br><span class="line">        Properties properties = getProperties(local);</span><br><span class="line">        return properties.getProperty(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Properties getProperties(String local) throws IOException &#123;</span><br><span class="line">        Properties properties = data.get(local);</span><br><span class="line"></span><br><span class="line">        if (properties == null) &#123;</span><br><span class="line">            properties = loadProperties(local);</span><br><span class="line">            data.put(local, properties);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Properties loadProperties(String local) throws IOException &#123;</span><br><span class="line">        Properties properties = new Properties();</span><br><span class="line">        InputStream inputStream;</span><br><span class="line">        try &#123;</span><br><span class="line">            inputStream = this.getClass().getResourceAsStream(&quot;/messages_&quot; + local + &quot;.properties&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            inputStream = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (inputStream == null) &#123;</span><br><span class="line">            log.info(&quot;没有&#123;&#125;的国际化文件，使用默认的&quot;, local);</span><br><span class="line">            inputStream = this.getClass().getResourceAsStream(&quot;/messages.properties&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        InputStreamReader reader = new InputStreamReader(inputStream, &quot;UTF-8&quot;);</span><br><span class="line">        properties.load(reader);</span><br><span class="line">        return properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h2><p><code>messages.properties</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.name=dfjz</span><br></pre></td></tr></table></figure><p><code>messages_zh_CN.properties</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.name=东方骄子</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>美化文件选择框</title>
      <link href="/2019/01/14/%E7%BE%8E%E5%8C%96%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A1%86/"/>
      <url>/2019/01/14/%E7%BE%8E%E5%8C%96%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9%E6%A1%86/</url>
      <content type="html"><![CDATA[<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>美化后</p><p><img src="/uploads/file-input-2.png" alt=""></p><a id="more"></a><p>美化前</p><p><img src="/uploads/file-input-1.png" alt=""></p><h2 id="原生代码"><a href="#原生代码" class="headerlink" title="原生代码"></a>原生代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="美化思路"><a href="#美化思路" class="headerlink" title="美化思路"></a>美化思路</h2><ol><li>隐藏原生的丑陋的文件选择框。</li><li>画一个漂亮的假的”文件选择框”。</li><li>监听假文件选择框的click事件，在事件中触发真的文件选择框的click事件，此时会弹出文件选择。</li><li>监听真的文件选择框的change事件，当文件改变时把文件（图片）显示在假文件选择框的位置，又叫做预览。</li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>CSS样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.file &#123;</span><br><span class="line">    width: 230px;</span><br><span class="line">    height: 160px;</span><br><span class="line">    border: 1px dashed #ccc;</span><br><span class="line">    border-radius: 8px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.file:hover &#123;</span><br><span class="line">    border: 1px dashed #a72c11;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#previewImg &#123;</span><br><span class="line">    width: 230px;</span><br><span class="line">    height: 160px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.file-label &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 160px;</span><br><span class="line">    color: #999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.file-label:hover &#123;</span><br><span class="line">    color: #a72c11;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.file-warn &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: #aaa;</span><br><span class="line">    line-height: 1.8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hidden &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;file&quot;&gt;</span><br><span class="line">    &lt;img id=&quot;previewImg&quot; class=&quot;hidden&quot;/&gt;</span><br><span class="line">    &lt;div class=&quot;file-label&quot;&gt;上传视频封面&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;cover&quot; class=&quot;hidden&quot; name=&quot;file&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p class=&quot;file-warn&quot;&gt;</span><br><span class="line">    请上传 jpeg,jpg,png,gif 格式的图片文件，文件大小不能超过2MB。&lt;br/&gt;</span><br><span class="line">    建议上传一张 230*160 像素或等比例的图片。&lt;br/&gt;</span><br><span class="line">    精美封面图有助于吸引观看，并且更易获得官方推荐。&lt;br/&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../static/libs/jquery/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        // 点击上传图片</span><br><span class="line">        $(&quot;.file-label&quot;).click(function () &#123;</span><br><span class="line">            document.getElementById(&quot;cover&quot;).click();</span><br><span class="line">        &#125;);</span><br><span class="line">        // 点击上传图片</span><br><span class="line">        $(&quot;#previewImg&quot;).click(function () &#123;</span><br><span class="line">            document.getElementById(&quot;cover&quot;).click();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 图片改变事件</span><br><span class="line">        $(&quot;#cover&quot;).change(function () &#123;</span><br><span class="line">            var pic = this.files[0];</span><br><span class="line">            // 校验</span><br><span class="line">            if (!validPic(pic)) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 图片预览</span><br><span class="line">            previewImg(pic);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 图片预览</span><br><span class="line">        function previewImg(pic) &#123;</span><br><span class="line">            var r = new FileReader();</span><br><span class="line">            r.readAsDataURL(pic);</span><br><span class="line"></span><br><span class="line">            r.onload = function () &#123;</span><br><span class="line">                $(&quot;#previewImg&quot;).attr(&quot;src&quot;, this.result).show();</span><br><span class="line">                $(&quot;.file-label&quot;).hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>纯前端markdown编辑器及解析</title>
      <link href="/2019/01/08/%E7%BA%AF%E5%89%8D%E7%AB%AFmarkdown%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/01/08/%E7%BA%AF%E5%89%8D%E7%AB%AFmarkdown%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="markdown编辑器"><a href="#markdown编辑器" class="headerlink" title="markdown编辑器"></a>markdown编辑器</h2><p>下面是使用freemarker定义的宏，是一个markdown编辑器。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--markdown编辑器--&gt;</span><br><span class="line">&lt;#macro markdown name id=&quot;&quot; value=&quot;&quot;&gt;</span><br><span class="line">&lt;#if id==&quot;&quot;&gt;</span><br><span class="line">    &lt;#local id=func(&apos;uuid&apos;, &apos;id&apos;)/&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;ctx&#125;/libs/editor.md/css/editormd.css&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;$&#123;id&#125;&quot;&gt;</span><br><span class="line">    &lt;textarea style=&quot;display: none&quot; name=&quot;$&#123;name&#125;&quot;&gt;$&#123;value&#125;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md/editormd.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        editormd(&quot;$&#123;id&#125;&quot;, &#123;</span><br><span class="line">            height: 600,</span><br><span class="line">            syncScrolling: &quot;single&quot;,</span><br><span class="line">            path: &quot;$&#123;ctx&#125;/libs/editor.md/lib/&quot;,</span><br><span class="line">            emoji: true,</span><br><span class="line">            imageUpload: true,</span><br><span class="line">            imageUploadURL: &quot;$&#123;ctx&#125;/file/markdown&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/#macro&gt;</span><br></pre></td></tr></table></figure><p>用例：&lt;@ca.markdown name=”content” value=”${article.content!’’}”/&gt;</p><ol><li>editor.md官网地址：<a href="http://pandao.github.io/editor.md/examples/" target="_blank" rel="noopener">http://pandao.github.io/editor.md/examples/</a></li><li>&lt;#local id=func(‘uuid’, ‘id’)/&gt; 是产生一个uuid。</li><li>imageUploadURL 是图片上传地址，需要写一个controller，如下。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * md编辑器文件、图片上传</span><br><span class="line"> *</span><br><span class="line"> * @param request 请求</span><br><span class="line"> * @return 响应</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;markdown&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Response markdown(HttpServletRequest request) &#123;</span><br><span class="line">    Response response = Response.getResponse();</span><br><span class="line">    ServletContext context = request.getServletContext();</span><br><span class="line"></span><br><span class="line">    //上传本地文件</span><br><span class="line">    int success = 0;</span><br><span class="line">    String message = &quot;上传成功&quot;;</span><br><span class="line">    try &#123;</span><br><span class="line">        MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;</span><br><span class="line">        Iterator iterator = multiRequest.getFileNames();</span><br><span class="line">        if (iterator.hasNext()) &#123;</span><br><span class="line">            MultipartFile file = multiRequest.getFile(iterator.next().toString());</span><br><span class="line">            String fileName = ftpService.genFileName(&quot;ARTICLE&quot;);</span><br><span class="line">            // 上传到本地</span><br><span class="line">            FileUpload.upload(fileUploadPath, fileName, file);</span><br><span class="line"></span><br><span class="line">            fileName += &quot;.&quot; + FilenameUtils.getExtension(file.getOriginalFilename());</span><br><span class="line">            response.put(&quot;url&quot;, context.getContextPath() + &quot;/upload/&quot; + fileName);</span><br><span class="line">            success = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;编辑器上传文件失败&quot;, e);</span><br><span class="line">        message = &quot;网络异常，请稍后再试!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.put(&quot;success&quot;, success);</span><br><span class="line">    response.put(&quot;message&quot;, message);</span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是要返回一个Map, 并带有success和message参数。</p><h2 id="解析markdown内容"><a href="#解析markdown内容" class="headerlink" title="解析markdown内容"></a>解析markdown内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;#--markdown2html--&gt;</span><br><span class="line">&lt;#macro md2html content&gt;</span><br><span class="line">    &lt;#local uuid=func(&apos;uuid&apos;, &apos;id&apos;)/&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;$&#123;ctx&#125;/libs/editor.md/css/editormd.preview.css&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;$&#123;uuid&#125;&quot; class=&quot;markdown-content&quot;&gt;</span><br><span class="line">    &lt;textarea style=&quot;display: none&quot;&gt;$&#123;content&#125;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/marked.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/prettify.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/raphael.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/underscore.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/sequence-diagram.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/flowchart.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md//lib/jquery.flowchart.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;ctx&#125;/libs/editor.md/editormd.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        editormd.markdownToHTML(&quot;$&#123;uuid&#125;&quot;, &#123;</span><br><span class="line">            path: &quot;$&#123;ctx&#125;/libs/editor.md/lib/&quot;,</span><br><span class="line">            htmlDecode: &quot;style,script,iframe&quot;,  // you can filter tags decode</span><br><span class="line">            emoji: true,</span><br><span class="line">            taskList: true,</span><br><span class="line">            tex: true,  // 默认不解析</span><br><span class="line">            flowChart: true,  // 默认不解析</span><br><span class="line">            sequenceDiagram: true  // 默认不解析</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/#macro&gt;</span><br></pre></td></tr></table></figure><p>用例：&lt;@ca.md2html content=”${article.content}”/&gt;</p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>js实现上拉加载更多</title>
      <link href="/2019/01/08/js%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/"/>
      <url>/2019/01/08/js%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取滚动条的位置</span><br><span class="line"> *</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">function getScrollTop() &#123;</span><br><span class="line">    var scrollTop = 0;</span><br><span class="line">    if (document.documentElement &amp;&amp; document.documentElement.scrollTop) &#123;</span><br><span class="line">        scrollTop = document.documentElement.scrollTop;</span><br><span class="line">    &#125; else if (document.body) &#123;</span><br><span class="line">        scrollTop = document.body.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    return scrollTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取当前可视范围的高度</span><br><span class="line"> *</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">function getClientHeight() &#123;</span><br><span class="line">    var clientHeight = 0;</span><br><span class="line">    if (document.body.clientHeight &amp;&amp; document.documentElement.clientHeight) &#123;</span><br><span class="line">        clientHeight = Math.min(document.body.clientHeight, document.documentElement.clientHeight);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        clientHeight = Math.max(document.body.clientHeight, document.documentElement.clientHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    return clientHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取文档完整的高度</span><br><span class="line"> *</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">function getScrollHeight() &#123;</span><br><span class="line">    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 是否还有更多内容</span><br><span class="line"> */</span><br><span class="line">var hasMore = true;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 上拉加载更多事件</span><br><span class="line"> */</span><br><span class="line">window.onscroll = function () &#123;</span><br><span class="line">    if (hasMore &amp;&amp; getScrollTop() + getClientHeight() === getScrollHeight()) &#123;</span><br><span class="line">        console.log(&quot;加载更多...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>当没有更多内容时，把hasMore置为false，否则会一直去尝试加载更多</p></blockquote>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>js返回上一页的实现</title>
      <link href="/2019/01/08/js%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/01/08/js%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E9%A1%B5%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>如果有上一页则返回上一页，如果没上一页（直接输入url打开的网页）则返回首页。兼容主流浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回</span><br><span class="line"> */</span><br><span class="line">function goBack() &#123;</span><br><span class="line">    if ((navigator.userAgent.indexOf(&apos;MSIE&apos;) &gt;= 0) &amp;&amp; (navigator.userAgent.indexOf(&apos;Opera&apos;) &lt; 0)) &#123;</span><br><span class="line">        // IE</span><br><span class="line">        if (history.length &gt; 0) &#123;</span><br><span class="line">            window.history.go(-1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            window.location.href = ctx + &quot;/&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 非IE浏览器</span><br><span class="line">        if (navigator.userAgent.indexOf(&apos;Firefox&apos;) &gt;= 0 ||</span><br><span class="line">            navigator.userAgent.indexOf(&apos;Opera&apos;) &gt;= 0 ||</span><br><span class="line">            navigator.userAgent.indexOf(&apos;Safari&apos;) &gt;= 0 ||</span><br><span class="line">            navigator.userAgent.indexOf(&apos;Chrome&apos;) &gt;= 0 ||</span><br><span class="line">            navigator.userAgent.indexOf(&apos;WebKit&apos;) &gt;= 0) &#123;</span><br><span class="line"></span><br><span class="line">            if (window.history.length &gt; 1) &#123;</span><br><span class="line">                window.history.go(-1);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                window.location.href = ctx + &quot;/&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 未知的浏览器</span><br><span class="line">            window.history.go(-1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>js检测浏览器是PC端还是手机端</title>
      <link href="/2019/01/08/js%E6%A3%80%E6%B5%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AFPC%E7%AB%AF%E8%BF%98%E6%98%AF%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
      <url>/2019/01/08/js%E6%A3%80%E6%B5%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AFPC%E7%AB%AF%E8%BF%98%E6%98%AF%E6%89%8B%E6%9C%BA%E7%AB%AF/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function IsPC() &#123;</span><br><span class="line">    var userAgentInfo = navigator.userAgent;</span><br><span class="line">    var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">        &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">        &quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">    var flag = true;</span><br><span class="line">    for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//true为PC端，false为手机端</span><br><span class="line">var flag = IsPC();</span><br><span class="line">if (!flag) &#123;</span><br><span class="line">    window.location.href = &quot;$&#123;ctx&#125;/wap&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>支付宝扫码支付的开发过程</title>
      <link href="/2018/10/29/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/10/29/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><ul><li>用户：在我们网站上交易的客户。</li><li>支付网关：是我们商户和支付宝开放平台对接的系统。</li><li>商户系统：充值成功后用于发货的系统。</li><li>微信支付平台：是阿里的支付宝开放。</li></ul><h2 id="支付宝扫码支付官网地址"><a href="#支付宝扫码支付官网地址" class="headerlink" title="支付宝扫码支付官网地址"></a>支付宝扫码支付官网地址</h2><p>支付接口：<a href="https://docs.open.alipay.com/api_1/" target="_blank" rel="noopener">https://docs.open.alipay.com/api_1/</a></p><a id="more"></a><h2 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h2><p>用户登录我们的网站，选择好商品之后，点击使用微信扫码付款，直到用户户看到付款成功。对应的序列图如下：<br><img src="/uploads/alipay-seq.png" alt=""></p><p>我们就是要做上图这么一件事，下面是详细的开发步骤。</p><h2 id="一、注册"><a href="#一、注册" class="headerlink" title="一、注册"></a>一、注册</h2><p>注册地址：<a href="https://memberprod.alipay.com/account/reg/index.htm" target="_blank" rel="noopener">https://memberprod.alipay.com/account/reg/index.htm</a></p><blockquote><p>只有企业账户才能玩支付。</p></blockquote><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>登录微信公共号，获取如下三项配置：</p><ol><li>应用ID - 支付宝分配给开发者的应用ID</li><li>商户私钥 - 商户自己生成一对密钥中的私钥</li><li>支付宝公钥 - 登录开放平台后自行下载</li></ol><p>生成RSA密钥：<a href="https://docs.open.alipay.com/291/105971/" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971/</a><br>上传商户公钥并获取支付宝公钥：<a href="https://docs.open.alipay.com/291/105972/" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105972/</a><br>使用私商户钥生成请求签名：<a href="https://docs.open.alipay.com/291/105974/" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105974/</a><br>使用支付宝公钥验签</p><h2 id="三、统一收单线下交易预创建（下单）"><a href="#三、统一收单线下交易预创建（下单）" class="headerlink" title="三、统一收单线下交易预创建（下单）"></a>三、统一收单线下交易预创建（下单）</h2><p>这是一个预交易接口，即调用后不会真正的发生金钱交易，只是告诉支付宝有个用户一会要支付1000元买手机，你给我生成一个支付链接，我把这个链接变成二维码，让他使用支付宝来扫描。调用此接口后会返回支付链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 支付宝（预）支付</span><br><span class="line"> *</span><br><span class="line"> * @param command</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public CommonResponse pay(Command command) &#123;</span><br><span class="line">    log.info(&quot;进入支付宝预支付接口&quot;);</span><br><span class="line">    PayResponse payResponse = PayResponse.getResponse();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Map&lt;String, String&gt; bizContent = new HashMap&lt;&gt;(8);</span><br><span class="line">        bizContent.put(&quot;out_trade_no&quot;, command.getSerialNo());</span><br><span class="line">        bizContent.put(&quot;total_amount&quot;, command.getAmount().setScale(2, BigDecimal.ROUND_HALF_UP).toString());</span><br><span class="line">        bizContent.put(&quot;subject&quot;, &quot;CK充值中心-充值&quot;);</span><br><span class="line"></span><br><span class="line">        AlipayClient alipayClient = new DefaultAlipayClient(apiUrl, appId, privateKey, &quot;json&quot;, &quot;utf-8&quot;, publicKey, &quot;RSA2&quot;);</span><br><span class="line">        AlipayTradePrecreateRequest request = new AlipayTradePrecreateRequest();</span><br><span class="line">        request.setNotifyUrl(notifyUrl);</span><br><span class="line">        request.setBizContent(JSON.toJSONString(bizContent));</span><br><span class="line">        AlipayTradePrecreateResponse response = alipayClient.execute(request);</span><br><span class="line">        if (response.isSuccess()) &#123;</span><br><span class="line">            log.info(&quot;获取二维码成功&quot;);</span><br><span class="line"></span><br><span class="line">            String qrName = command.getSerialNo() + &quot;.png&quot;;</span><br><span class="line">            String name = fileRootPath + &quot;qrcode/&quot; + qrName;</span><br><span class="line"></span><br><span class="line">            BufferedImage image = QRCodeKit.createQRCodeWithLogo(response.getQrCode(), new File(fileRootPath + &quot;qrcode/logo.png&quot;));</span><br><span class="line">            ImageIO.write(image, &quot;png&quot;, new File(name));</span><br><span class="line"></span><br><span class="line">            log.info(&quot;二维码生成成功，路径： &#123;&#125;&quot;, name);</span><br><span class="line"></span><br><span class="line">            payResponse.setApiUrl(&quot;upload/qrcode/&quot; + qrName);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.info(&quot;获取二维码失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        payResponse.setRespCo(response.getCode());</span><br><span class="line">        payResponse.setRespMsg(response.getMsg());</span><br><span class="line">        payResponse.setRespData(response.getBody());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new SendException(&quot;请求支付宝预支付接口异常&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(&quot;离开支付宝预支付接口&quot;);</span><br><span class="line">    return payResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Alipay开头的是阿里的sdk，使用maven依赖如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.87.ALL&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>QRCodeKit是一个二维码生成工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.apache.commons.codec.binary.Base64OutputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/29/18</span><br><span class="line"> */</span><br><span class="line">public class QRCodeKit &#123;</span><br><span class="line"></span><br><span class="line">    private static final String QRCODE_DEFAULT_CHARSET = &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">    private static final int QRCODE_DEFAULT_HEIGHT = 300;</span><br><span class="line"></span><br><span class="line">    private static final int QRCODE_DEFAULT_WIDTH = 300;</span><br><span class="line"></span><br><span class="line">    private static final int BLACK = 0xFF000000;</span><br><span class="line"></span><br><span class="line">    private static final int WHITE = 0xFFFFFFFF;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, NotFoundException &#123;</span><br><span class="line">        String data = &quot;扫码看到我&quot;;</span><br><span class="line">        File logoFile = new File(&quot;/xxx/logo.png&quot;);</span><br><span class="line">        BufferedImage image = QRCodeKit.createQRCodeWithLogo(data, logoFile);</span><br><span class="line">        ImageIO.write(image, &quot;png&quot;, new File(&quot;/xxx/res.png&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default settings</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data) &#123;</span><br><span class="line">        return createQRCode(data, QRCODE_DEFAULT_WIDTH, QRCODE_DEFAULT_HEIGHT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default charset</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, int width, int height) &#123;</span><br><span class="line">        return createQRCode(data, QRCODE_DEFAULT_CHARSET, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified charset</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, String charset, int width, int height) &#123;</span><br><span class="line">        Map hint = new HashMap();</span><br><span class="line">        hint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.put(EncodeHintType.CHARACTER_SET, charset);</span><br><span class="line"></span><br><span class="line">        return createQRCode(data, charset, hint, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified hint</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param hint</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, String charset, Map&lt;EncodeHintType, ?&gt; hint, int width,</span><br><span class="line">                                             int height) &#123;</span><br><span class="line">        BitMatrix matrix;</span><br><span class="line">        try &#123;</span><br><span class="line">            matrix = new MultiFormatWriter().encode(new String(data.getBytes(charset), charset), BarcodeFormat.QR_CODE,</span><br><span class="line">                    width, height, hint);</span><br><span class="line">            return toBufferedImage(matrix);</span><br><span class="line">        &#125; catch (WriterException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BufferedImage toBufferedImage(BitMatrix matrix) &#123;</span><br><span class="line">        int width = matrix.getWidth();</span><br><span class="line">        int height = matrix.getHeight();</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height,</span><br><span class="line">                BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">            for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default settings and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, File logoFile) &#123;</span><br><span class="line">        return createQRCodeWithLogo(data, QRCODE_DEFAULT_WIDTH, QRCODE_DEFAULT_HEIGHT, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default charset and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, int width, int height, File logoFile) &#123;</span><br><span class="line">        return createQRCodeWithLogo(data, QRCODE_DEFAULT_CHARSET, width, height, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified charset and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, String charset, int width, int height, File logoFile) &#123;</span><br><span class="line">        Map&lt;EncodeHintType, Object&gt; hint = new HashMap&lt;&gt;(8);</span><br><span class="line">        hint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.put(EncodeHintType.CHARACTER_SET, charset);</span><br><span class="line"></span><br><span class="line">        return createQRCodeWithLogo(data, charset, hint, width, height, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified hint and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param hint</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, String charset, Map&lt;EncodeHintType, ?&gt; hint,</span><br><span class="line">                                                     int width, int height, File logoFile) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedImage qrcode = createQRCode(data, charset, hint, width, height);</span><br><span class="line">            BufferedImage logo = ImageIO.read(logoFile);</span><br><span class="line">            int deltaHeight = height - logo.getHeight();</span><br><span class="line">            int deltaWidth = width - logo.getWidth();</span><br><span class="line"></span><br><span class="line">            BufferedImage combined = new BufferedImage(height, width, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">            Graphics2D g = (Graphics2D) combined.getGraphics();</span><br><span class="line">            g.drawImage(qrcode, 0, 0, null);</span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));</span><br><span class="line">            g.drawImage(logo, Math.round(deltaWidth / 2), Math.round(deltaHeight / 2), null);</span><br><span class="line"></span><br><span class="line">            return combined;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return base64 for image</span><br><span class="line">     *</span><br><span class="line">     * @param image</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getImageBase64String(BufferedImage image) &#123;</span><br><span class="line">        String result = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ByteArrayOutputStream os = new ByteArrayOutputStream();</span><br><span class="line">            OutputStream b64 = new Base64OutputStream(os);</span><br><span class="line">            ImageIO.write(image, &quot;png&quot;, b64);</span><br><span class="line">            result = os.toString(&quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Decode the base64Image data to image</span><br><span class="line">     *</span><br><span class="line">     * @param base64ImageString</span><br><span class="line">     * @param file</span><br><span class="line">     */</span><br><span class="line">    public static void convertBase64StringToImage(String base64ImageString, File file) &#123;</span><br><span class="line">        FileOutputStream os;</span><br><span class="line">        try &#123;</span><br><span class="line">            Base64 d = new Base64();</span><br><span class="line">            byte[] bs = d.decode(base64ImageString);</span><br><span class="line">            os = new FileOutputStream(file.getAbsolutePath());</span><br><span class="line">            os.write(bs);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成二维码使用的是zxing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>对应接口文档地址：<a href="https://docs.open.alipay.com/api_1/alipay.trade.precreate" target="_blank" rel="noopener">https://docs.open.alipay.com/api_1/alipay.trade.precreate</a></p><h2 id="四、后台通知"><a href="#四、后台通知" class="headerlink" title="四、后台通知"></a>四、后台通知</h2><p>当用户扫码完成支付后，微信会发起后台通知告诉我们交易成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 支付宝后台通知</span><br><span class="line"> *</span><br><span class="line"> * @param request</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;alipay&quot;)</span><br><span class="line">public String alipay(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    Map&lt;String, String&gt; maps = new HashMap&lt;&gt;(16);</span><br><span class="line">    Map requestParams = request.getParameterMap();</span><br><span class="line">    for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext(); ) &#123;</span><br><span class="line">        String name = (String) iter.next();</span><br><span class="line">        String[] values = (String[]) requestParams.get(name);</span><br><span class="line">        String valueStr = &quot;&quot;;</span><br><span class="line">        for (int i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + &quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        maps.put(name, valueStr);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;支付宝后台通知内容:&#123;&#125;&quot;, maps);</span><br><span class="line"></span><br><span class="line">    // 验签</span><br><span class="line">    boolean signVerified = AlipaySignature.rsaCheckV1(maps, aliPubKey, &quot;UTF-8&quot;, &quot;RSA2&quot;);</span><br><span class="line">    if (signVerified) &#123;</span><br><span class="line">        log.info(&quot;验签通过&quot;);</span><br><span class="line"></span><br><span class="line">        String serialNo = maps.get(&quot;out_trade_no&quot;);</span><br><span class="line">        Command command = commandService.findCommandBySerialNo(serialNo);</span><br><span class="line">        if (command == null) &#123;</span><br><span class="line">            log.info(&quot;异步通知流水号不存在:&#123;&#125;&quot;, serialNo);</span><br><span class="line">            return &quot;false&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (&quot;TRADE_SUCCESS&quot;.equals(maps.get(&quot;trade_status&quot;)) &amp;&amp; !&quot;YF&quot;.contains(command.getTranCo())) &#123;</span><br><span class="line">            log.info(&quot;交易成功，通知商户发货&quot;);</span><br><span class="line">            // 通知商户发货</span><br><span class="line">            if(paymentHelper.notify(command)) &#123;</span><br><span class="line">                // 响应落库, 更新交易状态</span><br><span class="line">                aliPayTransactionService.processNotice(maps, command);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.info(&quot;验签失败&quot;);</span><br><span class="line">        return &quot;failure&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的接口文档：<a href="https://docs.open.alipay.com/api_1/alipay.trade.precreate/" target="_blank" rel="noopener">https://docs.open.alipay.com/api_1/alipay.trade.precreate/</a></p><blockquote><p>在文档的最后一行。</p></blockquote><h2 id="五、单笔查询"><a href="#五、单笔查询" class="headerlink" title="五、单笔查询"></a>五、单笔查询</h2><p>如果我们没收到后台通知怎么办？这时候就可以通过单笔查询主动去支付宝开放平台查询订单状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; bizContent = new HashMap&lt;&gt;(4);</span><br><span class="line">bizContent.put(&quot;out_trade_no&quot;, command.getSerialNo());</span><br><span class="line"></span><br><span class="line">AlipayClient alipayClient = new DefaultAlipayClient(apiUrl, appId, privateKey, &quot;json&quot;, &quot;utf-8&quot;, publicKey, &quot;RSA2&quot;);</span><br><span class="line">AlipayTradeQueryRequest request = new AlipayTradeQueryRequest();</span><br><span class="line">request.setBizContent(JSON.toJSONString(bizContent));</span><br><span class="line">AlipayTradeQueryResponse response = alipayClient.execute(request);</span><br><span class="line">log.info(&quot;查询的响应:&#123;&#125;&quot;, response.getBody());</span><br><span class="line"></span><br><span class="line">String respCo = response.getCode();</span><br><span class="line">String respMsg = response.getMsg();</span><br><span class="line">String tranSt = TranSt.I.getCode();</span><br><span class="line">String amt = response.getBuyerPayAmount();</span><br><span class="line">BigDecimal amount = new BigDecimal(StringUtils.isEmpty(amt) ? &quot;0&quot; : amt);</span><br><span class="line">String channelSerialNo = response.getTradeNo();</span><br><span class="line"></span><br><span class="line">if (response.isSuccess()) &#123;</span><br><span class="line">    log.info(&quot;查询得到结果&quot;);</span><br><span class="line"></span><br><span class="line">    String tradeStatus = response.getTradeStatus();</span><br><span class="line">    log.info(&quot;交易状态:&#123;&#125;&quot;, tradeStatus);</span><br><span class="line">    if (&quot;TRADE_SUCCESS&quot;.equals(tradeStatus)) &#123;</span><br><span class="line">        tranSt = TranSt.Y.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    log.info(&quot;查询失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">log.info(&quot;查询到的交易:&#123;&#125;, 交易结果:&#123;&#125;&quot;, command.getSerialNo(), tranSt);</span><br></pre></td></tr></table></figure><p>对应接口文档地址：<a href="https://docs.open.alipay.com/api_1/alipay.trade.query/" target="_blank" rel="noopener">https://docs.open.alipay.com/api_1/alipay.trade.query/</a></p><h2 id="六、下载对账单"><a href="#六、下载对账单" class="headerlink" title="六、下载对账单"></a>六、下载对账单</h2><p>如果我们需要日终对账，那么就要用到下载对账单接口。但是此接口不大符合我的需要，因此我没用这个接口，而是循环使用单笔查询代替的。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信扫码支付的开发过程</title>
      <link href="/2018/10/29/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/10/29/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><ul><li>用户：在我们网站上交易的客户。</li><li>支付网关：是我们商户和微信支付平台对接的系统。</li><li>商户系统：充值成功后用于发货的系统。</li><li>微信支付平台：是腾讯的微信支付平台。</li></ul><h2 id="微信支付官网地址"><a href="#微信支付官网地址" class="headerlink" title="微信支付官网地址"></a>微信支付官网地址</h2><p>扫码支付介绍：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p><a id="more"></a><h2 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h2><p>用户登录我们的网站，选择好商品之后，点击使用微信扫码付款，直到用户户看到付款成功。对应的序列图如下：<br><img src="/uploads/wxpay-flow.png" alt=""></p><p>我们就是要做上图这么一件事，下面是详细的开发步骤。</p><h2 id="一、注册"><a href="#一、注册" class="headerlink" title="一、注册"></a>一、注册</h2><p>注册地址：<a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN&amp;token=" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&amp;lang=zh_CN&amp;token=</a></p><blockquote><p>只有企业才能进行微信认证，只有进行了认证才能玩微信支付。</p></blockquote><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>登录微信公共号，获取如下三项配置：</p><ol><li>公众账号ID - 微信支付分配的公众账号ID</li><li>商户号 - 微信支付分配的商户号</li><li>key - key设置路径：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置</li></ol><h2 id="三、预交易（统一下单）"><a href="#三、预交易（统一下单）" class="headerlink" title="三、预交易（统一下单）"></a>三、预交易（统一下单）</h2><p>这是一个预交易接口，即调用后不会真正的发生金钱交易，只是告诉微信有个用户一会要支付1000元买手机，你给我生成一个支付链接，我把这个链接变成二维码，让他使用微信来扫描。调用此接口后会返回支付链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 微信（预）支付</span><br><span class="line"> *</span><br><span class="line"> * @param command</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public CommonResponse pay(Command command) &#123;</span><br><span class="line">    log.info(&quot;进入微信支付接口&quot;);</span><br><span class="line">    PayResponse payResponse = PayResponse.getResponse();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        WXPay wxpay = new WXPay(wxPayConfig);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; data = new HashMap&lt;&gt;(16);</span><br><span class="line">        data.put(&quot;body&quot;, &quot;XX充值中心-充值&quot;);</span><br><span class="line">        data.put(&quot;out_trade_no&quot;, command.getSerialNo());</span><br><span class="line">        data.put(&quot;fee_type&quot;, &quot;CNY&quot;);</span><br><span class="line">        data.put(&quot;total_fee&quot;, String.valueOf(command.getAmount().multiply(BigDecimal.valueOf(100)).toBigInteger()));</span><br><span class="line">        data.put(&quot;spbill_create_ip&quot;, command.getClientIp());</span><br><span class="line">        data.put(&quot;notify_url&quot;, notifyUrl);</span><br><span class="line">        data.put(&quot;trade_type&quot;, &quot;NATIVE&quot;);</span><br><span class="line">        data.put(&quot;product_id&quot;, command.getProductCo());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; resp = wxpay.unifiedOrder(data);</span><br><span class="line">        String respCo = resp.get(&quot;return_code&quot;);</span><br><span class="line">        String respMsg = resp.get(&quot;return_msg&quot;);</span><br><span class="line">        log.info(&quot;微信支付响应码:&#123;&#125;&quot;, respCo);</span><br><span class="line">        log.info(&quot;微信支付响应消息:&#123;&#125;&quot;, respMsg);</span><br><span class="line">        if (WXPayConstants.SUCCESS.equals(respCo)) &#123;</span><br><span class="line">            String codeUrl = resp.get(&quot;code_url&quot;);</span><br><span class="line">            String prepayId = resp.get(&quot;prepay_id&quot;);</span><br><span class="line">            log.info(&quot;微信支付获取二维码成功：&#123;&#125;&quot;, codeUrl);</span><br><span class="line"></span><br><span class="line">            String qrName = command.getSerialNo() + &quot;.png&quot;;</span><br><span class="line">            String name = fileRootPath + &quot;qrcode/&quot; + qrName;</span><br><span class="line"></span><br><span class="line">            BufferedImage image = QRCodeKit.createQRCodeWithLogo(codeUrl, new File(fileRootPath + &quot;qrcode/logo.png&quot;));</span><br><span class="line">            ImageIO.write(image, &quot;png&quot;, new File(name));</span><br><span class="line"></span><br><span class="line">            log.info(&quot;二维码生成成功，路径： &#123;&#125;&quot;, name);</span><br><span class="line"></span><br><span class="line">            payResponse.setApiUrl(&quot;upload/qrcode/&quot; + qrName);</span><br><span class="line">            payResponse.setChannelSerialNo(prepayId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        payResponse.setRespCo(respCo);</span><br><span class="line">        payResponse.setRespMsg(respMsg);</span><br><span class="line">        payResponse.setRespData(resp.toString());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new SendException(&quot;请求微信支付接口异常&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(&quot;离开微信支付接口&quot;);</span><br><span class="line">    return payResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxPayConfig是微信支付配置，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import demo.sdk.IWXPayDomain;</span><br><span class="line">import demo.sdk.WXPayConfig;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/9/18</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">@Component</span><br><span class="line">public class MyWXPayConfig extends WXPayConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wxpay.appid&#125;&quot;)</span><br><span class="line">    private String appId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wxpay.mchid&#125;&quot;)</span><br><span class="line">    private String mchId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wxpay.key&#125;&quot;)</span><br><span class="line">    private String key;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;wxpay.domain&#125;&quot;)</span><br><span class="line">    private String domain;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getAppID() &#123;</span><br><span class="line">        return appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getMchID() &#123;</span><br><span class="line">        return mchId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getKey() &#123;</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public InputStream getCertStream() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IWXPayDomain getWXPayDomain() &#123;</span><br><span class="line">        IWXPayDomain iwxPayDomain = new IWXPayDomain() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void report(String domain, long elapsedTimeMillis, Exception ex) &#123;</span><br><span class="line">                log.error(&quot;微信支付域名:&#123;&#125;, &#123;&#125;&quot;, domain, elapsedTimeMillis, ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public DomainInfo getDomain(WXPayConfig config) &#123;</span><br><span class="line">                return new DomainInfo(domain, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return iwxPayDomain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>QRCodeKit是一个二维码生成工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.apache.commons.codec.binary.Base64OutputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/29/18</span><br><span class="line"> */</span><br><span class="line">public class QRCodeKit &#123;</span><br><span class="line"></span><br><span class="line">    private static final String QRCODE_DEFAULT_CHARSET = &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">    private static final int QRCODE_DEFAULT_HEIGHT = 300;</span><br><span class="line"></span><br><span class="line">    private static final int QRCODE_DEFAULT_WIDTH = 300;</span><br><span class="line"></span><br><span class="line">    private static final int BLACK = 0xFF000000;</span><br><span class="line"></span><br><span class="line">    private static final int WHITE = 0xFFFFFFFF;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, NotFoundException &#123;</span><br><span class="line">        String data = &quot;扫码看到我&quot;;</span><br><span class="line">        File logoFile = new File(&quot;/xxx/logo.png&quot;);</span><br><span class="line">        BufferedImage image = QRCodeKit.createQRCodeWithLogo(data, logoFile);</span><br><span class="line">        ImageIO.write(image, &quot;png&quot;, new File(&quot;/xxx/res.png&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default settings</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data) &#123;</span><br><span class="line">        return createQRCode(data, QRCODE_DEFAULT_WIDTH, QRCODE_DEFAULT_HEIGHT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default charset</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, int width, int height) &#123;</span><br><span class="line">        return createQRCode(data, QRCODE_DEFAULT_CHARSET, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified charset</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, String charset, int width, int height) &#123;</span><br><span class="line">        Map hint = new HashMap();</span><br><span class="line">        hint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.put(EncodeHintType.CHARACTER_SET, charset);</span><br><span class="line"></span><br><span class="line">        return createQRCode(data, charset, hint, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified hint</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param hint</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCode(String data, String charset, Map&lt;EncodeHintType, ?&gt; hint, int width,</span><br><span class="line">                                             int height) &#123;</span><br><span class="line">        BitMatrix matrix;</span><br><span class="line">        try &#123;</span><br><span class="line">            matrix = new MultiFormatWriter().encode(new String(data.getBytes(charset), charset), BarcodeFormat.QR_CODE,</span><br><span class="line">                    width, height, hint);</span><br><span class="line">            return toBufferedImage(matrix);</span><br><span class="line">        &#125; catch (WriterException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BufferedImage toBufferedImage(BitMatrix matrix) &#123;</span><br><span class="line">        int width = matrix.getWidth();</span><br><span class="line">        int height = matrix.getHeight();</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height,</span><br><span class="line">                BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">            for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default settings and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, File logoFile) &#123;</span><br><span class="line">        return createQRCodeWithLogo(data, QRCODE_DEFAULT_WIDTH, QRCODE_DEFAULT_HEIGHT, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with default charset and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, int width, int height, File logoFile) &#123;</span><br><span class="line">        return createQRCodeWithLogo(data, QRCODE_DEFAULT_CHARSET, width, height, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified charset and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, String charset, int width, int height, File logoFile) &#123;</span><br><span class="line">        Map&lt;EncodeHintType, Object&gt; hint = new HashMap&lt;&gt;(8);</span><br><span class="line">        hint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.put(EncodeHintType.CHARACTER_SET, charset);</span><br><span class="line"></span><br><span class="line">        return createQRCodeWithLogo(data, charset, hint, width, height, logoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Create qrcode with specified hint and logo</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @param charset</span><br><span class="line">     * @param hint</span><br><span class="line">     * @param width</span><br><span class="line">     * @param height</span><br><span class="line">     * @param logoFile</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static BufferedImage createQRCodeWithLogo(String data, String charset, Map&lt;EncodeHintType, ?&gt; hint,</span><br><span class="line">                                                     int width, int height, File logoFile) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedImage qrcode = createQRCode(data, charset, hint, width, height);</span><br><span class="line">            BufferedImage logo = ImageIO.read(logoFile);</span><br><span class="line">            int deltaHeight = height - logo.getHeight();</span><br><span class="line">            int deltaWidth = width - logo.getWidth();</span><br><span class="line"></span><br><span class="line">            BufferedImage combined = new BufferedImage(height, width, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">            Graphics2D g = (Graphics2D) combined.getGraphics();</span><br><span class="line">            g.drawImage(qrcode, 0, 0, null);</span><br><span class="line">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));</span><br><span class="line">            g.drawImage(logo, Math.round(deltaWidth / 2), Math.round(deltaHeight / 2), null);</span><br><span class="line"></span><br><span class="line">            return combined;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Return base64 for image</span><br><span class="line">     *</span><br><span class="line">     * @param image</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getImageBase64String(BufferedImage image) &#123;</span><br><span class="line">        String result = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ByteArrayOutputStream os = new ByteArrayOutputStream();</span><br><span class="line">            OutputStream b64 = new Base64OutputStream(os);</span><br><span class="line">            ImageIO.write(image, &quot;png&quot;, b64);</span><br><span class="line">            result = os.toString(&quot;UTF-8&quot;);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Decode the base64Image data to image</span><br><span class="line">     *</span><br><span class="line">     * @param base64ImageString</span><br><span class="line">     * @param file</span><br><span class="line">     */</span><br><span class="line">    public static void convertBase64StringToImage(String base64ImageString, File file) &#123;</span><br><span class="line">        FileOutputStream os;</span><br><span class="line">        try &#123;</span><br><span class="line">            Base64 d = new Base64();</span><br><span class="line">            byte[] bs = d.decode(base64ImageString);</span><br><span class="line">            os = new FileOutputStream(file.getAbsolutePath());</span><br><span class="line">            os.write(bs);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生成二维码使用的是zxing:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>其他几个类，都是微信的sdk：  </p><ul><li>IWXPayDomain</li><li>WXPay</li><li>WXPayConfig</li><li>WXPayConstants</li><li>WXPayReport</li><li>WXPayRequest</li><li>WXPayUtil</li><li>WXPayXmlUtil</li></ul><p>sdk下载地址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=11_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=11_1</a></p><p>对应接口文档地址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1</a></p><h2 id="四、后台通知"><a href="#四、后台通知" class="headerlink" title="四、后台通知"></a>四、后台通知</h2><p>当用户扫码完成支付后，微信会发起后台通知告诉我们交易成功了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 微信支付后台通知</span><br><span class="line"> *</span><br><span class="line"> * @param request</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;wxpay&quot;)</span><br><span class="line">public String wxpay(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    InputStream inStream = null;</span><br><span class="line">    ByteArrayOutputStream outSteam = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        inStream = request.getInputStream();</span><br><span class="line">        outSteam = new ByteArrayOutputStream();</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len = inStream.read(buffer)) != -1) &#123;</span><br><span class="line">            outSteam.write(buffer, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        String result = new String(outSteam.toByteArray(), &quot;utf-8&quot;);</span><br><span class="line">        log.info(&quot;微信支付后台通知内容:&#123;&#125;&quot;, result);</span><br><span class="line">        WXPay wxpay = new WXPay(wxPayConfig);</span><br><span class="line"></span><br><span class="line">        // 转换成map</span><br><span class="line">        Map&lt;String, String&gt; notifyMap = WXPayUtil.xmlToMap(result);</span><br><span class="line">        if (wxpay.isResponseSignatureValid(notifyMap)) &#123;</span><br><span class="line">            log.info(&quot;验签通过&quot;);</span><br><span class="line"></span><br><span class="line">            String serialNo = notifyMap.get(&quot;out_trade_no&quot;);</span><br><span class="line">            Command command = commandService.findCommandBySerialNo(serialNo);</span><br><span class="line">            if (command == null) &#123;</span><br><span class="line">                log.info(&quot;异步通知流水号不存在:&#123;&#125;&quot;, serialNo);</span><br><span class="line">                return &quot;&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[FAIL]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[ERR]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (WXPayConstants.SUCCESS.equals(notifyMap.get(&quot;result_code&quot;))) &#123;</span><br><span class="line">                log.info(&quot;交易成功，状态更新为待发货&quot;);</span><br><span class="line"></span><br><span class="line">                // 更新交易状态</span><br><span class="line">                command.setTranSt(TranSt.P.getCode());</span><br><span class="line">                commandService.updateTranSt(command);</span><br><span class="line"></span><br><span class="line">                // 通知商户系统发货</span><br><span class="line">                if(paymentHelper.notify(command)) &#123;</span><br><span class="line">                    // 响应落库, 更新交易状态</span><br><span class="line">                    wxPayTransactionService.processNotice(notifyMap, command);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.info(&quot;验签失败&quot;);</span><br><span class="line">            // 签名错误，如果数据里没有sign字段，也认为是签名错误</span><br><span class="line">            return &quot;&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[FAIL]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[ERR]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;微信支付后台通知接收异常&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (outSteam != null) &#123;</span><br><span class="line">            outSteam.close();</span><br><span class="line">        &#125;</span><br><span class="line">        if (inStream != null) &#123;</span><br><span class="line">            inStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &quot;&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应接口文档地址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&amp;index=8" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_7&amp;index=8</a></p><h2 id="五、单笔查询"><a href="#五、单笔查询" class="headerlink" title="五、单笔查询"></a>五、单笔查询</h2><p>如果我们没收到后台通知怎么办？这时候就可以通过单笔查询主动去微信支付平台查询订单状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">WXPay wxpay = new WXPay(wxPayConfig);</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; data = new HashMap&lt;&gt;(4);</span><br><span class="line">data.put(&quot;out_trade_no&quot;, command.getSerialNo());</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; resp = wxpay.orderQuery(data);</span><br><span class="line">String respCo = resp.get(&quot;return_code&quot;);</span><br><span class="line">String respMsg = resp.get(&quot;return_msg&quot;);</span><br><span class="line">String tranSt = TranSt.I.getCode();</span><br><span class="line">BigDecimal amount = BigDecimal.ZERO;</span><br><span class="line">String channelSerialNo = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">log.info(&quot;微信支付查询响应码:&#123;&#125;&quot;, respCo);</span><br><span class="line">log.info(&quot;微信支付查询响应消息:&#123;&#125;&quot;, respMsg);</span><br><span class="line">if (WXPayConstants.SUCCESS.equals(respCo)) &#123;</span><br><span class="line">    tranSt = resp.get(&quot;trade_state&quot;);</span><br><span class="line">    String errCode = resp.get(&quot;err_code&quot;);</span><br><span class="line">    log.info(&quot;微信支付查询回来的交易状态：&#123;&#125;&quot;, tranSt);</span><br><span class="line">    log.info(&quot;微信支付查询回来的errCode：&#123;&#125;&quot;, errCode);</span><br><span class="line"></span><br><span class="line">    channelSerialNo = resp.get(&quot;transaction_id&quot;);</span><br><span class="line">    amount = new BigDecimal(resp.getOrDefault(&quot;total_fee&quot;, &quot;0&quot;));</span><br><span class="line">    if (amount.compareTo(BigDecimal.ZERO) &gt; 0) &#123;</span><br><span class="line">        amount = amount.divide(BigDecimal.valueOf(100));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (WXPayConstants.SUCCESS.equals(tranSt)) &#123;</span><br><span class="line">        tranSt = TranSt.Y.getCode();</span><br><span class="line">    &#125; else if (&quot;ORDERNOTEXIST&quot;.equals(errCode)) &#123;</span><br><span class="line">        log.info(&quot;订单不存在&quot;);</span><br><span class="line">        tranSt = TranSt.F.getCode();</span><br><span class="line">    &#125; else if (&quot;PAYERROR&quot;.equals(tranSt)) &#123;</span><br><span class="line">        tranSt = TranSt.F.getCode();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        tranSt = TranSt.I.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应接口文档地址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_2" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_2</a></p><h2 id="六、下载对账单"><a href="#六、下载对账单" class="headerlink" title="六、下载对账单"></a>六、下载对账单</h2><p>如果我们需要日终对账，那么就要用到下载对账单接口。但是此接口不大符合我的需要，因此我没用这个接口，而是循环使用单笔查询代替的。</p><p>对应接口文档地址：<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_6" target="_blank" rel="noopener">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_6</a></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>境外支付平台PayPal接口的开发过程</title>
      <link href="/2018/10/26/%E5%A2%83%E5%A4%96%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0PayPal%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/10/26/%E5%A2%83%E5%A4%96%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0PayPal%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><ul><li>用户：在我们网站上交易的客户。</li><li>支付网关：是我们商户和PayPal对接的系统。</li><li>商户系统：充值成功后用于发货的系统。</li><li>PayPal：是海外的一家支付平台。</li></ul><h2 id="PayPal官网地址"><a href="#PayPal官网地址" class="headerlink" title="PayPal官网地址"></a>PayPal官网地址</h2><p>官网：<a href="https://paypal.com" target="_blank" rel="noopener">https://paypal.com</a><br>开发者网站：<a href="https://developer.paypal.com" target="_blank" rel="noopener">https://developer.paypal.com</a><br>沙盒地址：<a href="https://www.sandbox.paypal.com/" target="_blank" rel="noopener">https://www.sandbox.paypal.com/</a><br>Demo地址：<a href="https://demo.paypal.com" target="_blank" rel="noopener">https://demo.paypal.com</a></p><a id="more"></a><h2 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h2><p>用户登录我们的网站，选择好商品之后，点击使用PayPal付款，直到用户户看到付款成功。对应的序列图如下：<br><img src="/uploads/paypal00.png" alt=""></p><p>我们就是要做上图这么一件事，下面是详细的开发步骤。</p><h2 id="一、注册个人账号"><a href="#一、注册个人账号" class="headerlink" title="一、注册个人账号"></a>一、注册个人账号</h2><p>注册地址：<a href="https://www.paypal.com/us/webapps/mpp/account-selection" target="_blank" rel="noopener">https://www.paypal.com/us/webapps/mpp/account-selection</a></p><p>选择<code>个人账户</code>即可。</p><p><img src="/uploads/paypal01.png" alt=""><br><img src="/uploads/paypal02.png" alt=""></p><p>只需按部就班填写即可，此处不再截图注册流程。</p><h2 id="二、创建测试账号"><a href="#二、创建测试账号" class="headerlink" title="二、创建测试账号"></a>二、创建测试账号</h2><p>开发者网站：<a href="https://developer.paypal.com/" target="_blank" rel="noopener">https://developer.paypal.com/</a><br>用上面注册的账户登录开发者网站，在工作台上创建一个商户账号和一个买家账号，用于开发和测试。<br><img src="/uploads/paypal03.png" alt=""></p><p>在创建买家账户的时候，别忘了给买家账户里多加一些钱。</p><h2 id="三、获取clientId和secret"><a href="#三、获取clientId和secret" class="headerlink" title="三、获取clientId和secret"></a>三、获取clientId和secret</h2><p>在调用REST API时要在请求头中加入token，而token是用clientId和secret获取的。</p><p><img src="/uploads/paypal04.png" alt=""><br><img src="/uploads/paypal05.png" alt=""></p><h2 id="四、获取token"><a href="#四、获取token" class="headerlink" title="四、获取token"></a>四、获取token</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/24/18</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@Log4j2</span><br><span class="line">public class PayPalToken &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;paypal.clientId&#125;&quot;)</span><br><span class="line">    private String clientId;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;paypal.secret&#125;&quot;)</span><br><span class="line">    private String secret;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;paypal.tokenUrl&#125;&quot;)</span><br><span class="line">    private String tokenUrl;</span><br><span class="line"></span><br><span class="line">    private String token;</span><br><span class="line"></span><br><span class="line">    private long expire;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取Token</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public String getToken() throws Exception &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            if (expire &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">                refreshToken();</span><br><span class="line">            &#125;</span><br><span class="line">            return token;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 刷新Token</span><br><span class="line">     *</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private void refreshToken() throws Exception &#123;</span><br><span class="line">        Map&lt;String, String&gt; header = new HashMap&lt;&gt;(16);</span><br><span class="line">        header.put(&quot;Accept&quot;, &quot;application/json&quot;);</span><br><span class="line">        header.put(&quot;Accept-Language&quot;, &quot;en_US&quot;);</span><br><span class="line">        header.put(&quot;content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">        byte[] authEncBytes = Base64.encodeBase64((clientId + &quot;:&quot; + secret).getBytes());</span><br><span class="line">        String authStringEnc = new String(authEncBytes);</span><br><span class="line">        header.put(&quot;Authorization&quot;, &quot;Basic &quot; + authStringEnc);</span><br><span class="line">        log.info(&quot;获取token的请求头:&#123;&#125;&quot;, header);</span><br><span class="line"></span><br><span class="line">        String result = HttpUtil.send(tokenUrl, header, &quot;grant_type=client_credentials&quot;);</span><br><span class="line">        log.info(&quot;获取token的响应:&#123;&#125;&quot;, result);</span><br><span class="line">        if (StringUtils.isEmpty(result)) &#123;</span><br><span class="line">            throw new Exception(&quot;获取token失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        this.token = jsonObject.getString(&quot;access_token&quot;);</span><br><span class="line">        this.expire = System.currentTimeMillis() + jsonObject.getInteger(&quot;expires_in&quot;) / 3 * 1000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中tokenUrl为：<a href="https://api.sandbox.paypal.com/v1/oauth2/token" target="_blank" rel="noopener">https://api.sandbox.paypal.com/v1/oauth2/token</a><br>对应接口文档地址：<a href="https://developer.paypal.com/docs/api/overview/#make-your-first-call" target="_blank" rel="noopener">https://developer.paypal.com/docs/api/overview/#make-your-first-call</a></p><p>注意：token具有时效性。</p><h2 id="五、预交易（下单）"><a href="#五、预交易（下单）" class="headerlink" title="五、预交易（下单）"></a>五、预交易（下单）</h2><p>这是一个预交易接口，即调用后不会真正的发生金钱交易，只是告诉PayPal有个用户一会要支付1000元买手机，你给我生成一个支付链接，我把这个链接给用户，让他去到你网站支付。调用此接口后会返回支付链接和查询此交易的查询链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * PayPal预支付</span><br><span class="line"> *</span><br><span class="line"> * @param command</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public CommonResponse pay(Command command) &#123;</span><br><span class="line">    log.info(&quot;进入PayPal预支付接口&quot;);</span><br><span class="line">    PayResponse payResponse = PayResponse.getResponse();</span><br><span class="line">    payResponse.setNeedTranslate(false);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        PaymentRequest paymentRequest = new PaymentRequest(command, returnUrl, cancelUrl);</span><br><span class="line">        String body = JSON.toJSONString(paymentRequest);</span><br><span class="line">        log.info(&quot;PayPal预支付接口请求参数:&#123;&#125;&quot;, body);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; header = new HashMap&lt;&gt;(16);</span><br><span class="line">        header.put(&quot;PayPal-Request-Id&quot;, command.getSerialNo());</span><br><span class="line">        header.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        header.put(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        header.put(&quot;Authorization&quot;, &quot;Bearer &quot; + payPalToken.getToken());</span><br><span class="line"></span><br><span class="line">        String result = HttpUtil.send(payUrl, header, body);</span><br><span class="line">        log.info(&quot;PayPal响应报文:&#123;&#125;&quot;, result);</span><br><span class="line">        if (StringUtils.isEmpty(result)) &#123;</span><br><span class="line">            throw new SendException(&quot;PayPal响应报文为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line"></span><br><span class="line">        payResponse.setApiUrl(jsonObject.getJSONArray(&quot;links&quot;).getJSONObject(1).getString(&quot;href&quot;));</span><br><span class="line">        payResponse.setChannelSerialNo(jsonObject.getString(&quot;id&quot;));</span><br><span class="line">        payResponse.setTranSt(TranSt.I.getCode());</span><br><span class="line"></span><br><span class="line">        payResponse.setRespData(result);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw new SendException(&quot;请求PayPal预支付接口异常&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.info(&quot;离开PayPal预支付接口&quot;);</span><br><span class="line">    return payResponse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentRequest</code>是一个实体类，和接口文档中的请求json结构一致。<br><code>returnUrl</code>是用户确认付支付后，PayPal向我们商户跳转的连接，PayPal会带有一些参数，同时我们也可以把我们的流水号放进去。<br><code>cancelUrl</code>是用户在paypal界面点击取消付款后，paypal想我们商户跳转的连接。</p><p><code>HttpUtil.java</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLConnection;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/24/18</span><br><span class="line"> */</span><br><span class="line">public final class HttpUtil &#123;</span><br><span class="line"></span><br><span class="line">    private HttpUtil() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发送http请求</span><br><span class="line">     *</span><br><span class="line">     * @param url</span><br><span class="line">     * @param header</span><br><span class="line">     * @param body</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String send(String url, Map&lt;String, String&gt; header, String body) throws Exception &#123;</span><br><span class="line">        StringBuilder result = new StringBuilder();</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            URL realUrl = new URL(url);</span><br><span class="line">            URLConnection conn = realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">            if (header != null) &#123;</span><br><span class="line">                for (String key : header.keySet()) &#123;</span><br><span class="line">                    conn.setRequestProperty(key, header.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            conn.setDoOutput(true);</span><br><span class="line">            conn.setDoInput(true);</span><br><span class="line"></span><br><span class="line">            if (StringUtils.isNotEmpty(body)) &#123;</span><br><span class="line">                out = new PrintWriter(conn.getOutputStream());</span><br><span class="line">                out.print(body);</span><br><span class="line">                out.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = in.readLine()) != null) &#123;</span><br><span class="line">                result.append(line).append(&quot;\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            return result.toString();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw e;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (out != null) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if (in != null) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到此，用户已经拿到了付款连接，可以跳转到paypal进行付款了。</p><p>对应接口文档地址：<a href="https://developer.paypal.com/docs/api/payments/v1/#payment_create" target="_blank" rel="noopener">https://developer.paypal.com/docs/api/payments/v1/#payment_create</a></p><h2 id="六、执行付款"><a href="#六、执行付款" class="headerlink" title="六、执行付款"></a>六、执行付款</h2><p>当用户在paypal界面完成付款后，paypal就会重定向到我们送给他的<code>returnUrl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * PayPal充值成功</span><br><span class="line"> *</span><br><span class="line"> * @param serialNo 流水号</span><br><span class="line"> * @param model</span><br><span class="line"> * @param paymentId</span><br><span class="line"> * @param PayerID</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(&quot;return&quot;)</span><br><span class="line">public String paypalReturn(String serialNo, String paymentId, String PayerID, Model model) &#123;</span><br><span class="line">    // TODO 简单校验， 比如校验一下流水号是不是我们的</span><br><span class="line">    </span><br><span class="line">    // 执行付款</span><br><span class="line">    try &#123;</span><br><span class="line">        String url = executeUrl + &quot;/&quot; + paymentId + &quot;/execute/&quot;;</span><br><span class="line">        Map&lt;String, String&gt; header = new HashMap&lt;&gt;(8);</span><br><span class="line">        header.put(&quot;PayPal-Request-Id&quot;, serialNo);</span><br><span class="line">        header.put(&quot;content-type&quot;, &quot;application/json&quot;);</span><br><span class="line">        header.put(&quot;Authorization&quot;, &quot;Bearer &quot; + payPalToken.getToken());</span><br><span class="line">        result = HttpUtil.send(url, header, &quot;&#123;\&quot;payer_id\&quot;:\&quot;&quot; + payerID + &quot;\&quot;&#125;&quot;);</span><br><span class="line">        log.info(&quot;执行付款响应结果:&#123;&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">        String state = jsonObject.getString(&quot;state&quot;);</span><br><span class="line">        if (&quot;failed&quot;.equals(state)) &#123;</span><br><span class="line">            log.info(&quot;PayPal执行付款失败&quot;);</span><br><span class="line">            // TODO 塞点数据给界面</span><br><span class="line">            return &quot;paypal/failure&quot;;</span><br><span class="line">        &#125; else if (&quot;approved&quot;.equals(state)) &#123;</span><br><span class="line">            log.info(&quot;PayPal执行付款成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;PayPal执行付款异常&quot;, e);</span><br><span class="line">        // TODO 塞点数据给界面</span><br><span class="line">        return &quot;paypal/error&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO 塞点数据给界面</span><br><span class="line">    return &quot;paypal/return&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中executeUrl为：<a href="https://api.sandbox.paypal.com/v1/payments/payment" target="_blank" rel="noopener">https://api.sandbox.paypal.com/v1/payments/payment</a></p><p>注意：不能在此方法内调用商户系统进行发货，因为这个请求可能不是paypal发来的，我们应该是后台通知时再通知商户系统发货。</p><p>对应的接口文档地址：<a href="https://developer.paypal.com/docs/api/payments/v1/#payment_execute" target="_blank" rel="noopener">https://developer.paypal.com/docs/api/payments/v1/#payment_execute</a></p><h2 id="七、后台通知"><a href="#七、后台通知" class="headerlink" title="七、后台通知"></a>七、后台通知</h2><p>可以使用卖家账户登录沙盒环境，点击”卖家习惯设定“ &gt; “收款和管理我的风险” &gt; “即时付款通知”。<br>直达链接：<a href="https://www.sandbox.paypal.com/c2/cgi-bin/webscr?cmd=_profile-display-handler&amp;tab_id=SELLER_PREFERENCES" target="_blank" rel="noopener">https://www.sandbox.paypal.com/c2/cgi-bin/webscr?cmd=_profile-display-handler&amp;tab_id=SELLER_PREFERENCES</a></p><p><img src="/uploads/paypal06.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * PayPal后台通知</span><br><span class="line"> *</span><br><span class="line"> * @param request</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;paypal&quot;)</span><br><span class="line">public void paypal(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">    log.info(&quot;进入PayPal后台通知&quot;);</span><br><span class="line"></span><br><span class="line">    // 获取paypal请求参数,并拼接验证参数</span><br><span class="line">    Enumeration&lt;String&gt; en = request.getParameterNames();</span><br><span class="line">    StringBuilder data = new StringBuilder(&quot;cmd=_notify-validate&quot;);</span><br><span class="line">    while (en.hasMoreElements()) &#123;</span><br><span class="line">        String paramName = en.nextElement();</span><br><span class="line">        String paramValue = request.getParameter(paramName);</span><br><span class="line">        data.append(&quot;&amp;&quot;).append(paramName).append(&quot;=&quot;).append(URLEncoder.encode(paramValue, &quot;UTF-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;收到PayPal通知为：&#123;&#125;&quot;, data);</span><br><span class="line"></span><br><span class="line">    // 校验</span><br><span class="line">    URL u = new URL(checkUrl);</span><br><span class="line">    HttpURLConnection uc = (HttpURLConnection) u.openConnection();</span><br><span class="line">    uc.setRequestMethod(&quot;POST&quot;);</span><br><span class="line">    uc.setDoOutput(true);</span><br><span class="line">    uc.setDoInput(true);</span><br><span class="line">    uc.setUseCaches(false);</span><br><span class="line">    //设置 HTTP 的头信息</span><br><span class="line">    uc.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">    PrintWriter pw = new PrintWriter(uc.getOutputStream());</span><br><span class="line">    pw.println(data.toString());</span><br><span class="line">    pw.close();</span><br><span class="line">    log.info(&quot;已发往PayPal进行回调校验&quot;);</span><br><span class="line"></span><br><span class="line">    // 响应</span><br><span class="line">    BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));</span><br><span class="line">    String result = in.readLine();</span><br><span class="line">    in.close();</span><br><span class="line">    log.info(&quot;收到的交易结果为：&#123;&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">    if (&quot;VERIFIED&quot;.equals(result)) &#123;</span><br><span class="line">        log.info(&quot;验证通过&quot;);</span><br><span class="line">        String serialNo = request.getParameter(&quot;invoice&quot;);</span><br><span class="line">        Command command = commandService.findCommandBySerialNo(serialNo);</span><br><span class="line">        if (command == null) &#123;</span><br><span class="line">            log.info(&quot;PayPal通知流水号不存在:&#123;&#125;&quot;, serialNo);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String status = request.getParameter(&quot;payment_status&quot;);</span><br><span class="line">        if (&quot;Completed&quot;.equals(status)) &#123;</span><br><span class="line">            log.info(&quot;交易成功，通知商户系统发货&quot;);</span><br><span class="line">            boolean success = paymentHelper.notify(command);</span><br><span class="line"></span><br><span class="line">            // 如果不通知成功，交易状态不能更新为成功</span><br><span class="line">            if (success) &#123;</span><br><span class="line">                // 响应落库, 更新交易状态为成功</span><br><span class="line">                payPalTransactionService.processNotice(status, command, data.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.error(&quot;收到非法PayPal通知：&#123;&#125;&quot;, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中checkUrl：<a href="https://www.sandbox.paypal.com/cgi-bin/webscr" target="_blank" rel="noopener">https://www.sandbox.paypal.com/cgi-bin/webscr</a></p><p>对应接口文档地址：<a href="https://www.paypal.com/us/cgi-bin/webscr?cmd=p/acc/ipn-info-outside" target="_blank" rel="noopener">https://www.paypal.com/us/cgi-bin/webscr?cmd=p/acc/ipn-info-outside</a></p><h2 id="八、单笔查询"><a href="#八、单笔查询" class="headerlink" title="八、单笔查询"></a>八、单笔查询</h2><p>如果我们没收到后台通知怎么办？这时候就可以通过单笔查询主动去paypal查询订单状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; header = new HashMap&lt;&gt;(8);</span><br><span class="line">header.put(&quot;Content-Type&quot;, &quot;application/json&quot;);</span><br><span class="line">header.put(&quot;Authorization&quot;, &quot;Bearer &quot; + payPalToken.getToken());</span><br><span class="line"></span><br><span class="line">String result = HttpUtil.send(queryUrl + &quot;/&quot; + paymentId, header, null);</span><br><span class="line">log.info(&quot;查询的响应:&#123;&#125;&quot;, result);</span><br><span class="line"></span><br><span class="line">if (StringUtils.isNotEmpty(result)) &#123;</span><br><span class="line">    log.info(&quot;查询得到结果&quot;);</span><br><span class="line">    JSONObject jsonObject = JSON.parseObject(result);</span><br><span class="line">    String state = jsonObject.getString(&quot;state&quot;);</span><br><span class="line"></span><br><span class="line">    log.info(&quot;交易状态:&#123;&#125;&quot;, state);</span><br><span class="line">    if (&quot;approved&quot;.equals(state)) &#123;</span><br><span class="line">        log.info(&quot;交易成功&quot;);</span><br><span class="line">    &#125; else if (&quot;failed&quot;.equals(respCo)) &#123;</span><br><span class="line">        log.info(&quot;交易失败&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        log.info(&quot;交易处理中&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    log.info(&quot;查询失败&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中queryUrl：<a href="https://api.sandbox.paypal.com/v1/payments/payment" target="_blank" rel="noopener">https://api.sandbox.paypal.com/v1/payments/payment</a><br>paymentId是在预交易接口返回的。</p><p>对应接口文档地址：<a href="https://developer.paypal.com/docs/api/payments/v1/#payment_get" target="_blank" rel="noopener">https://developer.paypal.com/docs/api/payments/v1/#payment_get</a></p><h2 id="九、批量查询"><a href="#九、批量查询" class="headerlink" title="九、批量查询"></a>九、批量查询</h2><p>如果我们需要日终对账，那么就要用到批量查询接口。但是此接口不大符合我的需要，因此我没用这个接口，而是循环使用单笔查询代替的。</p><p>对应接口文档地址：<a href="https://developer.paypal.com/docs/api/payments/v1/#payment_list" target="_blank" rel="noopener">https://developer.paypal.com/docs/api/payments/v1/#payment_list</a></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL查询车手所有赛道的最佳排名</title>
      <link href="/2018/09/14/MySQL%E6%9F%A5%E8%AF%A2%E8%BD%A6%E6%89%8B%E6%89%80%E6%9C%89%E8%B5%9B%E9%81%93%E7%9A%84%E6%9C%80%E4%BD%B3%E6%8E%92%E5%90%8D/"/>
      <url>/2018/09/14/MySQL%E6%9F%A5%E8%AF%A2%E8%BD%A6%E6%89%8B%E6%89%80%E6%9C%89%E8%B5%9B%E9%81%93%E7%9A%84%E6%9C%80%E4%BD%B3%E6%8E%92%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>不相关字段不在此列出</p><h3 id="赛局表"><a href="#赛局表" class="headerlink" title="赛局表"></a>赛局表</h3><ul><li>赛局ID - BIGINT</li><li>赛道 - INTEGER</li></ul><h3 id="成绩表"><a href="#成绩表" class="headerlink" title="成绩表"></a>成绩表</h3><ul><li>赛局ID - BIGINT</li><li>车手 - VARCHAR</li><li>成绩(毫秒) - INTEGER</li></ul><a id="more"></a><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><h3 id="赛局表-1"><a href="#赛局表-1" class="headerlink" title="赛局表"></a>赛局表</h3><table><thead><tr><th>赛局ID</th><th>赛道</th></tr></thead><tbody><tr><td>1</td><td>10</td></tr><tr><td>2</td><td>11</td></tr><tr><td>3</td><td>10</td></tr></tbody></table><h3 id="成绩表-1"><a href="#成绩表-1" class="headerlink" title="成绩表"></a>成绩表</h3><table><thead><tr><th>赛局ID</th><th>车手</th><th>成绩</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>121005</td></tr><tr><td>1</td><td>小红</td><td>120832</td></tr><tr><td>1</td><td>小白</td><td>120511</td></tr><tr><td>2</td><td>小明</td><td>150932</td></tr><tr><td>2</td><td>小白</td><td>151023</td></tr><tr><td>3</td><td>小明</td><td>120732</td></tr><tr><td>3</td><td>小红</td><td>120833</td></tr></tbody></table><p>从表中数据可以看到，小明同学10赛道的最佳排名是第2，在11赛道的最佳排名是第1，所以小明在所有赛道的最佳排名应该是第1。</p><h2 id="分解需求"><a href="#分解需求" class="headerlink" title="分解需求"></a>分解需求</h2><h3 id="1-查询10赛道各车手的最佳成绩"><a href="#1-查询10赛道各车手的最佳成绩" class="headerlink" title="1. 查询10赛道各车手的最佳成绩"></a>1. 查询10赛道各车手的最佳成绩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">FROM 成绩表 a, 赛局表 b</span><br><span class="line">WHERE a.赛局ID = b.赛局ID</span><br><span class="line">  AND b.赛道 = 10</span><br><span class="line">GROUP BY a.车手</span><br><span class="line">ORDER BY 成绩 ASC</span><br></pre></td></tr></table></figure><p>为什么group by 车手？<br>因为一个车手在一个赛道中可能跑了N多个成绩，我们只取最好的那个成绩。</p><h3 id="2-查询10赛道各车手的排名"><a href="#2-查询10赛道各车手的排名" class="headerlink" title="2. 查询10赛道各车手的排名"></a>2. 查询10赛道各车手的排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  @排名 := @排名 + 1 AS 排名,</span><br><span class="line">  c.赛道,</span><br><span class="line">  c.车手,</span><br><span class="line">  c.成绩</span><br><span class="line">FROM</span><br><span class="line">  (</span><br><span class="line">    SELECT</span><br><span class="line">      b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">    FROM 成绩表 a, 赛局表 b</span><br><span class="line">    WHERE a.赛局ID = b.赛局ID</span><br><span class="line">          AND b.赛道 = 10</span><br><span class="line">    GROUP BY a.车手</span><br><span class="line">    ORDER BY 成绩 ASC</span><br><span class="line">  ) c, (SELECT @排名 := 1) d</span><br></pre></td></tr></table></figure><p>在MySQL中，@变量名 := 值，是一个赋值语句。</p><h3 id="3-查询所有赛道各车手的最佳成绩"><a href="#3-查询所有赛道各车手的最佳成绩" class="headerlink" title="3. 查询所有赛道各车手的最佳成绩"></a>3. 查询所有赛道各车手的最佳成绩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">FROM 成绩表 a, 赛局表 b</span><br><span class="line">WHERE a.赛局ID = b.赛局ID</span><br><span class="line">      AND b.赛道 = 10</span><br><span class="line">GROUP BY a.车手, b.赛道</span><br><span class="line">ORDER BY b.赛道 ASC, 成绩 ASC</span><br></pre></td></tr></table></figure><h3 id="4-查询所有赛道各车手的排名"><a href="#4-查询所有赛道各车手的排名" class="headerlink" title="4. 查询所有赛道各车手的排名"></a>4. 查询所有赛道各车手的排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  if(@上一个赛道 = c.赛道, @排名 := @排名 + 1, @排名 := 1) AS 排名,</span><br><span class="line">  (@上一个赛道 := c.赛道) AS 赛道,</span><br><span class="line">  c.车手,</span><br><span class="line">  c.成绩</span><br><span class="line">FROM</span><br><span class="line">  (</span><br><span class="line">    SELECT</span><br><span class="line">      b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">    FROM 成绩表 a, 赛局表 b</span><br><span class="line">    WHERE a.赛局ID = b.赛局ID</span><br><span class="line">          AND b.赛道 = 10</span><br><span class="line">    GROUP BY a.车手, b.赛道</span><br><span class="line">    ORDER BY b.赛道 ASC, 成绩 ASC</span><br><span class="line">  ) c, (SELECT @排名 := 1, @上一个赛道 := 0) d</span><br></pre></td></tr></table></figure><p>变量@上一个赛道的作用是：当变换赛道时排名要从1重新计算。</p><h3 id="5-只查询小明所有赛道的排名"><a href="#5-只查询小明所有赛道的排名" class="headerlink" title="5. 只查询小明所有赛道的排名"></a>5. 只查询小明所有赛道的排名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  if(@上一个赛道 = c.赛道, @排名 := @排名 + 1, @排名 := 1) AS 排名,</span><br><span class="line">  (@上一个赛道 := c.赛道) AS 赛道,</span><br><span class="line">  c.车手,</span><br><span class="line">  c.成绩</span><br><span class="line">FROM</span><br><span class="line">  (</span><br><span class="line">    SELECT</span><br><span class="line">      b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">    FROM 成绩表 a, 赛局表 b</span><br><span class="line">    WHERE a.赛局ID = b.赛局ID</span><br><span class="line">          AND b.赛道 = 10</span><br><span class="line">    GROUP BY a.车手, b.赛道</span><br><span class="line">    ORDER BY b.赛道 ASC, 成绩 ASC</span><br><span class="line">  ) c, (SELECT @排名 := 1, @上一个赛道 := 0) d</span><br><span class="line">WHERE c.车手 = &apos;小明&apos;</span><br></pre></td></tr></table></figure><h3 id="6-查询小明所有赛道的最佳排名（目标达到）"><a href="#6-查询小明所有赛道的最佳排名（目标达到）" class="headerlink" title="6. 查询小明所有赛道的最佳排名（目标达到）"></a>6. 查询小明所有赛道的最佳排名（目标达到）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  if(@上一个赛道 = c.赛道, @排名 := @排名 + 1, @排名 := 1) AS 排名,</span><br><span class="line">  (@上一个赛道 := c.赛道) AS 赛道,</span><br><span class="line">  c.车手,</span><br><span class="line">  c.成绩</span><br><span class="line">FROM</span><br><span class="line">  (</span><br><span class="line">    SELECT</span><br><span class="line">      b.赛道, a.车手, min(a.成绩) AS 成绩</span><br><span class="line">    FROM 成绩表 a, 赛局表 b</span><br><span class="line">    WHERE a.赛局ID = b.赛局ID</span><br><span class="line">          AND b.赛道 = 10</span><br><span class="line">    GROUP BY a.车手, b.赛道</span><br><span class="line">    ORDER BY b.赛道 ASC, 成绩 ASC</span><br><span class="line">  ) c, (SELECT @排名 := 1, @上一个赛道 := 0) d</span><br><span class="line">WHERE c.车手 = &apos;小明&apos;</span><br><span class="line">ORDER BY 排名 ASC</span><br><span class="line">LIMIT 1</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>赛局表的赛道字段需要加个索引，成绩表的成绩字段需要加个索引，车手字段不需要加索引。</p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu安装及配置系列-gitlab的安装配置.md</title>
      <link href="/2018/09/02/Ubuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-gitlab%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/09/02/Ubuntu%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-gitlab%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><h2 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl start</span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><h2 id="修改root的默认密码"><a href="#修改root的默认密码" class="headerlink" title="修改root的默认密码"></a>修改root的默认密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console production</span><br><span class="line">&gt; user = User.where(id: 1).first</span><br><span class="line">&gt; user.password=12345678</span><br><span class="line">&gt; user.password_confirmation=12345678</span><br><span class="line">&gt; user.save!</span><br><span class="line">&gt; quit</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a></p>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>性能测试工具jmeter</title>
      <link href="/2018/08/28/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter/"/>
      <url>/2018/08/28/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7jmeter/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。 它可以用于测试静态和动态资源，例如静态文件、Java 小服务程序、CGI 脚本、Java 对象、数据库、FTP 服务器， 等等。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。另外，JMeter能够对应用程序做功能/回归测试，通过创建带有断言的脚本来验证你的程序返回了你期望的结果。为了最大限度的灵活性，JMeter允许使用正则表达式创建断言。<br>Apache jmeter 可以用于对静态的和动态的资源（文件，Servlet，Perl脚本，java 对象，数据库和查询，FTP服务器等等）的性能进行测试。它可以用于对服务器、网络或对象模拟繁重的负载来测试它们的强度或分析不同压力类型下的整体性能。你可以使用它做性能的图形分析或在大并发负载测试你的服务器/脚本/对象。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>能够对HTTP和FTP服务器进行压力和性能测试， 也可以对任何数据库进行同样的测试（通过JDBC）。</li><li>完全的可移植性和100% 纯java。</li><li>完全 Swing 和轻量组件支持（预编译的JAR使用 javax.swing.*)包。</li><li>完全多线程 框架允许通过多个线程并发取样和 通过单独的线程组对不同的功能同时取样。</li><li>精心的GUI设计允许快速操作和更精确的计时。</li><li>缓存和离线分析/回放测试结果。</li></ol><a id="more"></a><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>Label： 定义的HTTP请求名称</li><li>Samples： 表示这次测试中一共发出了多少个请求</li><li>Average： 访问页面的平均响应时间</li><li>Min: 访问页面的最小响应时间</li><li>Max: 访问页面的最大响应时间</li><li>Error%： 错误的请求的数量/请求的总数</li><li>Throughput：每秒完成的请求数</li><li>KB/Sec： 每秒从服务器端接收到的数据量</li></ol><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><p>解压下载的安装包，可以在bin目录下找到启动命令<code>jmeter.sh</code>或<code>jmeter.bat</code>，运行启动命令即可启动。</p><p>启动界面如下图：<br><img src="/uploads/jmeter-01.png" alt=""></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>比如我们有一个接口需要压测。接口是http协议，post请求，地址是<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a>, 参数为”username=admin&amp;password=123456”</p><h3 id="创建测试计划"><a href="#创建测试计划" class="headerlink" title="创建测试计划"></a>创建测试计划</h3><p><img src="/uploads/jmeter-02.png" alt=""></p><h3 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h3><p><img src="/uploads/jmeter-03.png" alt=""><br><img src="/uploads/jmeter-04.png" alt=""></p><h3 id="创建请求"><a href="#创建请求" class="headerlink" title="创建请求"></a>创建请求</h3><p><img src="/uploads/jmeter-05.png" alt=""><br><img src="/uploads/jmeter-06.png" alt=""></p><p>到这里我们已经可以运行刚刚创建的请求了，但是对于请求结果及分析我们还没地方观察，因此我们还需要创建一些监听器，用于观察及分析结果。</p><h3 id="观察结果树"><a href="#观察结果树" class="headerlink" title="观察结果树"></a>观察结果树</h3><p><img src="/uploads/jmeter-07.png" alt=""><br><img src="/uploads/jmeter-08.png" alt=""></p><h3 id="聚合报告"><a href="#聚合报告" class="headerlink" title="聚合报告"></a>聚合报告</h3><p><img src="/uploads/jmeter-09.png" alt=""><br><img src="/uploads/jmeter-10.png" alt=""></p><p>至此一个简单的压测就搭建好了，可以运行一下试试了，运行之后就可以在观察结果数和聚合报告中查看、分析接口性能了。</p><p><img src="/uploads/jmeter-11.png" alt=""><br><img src="/uploads/jmeter-12.png" alt=""></p><p>更多高级用法请自行研究。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>集群中关于会话信息的解决方案</title>
      <link href="/2018/08/16/%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BC%9A%E8%AF%9D%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/08/16/%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BC%9A%E8%AF%9D%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="一般有三种解决方案"><a href="#一般有三种解决方案" class="headerlink" title="一般有三种解决方案"></a>一般有三种解决方案</h2><ol><li>IP分流</li><li>会话复制</li><li>会话共享（推荐）</li></ol><h2 id="IP分流"><a href="#IP分流" class="headerlink" title="IP分流"></a>IP分流</h2><p>这个技术我曾经在我的个人博客中用过，简单方便。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>服务端代码不用变</li><li>Nginx只需要加个ip_hash的配置</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>会破坏Nginx的负载均衡</li><li>当某个服务器挂了的时候，服务器所在用户也会退出登录状态</li><li>服务器重启时，用户需要重新登录</li></ul><a id="more"></a><h2 id="会话复制"><a href="#会话复制" class="headerlink" title="会话复制"></a>会话复制</h2><p>这个我没用过，据说就是把session在所有服务器上都复制一份，且服务器数量太多时容易出问题，由于没用过，暂不讨论。</p><h2 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h2><p>既然是共享，共享到哪？当然是共享到redis了。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>实现麻烦</li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>不会破坏负载均衡</li><li>没有服务器节点的数量限制</li></ul><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><img src="/uploads/redis-session-1.png" alt=""></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><ol><li>生成一个定长的随机字符串作为JSESSIONID，当然了，随机字符串并不能保证唯一，所以在后面再加一个自增的数字，这个自增的数字可以放在redis中</li><li>用JSESSIONID作为key，用户信息作为value，有效期30分钟，存入redis</li><li>像客户浏览器中写入cookie，其key为“JSESSIONID”，value为JSESSIONID的值。</li></ol><h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><ol><li>从请求中找出key=“JSESSIONID”的cookie，用它的值作为key去redis中查找用户的登录信息。</li></ol><h3 id="验证码等用户零时信息"><a href="#验证码等用户零时信息" class="headerlink" title="验证码等用户零时信息"></a>验证码等用户零时信息</h3><ol><li>生成验证码</li><li>从请求中找出key=“JSESSIONID”的cookie，其实就是JSESSIONID</li><li>把验证码放入redis，他的key=JSESSIONID + “:code”，最好设置有效期</li></ol><h2 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码"></a>校验验证码</h2><ol><li>从请求中找出key=“JSESSIONID”的cookie，其实就是JSESSIONID</li><li>从redis中找出验证码，key=JSESSIONID + “:code”</li><li>用过之后删除redis中的验证码</li></ol>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot完美集成Freemarker</title>
      <link href="/2018/08/06/SpringBoot%E5%AE%8C%E7%BE%8E%E9%9B%86%E6%88%90Freemarker/"/>
      <url>/2018/08/06/SpringBoot%E5%AE%8C%E7%BE%8E%E9%9B%86%E6%88%90Freemarker/</url>
      <content type="html"><![CDATA[<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--freemarker--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.kangyonggan&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;freemarker&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其中<code>com.kangyonggan.freemarker</code>是我发布到中央仓库的一个jar。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>application.yml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  freemarker:</span><br><span class="line">    settings:</span><br><span class="line">      auto_import: common.ftl as c</span><br></pre></td></tr></table></figure></p><p>spring-boot是很讲究零配置的，所以Freemarker大部分配置都已经被默认配置好了，完美只需要配置一些自定义的即可，如上面的配置，我想配置一个自动导入（通用）模板。</p><h2 id="集成、覆写等"><a href="#集成、覆写等" class="headerlink" title="集成、覆写等"></a>集成、覆写等</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.ck.config;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.freemarker.BlockDirective;</span><br><span class="line">import com.kangyonggan.freemarker.ExtendsDirective;</span><br><span class="line">import com.kangyonggan.freemarker.OverrideDirective;</span><br><span class="line">import com.kangyonggan.freemarker.SuperDirective;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 8/6/18</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class FreemarkerConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    freemarker.template.Configuration configuration;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void setSharedVariable() &#123;</span><br><span class="line">        configuration.setSharedVariable(&quot;block&quot;, new BlockDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;override&quot;, new OverrideDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;extends&quot;, new ExtendsDirective());</span><br><span class="line">        configuration.setSharedVariable(&quot;super&quot;, new SuperDirective());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候就可以在模板中使用<code>&lt;#include &quot;footer.ftl&quot;/&gt;</code>、<code>&lt;@block name=&quot;main&quot;/&gt;</code>、<code>&lt;@extends name=&quot;layout.ftl&quot;/&gt;</code>指令了。</p><h2 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h2><p>当我们修改了ftl界面内容后，springboot默认是不会进行热加载的，我们需要对idea动手脚。  </p><p><img src="/uploads/freemarker-01.png" alt=""></p><p><img src="/uploads/freemarker-02.png" alt=""></p><p><img src="/uploads/freemarker-03.png" alt=""></p><p>当配置好这两个之后，修改ftl保存之后，刷新界面就会加载了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用Spring配置多数据源</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8Spring%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      <content type="html"><![CDATA[<h2 id="两个dataSources"><a href="#两个dataSources" class="headerlink" title="两个dataSources"></a>两个dataSources</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置dbcp数据源 - dev --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSourceDev&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;ehelper.jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;ehelper.jdbc.url.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;ehelper.jdbc.username.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;ehelper.jdbc.password.dev&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minIdle&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxActive&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="line">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot; &gt;&lt;/property&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">    &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置dbcp数据源 - uat --&gt;</span><br><span class="line">&lt;bean id=&quot;dataSourceUat&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><br><span class="line">      destroy-method=&quot;close&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;ehelper.jdbc.driver&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;$&#123;ehelper.jdbc.url.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;$&#123;ehelper.jdbc.username.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;ehelper.jdbc.password.uat&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">    &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;minIdle&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxActive&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="line">    &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">    &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">    &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot; &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot; &gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">    &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot; &gt;&lt;/property&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">    &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; &gt;&lt;/property&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="MultiDataSource"><a href="#MultiDataSource" class="headerlink" title="MultiDataSource"></a>MultiDataSource</h2><p>需要自己实现数据源路由， 继承AbstractRoutingDataSource，覆写determineCurrentLookupKey方法即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.util;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 多数据源</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">public class MultiDataSource extends AbstractRoutingDataSource &#123;</span><br><span class="line"></span><br><span class="line">    private static final ThreadLocal&lt;String&gt; dataSourceKey = new InheritableThreadLocal();</span><br><span class="line"></span><br><span class="line">    public static void setDataSource(DataSource dataSource) &#123;</span><br><span class="line">        dataSourceKey.set(dataSource.name());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Object determineCurrentLookupKey() &#123;</span><br><span class="line">        return dataSourceKey.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中DataSource是个枚举：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.model.constants;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">public enum DataSource &#123;</span><br><span class="line">    DEV, UAT;</span><br><span class="line"></span><br><span class="line">    public static DataSource getDataSource(String name) &#123;</span><br><span class="line">        for (DataSource dataSource : DataSource.values()) &#123;</span><br><span class="line">            if (dataSource.name().equalsIgnoreCase(name)) &#123;</span><br><span class="line">                return dataSource;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return DataSource.DEV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sqlSessionFactory"><a href="#sqlSessionFactory" class="headerlink" title="sqlSessionFactory"></a>sqlSessionFactory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 创建SqlSessionFactory，同时指定数据源 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;multiDataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.shhxzq.fin.ehelper.model.vo&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;plugins&quot;&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;bean class=&quot;com.github.pagehelper.PageHelper&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;properties&quot;&gt;</span><br><span class="line">                    &lt;value&gt;</span><br><span class="line">                        dialect=mysql</span><br><span class="line">                    &lt;/value&gt;</span><br><span class="line">                &lt;/property&gt;</span><br><span class="line">            &lt;/bean&gt;</span><br><span class="line">        &lt;/array&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="sqlSession"><a href="#sqlSession" class="headerlink" title="sqlSession"></a>sqlSession</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SQLSession模板 --&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionTemplate&quot; scope=&quot;prototype&quot;&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/constructor&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用JDBC事务 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;multiDataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionAdvice"><a href="#transactionAdvice" class="headerlink" title="transactionAdvice"></a>transactionAdvice</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- AOP配置事物 --&gt;</span><br><span class="line">&lt;tx:advice id=&quot;transactionAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;remove*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;send*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tx:method name=&quot;search*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><h2 id="transactionPointcut"><a href="#transactionPointcut" class="headerlink" title="transactionPointcut"></a>transactionPointcut</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置AOP切面 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--切点，用于事务--&gt;</span><br><span class="line">    &lt;aop:pointcut id=&quot;transactionPointcut&quot;</span><br><span class="line">                  expression=&quot;execution(* com.shhxzq.fin.ehelper.biz.service.impl.transaction..*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--事物切面--&gt;</span><br><span class="line">    &lt;aop:advisor pointcut-ref=&quot;transactionPointcut&quot; advice-ref=&quot;transactionAdvice&quot;&gt;&lt;/aop:advisor&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>原本我是想在spring初始化bean的时候就指定数据源，这样的话事务就不会和数据源打架，我想到的方案是，给不同的包指定不同的数据源，但是这样会带来一个问题，就是会冗余代码。</p><p>比如dev环境和uat环境的service分别放在dev和uat包下，再分别给dev包河uat包指定dev的数据源和uat的数据源。</p><p>引发的问题：dev和uat业务逻辑一样，仅数据源不一样，但是却有两份代码！冗余还是小事，以后维护才是大事，所以此方案果断排除。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>在调用方法的时候传入一个参数，指定调用哪个数据源，这样代码就没冗余的地方了，但是会带来一个问题。</p><p>就是需要修改老代码，在参数中增加一个参数，然后在方法中指定数据源，在方法中指定数据源可以使用注解和切面完成，但不可避面的还是要增加一个参数。</p><p>如果不增加一个参数，而是在注解中加参数呢？我也这么想过，但是这样的话，这个方法就只能使用固定的数据源了，达不到动态的效果。</p><p>进一步分析，如果在注解中加参数，另外再多写一个方法指定为另一个数据源呢？显然是不可取的，方法冗余，维护困难，如果再次增加数据源还得再加一个方法。</p><p>所以，最后我还是选择了使用【传参+注解】的方案，没办法，要想动态切换数据源，你总的告诉方法你要用哪个数据源吧，怎么告诉他？传参是最好途径了，并且扩展性强。下面是我具体实现代码。</p><h2 id="DataSourceSwitch"><a href="#DataSourceSwitch" class="headerlink" title="DataSourceSwitch"></a>DataSourceSwitch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.model.annotation;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在方法上加此注解，会使用第一个参数即DataSource枚举切换数据源</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/12/8</span><br><span class="line"> */</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface DataSourceSwitch &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DataSourceAop"><a href="#DataSourceAop" class="headerlink" title="DataSourceAop"></a>DataSourceAop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.aop;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.biz.util.MultiDataSource;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.Around;</span><br><span class="line">import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">import org.aspectj.lang.annotation.Pointcut;</span><br><span class="line">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">public class DataSourceAop &#123;</span><br><span class="line"></span><br><span class="line">    @Pointcut(&quot;execution(* com.shhxzq.fin.ehelper.biz.service.impl..*.*(..))&quot;)</span><br><span class="line">    public void pointcut() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    @Around(&quot;pointcut()&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        Object args[] = joinPoint.getArgs();</span><br><span class="line">        Class clazz = joinPoint.getTarget().getClass();</span><br><span class="line"></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());</span><br><span class="line"></span><br><span class="line">        DataSourceSwitch dataSourceSwitch = method.getAnnotation(DataSourceSwitch.class);</span><br><span class="line">        if (dataSourceSwitch != null) &#123;</span><br><span class="line">            log.info(&quot;使用指定的数据源.&quot;);</span><br><span class="line">            if (args.length &gt; 0) &#123;</span><br><span class="line">                Object obj = args[0];</span><br><span class="line">                if (obj instanceof DataSource) &#123;</span><br><span class="line">                    DataSource dataSource = (DataSource) obj;</span><br><span class="line">                    MultiDataSource.setDataSource(dataSource);</span><br><span class="line">                    log.info(&quot;数据源：&#123;&#125;&quot;, dataSource.name());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    log.info(&quot;第一个参数不是DataSource枚举，所以仍然使用默认数据源.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                log.info(&quot;第一个参数不是DataSource枚举，所以仍然使用默认数据源.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            log.info(&quot;使用默认数据源.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return joinPoint.proceed(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BeCommandServiceImpl"><a href="#BeCommandServiceImpl" class="headerlink" title="BeCommandServiceImpl"></a>BeCommandServiceImpl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.shhxzq.fin.ehelper.biz.service.impl;</span><br><span class="line"></span><br><span class="line">import com.shhxzq.fin.ehelper.biz.service.BeCommandService;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.DataSourceSwitch;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.annotation.LogTime;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.constants.DataSource;</span><br><span class="line">import com.shhxzq.fin.ehelper.model.vo.BeCommand;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/28/17</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class BeCommandServiceImpl extends BaseService&lt;BeCommand&gt; implements BeCommandService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @LogTime</span><br><span class="line">    @DataSourceSwitch</span><br><span class="line">    public BeCommand findBeCommandBySerialNo(DataSource dataSource, String serialNo) &#123;</span><br><span class="line">        BeCommand beCommand = new BeCommand();</span><br><span class="line">        beCommand.setSerialNo(serialNo);</span><br><span class="line"></span><br><span class="line">        return super.selectOne(beCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>另外我还遇到了一个问题，那就是事务和多数据源打架了，我的解决方案是把它们两个分开。但也不是太好，先这样吧，以后再研究。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Log4j2的Rewrite过滤敏感信息</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8Log4j2%E7%9A%84Rewrite%E8%BF%87%E6%BB%A4%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8Log4j2%E7%9A%84Rewrite%E8%BF%87%E6%BB%A4%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h2 id="摸索过程"><a href="#摸索过程" class="headerlink" title="摸索过程"></a>摸索过程</h2><p>查看官方文档<a href="https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.0/manual/appenders.html#RewriteAppender</a>，官方文档中虽然有所介绍，但是没给demo，百度谷歌都很难查到此类文章，所有配置起来有一定难度。</p><a id="more"></a><h3 id="pom-xml的配置"><a href="#pom-xml的配置" class="headerlink" title="pom.xml的配置"></a>pom.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j2-rewrite&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;log4j2.api.version&gt;2.8.2&lt;/log4j2.api.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Log4j2--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="log4j2-xml的配置"><a href="#log4j2-xml的配置" class="headerlink" title="log4j2.xml的配置"></a>log4j2.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;warn&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Rewrite name=&quot;Rewrite&quot;&gt;</span><br><span class="line">            &lt;MyRewritePolicy&gt;&lt;/MyRewritePolicy&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Rewrite&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;info&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Rewrite&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>其中MyRewritePolicy是我自定义的，它实现了RewritePolicy接口，同时需要实现一个方法public LogEvent rewrite(final LogEvent event)</p><h3 id="MyRewritePolicy-java的实现"><a href="#MyRewritePolicy-java的实现" class="headerlink" title="MyRewritePolicy.java的实现"></a>MyRewritePolicy.java的实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小测一下"><a href="#小测一下" class="headerlink" title="小测一下"></a>小测一下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LogManager.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        logger.info(&quot;手机号:&#123;&#125;&quot;, &quot;15121149571&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2017-04-24 23:35:04,827 main ERROR Unable to invoke factory method in class class com.kangyonggan.demo.MyRewritePolicy for element MyRewritePolicy. java.lang.IllegalStateException: No factory method found for class com.kangyonggan.demo.MyRewritePolicy</span><br><span class="line">at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.findFactoryMethod(PluginBuilder.java:224)</span><br><span class="line">at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:130)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:952)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:892)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:884)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:508)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:232)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:244)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:545)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:617)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:634)</span><br><span class="line">at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:229)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:152)</span><br><span class="line">at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:45)</span><br><span class="line">at org.apache.logging.log4j.LogManager.getContext(LogManager.java:194)</span><br><span class="line">at org.apache.logging.log4j.LogManager.getLogger(LogManager.java:551)</span><br><span class="line">at com.kangyonggan.demo.Test.&lt;clinit&gt;(Test.java:12)</span><br><span class="line"></span><br><span class="line">[INFO ] 2017-04-24 23:35:04.884 [com.kangyonggan.demo.Test.main:15] - 手机号:15121149571</span><br></pre></td></tr></table></figure><p>从报错信息中可以看出：没有工厂方法（No factory method found）。<br>还提到了org.apache.logging.log4j.core.config.plugins这个包下面的插件。<br>所以去这个包下面看一下相关的插件：</p><p><img src="/uploads/log4j2-rewrite-01.png" alt="plugin"></p><p>果然看到了factory相关的plugin，并且PluginFactory是作用在method上的。</p><h3 id="使用-PluginFactory注解"><a href="#使用-PluginFactory注解" class="headerlink" title="使用@PluginFactory注解"></a>使用@PluginFactory注解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.PluginFactory;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static void factory() &#123;</span><br><span class="line">        System.out.println(&quot;factory&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次运行后没有报错了，也打印了“factory”，但是rewrite方法没被执行。</p><p>仔细一想，这既然是工厂方法，一定是为了创建对象的，所以再次修改如下。</p><h3 id="PluginFactory返回自定义的实例"><a href="#PluginFactory返回自定义的实例" class="headerlink" title="PluginFactory返回自定义的实例"></a>PluginFactory返回自定义的实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.logging.log4j.core.LogEvent;</span><br><span class="line">import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;</span><br><span class="line">import org.apache.logging.log4j.core.config.plugins.PluginFactory;</span><br><span class="line">import org.apache.logging.log4j.core.impl.Log4jLogEvent;</span><br><span class="line">import org.apache.logging.log4j.message.SimpleMessage;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/4/24 0024</span><br><span class="line"> */</span><br><span class="line">public final class MyRewritePolicy implements RewritePolicy &#123;</span><br><span class="line"></span><br><span class="line">    public LogEvent rewrite(final LogEvent event) &#123;</span><br><span class="line">        String message = event.getMessage().getFormattedMessage();</span><br><span class="line">        // 处理日志的逻辑</span><br><span class="line">        message = &quot;处理后的日志: &quot; + message;</span><br><span class="line"></span><br><span class="line">        SimpleMessage simpleMessage = new SimpleMessage(message);</span><br><span class="line">        LogEvent result = new Log4jLogEvent(event.getLoggerName(), event.getMarker(),</span><br><span class="line">                event.getLoggerFqcn(), event.getLevel(), simpleMessage,</span><br><span class="line">                event.getThrown(), event.getContextMap(), event.getContextStack(),</span><br><span class="line">                event.getThreadName(), event.getSource(), event.getTimeMillis());</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PluginFactory</span><br><span class="line">    public static MyRewritePolicy factory() &#123;</span><br><span class="line">        System.out.println(&quot;factory&quot;);</span><br><span class="line">        return new MyRewritePolicy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此运行后发现成功了！</p><h3 id="完整log4j2-xml的配置"><a href="#完整log4j2-xml的配置" class="headerlink" title="完整log4j2.xml的配置"></a>完整log4j2.xml的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;AllFile&quot; fileName=&quot;$&#123;dfjz.log4j2.home&#125;/all.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;dfjz.log4j2.home&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;dfjz.log4j2.home&#125;/error.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;dfjz.log4j2.home&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line"></span><br><span class="line">        &lt;SMTP name=&quot;Mail&quot; subject=&quot;$&#123;dfjz.app.name&#125; - 报警通知&quot; to=&quot;$&#123;dfjz.mail.receiver&#125;&quot; from=&quot;$&#123;dfjz.mail.username&#125;&quot;</span><br><span class="line">              smtpHost=&quot;$&#123;dfjz.mail.host&#125;&quot; smtpUsername=&quot;$&#123;dfjz.mail.username&#125;&quot; smtpPassword=&quot;$&#123;dfjz.mail.password&#125;&quot; bufferSize=&quot;$&#123;dfjz.mail.bufferSize&#125;&quot; &gt;</span><br><span class="line">        &lt;/SMTP&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncAll&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AllFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncError&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ErrorFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Mail&quot; &gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Rewrite name=&quot;Rewrite&quot;&gt;</span><br><span class="line">            &lt;MyRewritePolicy&gt;&lt;/MyRewritePolicy&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Rewrite&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Rewrite&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>用以上配置就已经可以解决我们项目中的所有需求了，不对，还漏了一个，就是普通日志只打印info级别的，sql需要打印debug级别的。</p><h3 id="打印debug级别的SQL"><a href="#打印debug级别的SQL" class="headerlink" title="打印debug级别的SQL"></a>打印debug级别的SQL</h3><p>请参考我的另一篇文章<a href="https://kangyonggan.com/#article/41">使用Log4j2让项目输出info级别的日志和debug级别的sql</a></p><blockquote><p>觉得不错就赏点吧，你的支持是我进步的动力！</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud02-Eureka</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud02-Eureka/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud02-Eureka/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/forezp/article/details/70148833/" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70148833/</a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>搭建一个集群，包括服务注册、服务发现和负载均衡等。</p><h2 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h2><ol><li>创建一个注册中心<code>eureka-server</code></li><li>创建两个服务提供者<code>eureka-provider1</code>、<code>eureka-provider2</code></li><li>创建一个服务消费者<code>eureka-consumer</code></li></ol><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>创建一个maven项目<code>eureka-server</code>。</p><a id="more"></a><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # registerWithEureka: false 和 fetchRegistry: false 表明自己是一个eureka server.</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个简单的注册中心，启动后访问：<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a>, 可以看到注册中心的界面。</p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>创建一个maven项目<code>eureka-provider1</code>。</p><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml-1"><a href="#application-yml-1" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8762</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-hi</span><br></pre></td></tr></table></figure><h3 id="Application-java-1"><a href="#Application-java-1" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@RestController</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">    String port;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hi&quot;)</span><br><span class="line">    public String hi(@RequestParam String name) &#123;</span><br><span class="line">        return &quot;hi &quot;   name   &quot;,i am from port:&quot;   port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个maven项目<code>eureka-provider2</code>。代码和<code>eureka-provider1</code>一样，只不过端口改为<code>8763</code>。</p><p>启动项目后再次访问:<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a>，就可以看到<code>Instances currently registered with Eureka</code>下面已经有这两个服务了，由于这两个服务的Application Name一样，就形成了集群。</p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>创建一个maven项目<code>eureka-consumer</code>。</p><h3 id="pom-xml-2"><a href="#pom-xml-2" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml-2"><a href="#application-yml-2" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8764</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-ribbon</span><br></pre></td></tr></table></figure><h3 id="Application-java-2"><a href="#Application-java-2" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HelloService-java"><a href="#HelloService-java" class="headerlink" title="HelloService.java"></a>HelloService.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/20/18</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class HelloService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    public String hiService(String name) &#123;</span><br><span class="line">        return restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;   name, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HelloControler-java"><a href="#HelloControler-java" class="headerlink" title="HelloControler.java"></a>HelloControler.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/20/18</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class HelloControler &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hi&quot;)</span><br><span class="line">    public String hi(@RequestParam String name) &#123;</span><br><span class="line">        return helloService.hiService(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后访问<a href="http://localhost:8764/hi?name=小新" target="_blank" rel="noopener">http://localhost:8764/hi?name=小新</a>。不停的访问，界面会交替显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hi 小新,i am from port:8762</span><br><span class="line">hi 小新,i am from port:8763</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （二）</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote><p>本例代码：<a href="https://github.com/kangyonggan/acti-01.git" target="_blank" rel="noopener">https://github.com/kangyonggan/acti-01.git</a></p></blockquote><h2 id="一、创建一个流程引擎ProcessEngine"><a href="#一、创建一个流程引擎ProcessEngine" class="headerlink" title="一、创建一个流程引擎ProcessEngine"></a>一、创建一个流程引擎<code>ProcessEngine</code></h2><h3 id="1-1-添加Maven依赖"><a href="#1-1-添加Maven依赖" class="headerlink" title="1.1 添加Maven依赖"></a>1.1 添加Maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;activiti.version&gt;6.0.0&lt;/activiti.version&gt;</span><br><span class="line">&lt;mysql.version&gt;5.1.34&lt;/mysql.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!--activiti--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-engine&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2-创建流程引擎"><a href="#1-2-创建流程引擎" class="headerlink" title="1.2 创建流程引擎"></a>1.2 创建流程引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngineConfiguration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ProcessEngineConfiguration cfg = ProcessEngineConfiguration</span><br><span class="line">            .createStandaloneProcessEngineConfiguration()</span><br><span class="line">            .setJdbcDriver(&quot;com.mysql.jdbc.Driver&quot;)</span><br><span class="line">            .setJdbcUrl(&quot;jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8&quot;)</span><br><span class="line">            .setJdbcUsername(&quot;root&quot;)</span><br><span class="line">            .setJdbcPassword(&quot;123456&quot;)</span><br><span class="line">            .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class="line">        System.out.println(processEngine.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者把jdbc的连接信息写入配置文件，如下：</p><h3 id="1-3-添加配置activiti-cfg-xml"><a href="#1-3-添加配置activiti-cfg-xml" class="headerlink" title="1.3 添加配置activiti.cfg.xml"></a>1.3 添加配置<code>activiti.cfg.xml</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcPassword&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-使用配置文件创建流程引擎"><a href="#1-4-使用配置文件创建流程引擎" class="headerlink" title="1.4 使用配置文件创建流程引擎"></a>1.4 使用配置文件创建流程引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngineConfiguration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ProcessEngineConfiguration cfg = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;);</span><br><span class="line">        ProcessEngine processEngine = cfg.buildProcessEngine();</span><br><span class="line">        System.out.println(processEngine.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出：<code>default</code></p><h2 id="二、集成到Spring"><a href="#二、集成到Spring" class="headerlink" title="二、集成到Spring"></a>二、集成到Spring</h2><h3 id="2-1-添加Maven依赖"><a href="#2-1-添加Maven依赖" class="headerlink" title="2.1 添加Maven依赖"></a>2.1 添加Maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">&lt;junit.version&gt;4.11&lt;/junit.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!--activiti--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.activiti&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;activiti-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;activiti.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--spring--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        </span><br><span class="line">&lt;!--junit--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-添加配置activiti-cfg-xml"><a href="#2-2-添加配置activiti-cfg-xml" class="headerlink" title="2.2 添加配置activiti.cfg.xml"></a>2.2 添加配置<code>activiti.cfg.xml</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcPassword&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-Junit测试代码"><a href="#2-3-Junit测试代码" class="headerlink" title="2.3 Junit测试代码"></a>2.3 Junit测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo03 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test01() &#123;</span><br><span class="line">        System.out.println(processEngine.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>AbstractServiceTest.java</code>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 没有事务</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 2016/11/30</span><br><span class="line"> */</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations = &#123;&quot;classpath:/activiti.cfg.xml&quot;&#125;)</span><br><span class="line">public abstract class AbstractServiceTest extends AbstractJUnit4SpringContextTests &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后输出：<code>default</code></p><h2 id="三、使用DataSource"><a href="#三、使用DataSource" class="headerlink" title="三、使用DataSource"></a>三、使用<code>DataSource</code></h2><h3 id="3-1-添加Maven依赖"><a href="#3-1-添加Maven依赖" class="headerlink" title="3.1 添加Maven依赖"></a>3.1 添加Maven依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;druid.version&gt;1.0.18&lt;/druid.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-添加配置activiti-cfg-xml"><a href="#3-2-添加配置activiti-cfg-xml" class="headerlink" title="3.2 添加配置activiti.cfg.xml"></a>3.2 添加配置<code>activiti.cfg.xml</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置dbcp数据源 - dev --&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><br><span class="line">          destroy-method=&quot;close&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;123456&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="line">        &lt;property name=&quot;initialSize&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;minIdle&quot; value=&quot;5&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxActive&quot; value=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxWait&quot; value=&quot;60000&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="line">        &lt;property name=&quot;timeBetweenEvictionRunsMillis&quot; value=&quot;60000&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="line">        &lt;property name=&quot;minEvictableIdleTimeMillis&quot; value=&quot;300000&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;validationQuery&quot; value=&quot;SELECT &apos;x&apos;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;testWhileIdle&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;false&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;testOnReturn&quot; value=&quot;false&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="line">        &lt;property name=&quot;poolPreparedStatements&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolPreparedStatementPerConnectionSize&quot; value=&quot;20&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">        &lt;property name=&quot;removeAbandoned&quot; value=&quot;false&quot;&gt;&lt;/property&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">        &lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot;&gt;&lt;/property&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">        &lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot;&gt;&lt;/property&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;processEngine&quot; class=&quot;org.activiti.spring.ProcessEngineFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;processEngineConfiguration&quot; ref=&quot;processEngineConfiguration&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>这篇文章学习了怎么在java中使用工作流，以及怎么集成到spring中，下一篇我将学习使用工作流的api接口。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>量化分析HashMap</title>
      <link href="/2018/08/06/%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90HashMap/"/>
      <url>/2018/08/06/%E9%87%8F%E5%8C%96%E5%88%86%E6%9E%90HashMap/</url>
      <content type="html"><![CDATA[<h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>HashMap是由<code>数组</code>和<code>链表</code>构成的，如下图：</p><p><img src="/uploads/hashmap.png" alt="HashMap"></p><a id="more"></a><p>用代码来描述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; &#123;</span><br><span class="line">    // 数组。数组元素为链表的首节点</span><br><span class="line">    Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    // 链表的节点</span><br><span class="line">    class Node&lt;K,V&gt; &#123;</span><br><span class="line">        int hash;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        // 下一个节点</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 默认容量，16。</span><br><span class="line">     */</span><br><span class="line">    private static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 最大容量</span><br><span class="line">     */</span><br><span class="line">    private static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认负载因子，0.75f。</span><br><span class="line">     */</span><br><span class="line">    private static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 数组</span><br><span class="line">     */</span><br><span class="line">    private Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 节点的总数</span><br><span class="line">     */</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 阈值。当size大于阈值时会进行扩容</span><br><span class="line">     */</span><br><span class="line">    private int threshold;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 负载因子，是用于计算阈值的一个因子</span><br><span class="line">     */</span><br><span class="line">    private float loadFactor;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new-HashMap"><a href="#new-HashMap" class="headerlink" title="new HashMap()"></a>new HashMap()</h2><p>当我们new一个HashMap时，量化分析法如下。</p><h3 id="new-HashMap-1"><a href="#new-HashMap-1" class="headerlink" title="new HashMap()"></a>new HashMap()</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li></ul><h3 id="第1次put"><a href="#第1次put" class="headerlink" title="第1次put"></a>第1次put</h3><ul><li>size++; // 1</li><li>table = new Node[DEFAULT_INITIAL_CAPACITY]; // table.length: 16</li><li>threshold = (int) DEFAULT_INITIAL_CAPACITY * loadFactor; // 12</li></ul><h3 id="第2次put"><a href="#第2次put" class="headerlink" title="第2次put"></a>第2次put</h3><ul><li>size++; // 2</li><li>table.length不变; // 16</li><li>threshold不变; // 12</li></ul><h3 id="第13次put"><a href="#第13次put" class="headerlink" title="第13次put"></a>第13次put</h3><ul><li>size++; // 13</li><li>table.length扩大一倍;// 32</li><li>threshold扩大一倍;// 24</li></ul><h2 id="new-HashMap-5"><a href="#new-HashMap-5" class="headerlink" title="new HashMap(5)"></a>new HashMap(5)</h2><p>当我们new一个带一个参数的HashMap时，量化分析法如下。</p><h3 id="new-HashMap-5-1"><a href="#new-HashMap-5-1" class="headerlink" title="new HashMap(5)"></a>new HashMap(5)</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li><li>threshold = 不小于5的最小的2的n次方; // 8</li></ul><h3 id="第1次put-1"><a href="#第1次put-1" class="headerlink" title="第1次put"></a>第1次put</h3><ul><li>size++; // 1</li><li>table = new Node[threshold]; // table.length: 8</li><li>threshold = (int) table.length * loadFactor;// 6</li></ul><h3 id="第2次put-1"><a href="#第2次put-1" class="headerlink" title="第2次put"></a>第2次put</h3><ul><li>size++; // 2</li><li>table.length不变; // 8</li><li>threshold不变; // 6</li></ul><h3 id="第7次put"><a href="#第7次put" class="headerlink" title="第7次put"></a>第7次put</h3><ul><li>size++; // 7</li><li>table.length扩大一倍; // 16</li><li>threshold扩大一倍; // 12</li></ul><h2 id="new-HashMap-0-1"><a href="#new-HashMap-0-1" class="headerlink" title="new HashMap(0/1)"></a>new HashMap(0/1)</h2><p>当我们new一个带一个参数的HashMap时，参数值为负数时会报错，参数值为0或1时，量化分析法如下。</p><h3 id="new-HashMap-0-1-1"><a href="#new-HashMap-0-1-1" class="headerlink" title="new HashMap(0/1)"></a>new HashMap(0/1)</h3><ul><li>loadFactor = DEFAULT_LOAD_FACTOR； // 0.75f</li><li>threshold = 不小于0/1的最小的2的n次方; // 1</li></ul><h3 id="第1次put（会扩容）"><a href="#第1次put（会扩容）" class="headerlink" title="第1次put（会扩容）"></a>第1次put（会扩容）</h3><ul><li>size++; // 1</li><li>table = new Node[threshold]; // table.length: 1</li><li>threshold = (int) table.length * loadFactor;// 0</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 2</li><li>threshold = (int) table.length * loadFactor;// 1</li></ul><h3 id="第2次put（会扩容）"><a href="#第2次put（会扩容）" class="headerlink" title="第2次put（会扩容）"></a>第2次put（会扩容）</h3><ul><li>size++; // 2</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 4</li><li>threshold = (int) table.length * loadFactor;// 2</li></ul><h3 id="第3次put（会扩容）"><a href="#第3次put（会扩容）" class="headerlink" title="第3次put（会扩容）"></a>第3次put（会扩容）</h3><ul><li>size++; // 3</li></ul><p>此时由于size &gt; threshold，因此会扩容，扩容后：</p><ul><li>table.length扩大一倍; // 8</li><li>threshold = (int) table.length * loadFactor;// 4</li></ul><h3 id="第4次put"><a href="#第4次put" class="headerlink" title="第4次put"></a>第4次put</h3><ul><li>size++; // 4</li><li>table.length不变; // 8</li><li>threshold不变;// 4</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>不要new HashMap(0)或者new HasMap(1)，即使你只需要存1个值。</li><li>尽量在new HashMap时指定容量大小，因为默认为16，可能有点浪费。</li><li>如果你需要存放1~3个，那就new HashMap(2~4)。</li><li>new Hash(2)和new HashMap(3)、new HashMap(4)是一样的。</li><li>如果想要存放4~6个，那就new HashMap(5~8)。</li><li>如果想要存放7~12个，那就new HashMap(9~16)或者new HashMap()。</li><li>并不是new HashMap(初始大小)，它的容量就是‘初始大小’。</li></ol><blockquote><p>new HashMap还有两个参数的构造，第二个参数是负载因子，一般不需要指定，默认0.75即可。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置dubbo多注册中心</title>
      <link href="/2018/08/06/%E9%85%8D%E7%BD%AEdubbo%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2018/08/06/%E9%85%8D%E7%BD%AEdubbo%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      <content type="html"><![CDATA[<p>参考dubbo官方文档<a href="http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" target="_blank" rel="noopener">http://dubbo.io/User+Guide-zh.htm#UserGuide-zh-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83</a></p><h2 id="consumer-xml"><a href="#consumer-xml" class="headerlink" title="consumer.xml"></a>consumer.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:annotation-config&gt;&lt;/context:annotation&gt;</span><br><span class="line">    &lt;dubbo:application name=&quot;ENGINE_HELPER&quot;&gt;&lt;/dubbo:application&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:registry id=&quot;dev_address&quot; address=&quot;zookeeper://10.199.101.211:8080?backup=10.199.101.212:2181,10.199.101.213:2181&quot;&gt;&lt;/dubbo:registry&gt;</span><br><span class="line">    &lt;dubbo:registry id=&quot;uat_address&quot; address=&quot;zookeeper://10.199.105.204:2181?backup=10.199.105.203:2181,10.199.105.202:2181&quot; default=&quot;false&quot;&gt;&lt;/dubbo:registry&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:reference id=&quot;bankEngineServiceDev&quot; cluster=&quot;failfast&quot;</span><br><span class="line">                     interface=&quot;com.shhxzq.fin.bankengine.service.BankEngineService&quot;</span><br><span class="line">                     lazy=&quot;true&quot; version=&quot;1.2.0&quot; check=&quot;false&quot; timeout=&quot;100000&quot; registry=&quot;dev_address&quot;&gt;&lt;/dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dubbo:reference id=&quot;bankEngineServiceUat&quot; cluster=&quot;failfast&quot;</span><br><span class="line">                     interface=&quot;com.shhxzq.fin.bankengine.service.BankEngineService&quot;</span><br><span class="line">                     lazy=&quot;true&quot; version=&quot;1.2.0&quot; check=&quot;false&quot; timeout=&quot;100000&quot; registry=&quot;uat_address&quot;&gt;&lt;/dubbo:reference&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>让百度分享支持https的网站</title>
      <link href="/2018/08/06/%E8%AE%A9%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%94%AF%E6%8C%81https%E7%9A%84%E7%BD%91%E7%AB%99/"/>
      <url>/2018/08/06/%E8%AE%A9%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%94%AF%E6%8C%81https%E7%9A%84%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><p>百度分享地址：<a href="http://share.baidu.com" target="_blank" rel="noopener">http://share.baidu.com</a><br>由于我的网站的https的，而百度分享代码中是http的，所以不能按照百度分享提供的代码直接使用。<br>我的做法是将百度分享所使用的js、css、image全部下载下来，放在我自己的服务器。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="/uploads/baidu-share.zip">baidu-share.zip</a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>下面的代码是使用百度分享自动生成的，首先是把zip文件解压到服务器根目录下，然后需要把域名改为自己域名的就ok了。<br>比如我是将“<a href="http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”" target="_blank" rel="noopener">http://bdimg.share.baidu.com/static/api/js/share.js”改为“${ctx}/static/api/js/share.js”</a></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; window._bd_share_config = &#123;</span><br><span class="line">    &quot;common&quot;: &#123;</span><br><span class="line">        &quot;bdSnsKey&quot;: &#123;&#125;,</span><br><span class="line">        &quot;bdText&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdMini&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;bdMiniList&quot;: false,</span><br><span class="line">        &quot;bdPic&quot;: &quot;&quot;,</span><br><span class="line">        &quot;bdStyle&quot;: &quot;0&quot;,</span><br><span class="line">        &quot;bdSize&quot;: &quot;16&quot;</span><br><span class="line">    &#125;, &quot;slide&quot;: &#123;&quot;type&quot;: &quot;slide&quot;, &quot;bdImg&quot;: &quot;1&quot;, &quot;bdPos&quot;: &quot;right&quot;, &quot;bdTop&quot;: &quot;100&quot;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">with (document)0[(getElementsByTagName(&apos;head&apos;)[0] || body).appendChild(createElement(&apos;script&apos;)).src = &apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos; + ~(-new Date() / 36e5)];&lt;/script&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/uploads/https-share.png" alt="效果图"></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自动生成测试数据</title>
      <link href="/2018/08/06/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/08/06/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="eunit"><a href="#eunit" class="headerlink" title="eunit"></a>eunit</h2><p>eunit是一个工具包。可以根据指定的规则生成符合条件的测试数据。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ofofs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;eunit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;eunit.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>可以到<a href="http://mvnrepository.com/search?q=eunit" target="_blank" rel="noopener">http://mvnrepository.com/search?q=eunit</a>查看最新版本。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.eunit.test;</span><br><span class="line"></span><br><span class="line">import com.github.ofofs.eunit.DataFactory;</span><br><span class="line">import com.github.ofofs.eunit.test.model.User;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2018/7/21 0021</span><br><span class="line"> */</span><br><span class="line">public class UserSimpleTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User user = DataFactory.instance(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=8462870299209684556, username=&apos;kolH4D8roMdK2Kpnq&apos;, password=&apos;Xace7HK&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在User的字段上加上@Rule注解，可以指定字段生成规则，目前有下列规则可用：    </p><ul><li>字符串型：可以指定最小长度minLength、最大长度maxLength和正则表达式regex。</li><li>数字类型：可以指定最小值min、最大值max和精度precision。</li></ul><blockquote><p>说明: 目前只能生成八大基本数据类型和String、Date、BigDecimal。其他引用类型暂时不会生成，后续会考虑。</p></blockquote><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ul><li>提供更多细腻的规则。</li><li>怎么解实体类和规则注解的耦合？</li><li>如何实现多规则？</li><li>规则之间如何依赖？</li><li>如何优雅的自定义规则？</li></ul><blockquote><p>在实现想法的基础上要考虑到用户体验，如果设计的不优雅不好用宁愿不要。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （三）</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="流程引擎的接口和服务"><a href="#流程引擎的接口和服务" class="headerlink" title="流程引擎的接口和服务"></a>流程引擎的接口和服务</h2><p>引擎API是与Activiti交互的最常见的方式。中心起始点是ProcessEngine，从ProcessEngine中，可以获得各种服务。ProcessEngine和服务service是线程安全的。因此，可以为整个服务器保留一个引用。</p><p><img src="/uploads/api.services.png" alt=""></p><a id="more"></a><p>下面是从ProcessEngine中获取各个service的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line">ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">FormService formService = processEngine.getFormService();</span><br><span class="line">DynamicBpmnService dynamicBpmnService = processEngine.getDynamicBpmnService();</span><br></pre></td></tr></table></figure><p>每个服务的作用暂不解释。我的一贯作风是先上手玩一下，再去思考它的作用。</p><p>使用工作流的步骤大致分为：</p><ul><li>画一个流程图，并打包成zip文件。一般是使用eclipse插件或者idea插件。</li><li>部署流程图（zip文件）。包括：部署、查询、挂起、恢复和删除。</li><li>启动一个工作流实例。包括：启动、查询。</li><li>执行任务。包括：执行、查询。</li></ul><h2 id="画流程图"><a href="#画流程图" class="headerlink" title="画流程图"></a>画流程图</h2><p>工欲善其事必先利其器，先在idea中安装画流程图的插件，如下图：</p><p><img src="/uploads/idea-acti.png" alt=""></p><p>安装后重启idea即可，如果电脑不能联网，也可以离线安装，插件下载地址：<a href="http://plugins.jetbrains.com/plugin/download?rel=true&amp;updateId=17789" target="_blank" rel="noopener">http://plugins.jetbrains.com/plugin/download?rel=true&amp;updateId=17789</a></p><p>下面我画一个最经典的请假流程图，我先描述一下这个流程：</p><ol><li>员工填写请假信息。</li><li>部门经理审批。</li><li>如果部门经理通过，流程结束。</li><li>如果部门经理不通过，回到步骤1。</li></ol><p>下面是使用idea画的流程图:</p><p><img src="/uploads/acti-01.png" alt=""></p><p><img src="/uploads/acti-02.png" alt=""></p><p><img src="/uploads/acti-03.png" alt=""></p><p><img src="/uploads/acti-04.png" alt=""></p><p><img src="/uploads/acti-05.png" alt=""></p><p>从创建好的<code>leave.bpmn</code>复制出一个<code>leave.xml</code>, 其实就是改个后缀名。然后从<code>leave.xml</code>生成一个<code>leave.png</code>， 操作如下：</p><p><img src="/uploads/acti-06.png" alt=""><br><img src="/uploads/acti-07.png" alt=""></p><p>最终生成的流程图如下：</p><p><img src="/uploads/acti-08.png" alt=""></p><p>如果图片中文乱码，请修改idea的配置文件<code>idea64.exe.vmoptions</code>(win x64)，在最后添加<code>-Dfile.encoding=UTF-8</code></p><h2 id="部署流程图"><a href="#部署流程图" class="headerlink" title="部署流程图"></a>部署流程图</h2><p>把<code>leave.bpmn</code>和<code>leave.png</code>打包成<code>leave.zip</code>。然后使用下面的代码进行部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.util.zip.ZipInputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo04 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 部署流程定义</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void deploy() throws Exception &#123;</span><br><span class="line">        String zipPath = &quot;D:\\code\\acti-01\\src\\main\\resources\\leave.zip&quot;;</span><br><span class="line">        Deployment deployment = processEngine.getRepositoryService().createDeployment()</span><br><span class="line">                .addZipInputStream(new ZipInputStream(new FileInputStream(zipPath))).deploy();</span><br><span class="line"></span><br><span class="line">        System.out.println(deployment.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法是使用zip的方式部署的，当然也是可以使用bpmn+png的方式部署的。</p><p>部署成功后，从表数据来看，会在<code>act_re_deployment</code>表和<code>act_re_procdef</code>表中分别插入一条数据。</p><p>我个人的理解：部署一个流程定义，就像是定义一个class类，是一个抽象的概念。<br>员工去申请请假的时候，就是从部署的这个抽象的流程定义中创建一个流程实例，就好比从一个抽象的class类中创建一个Object对象。</p><p>所以，一定要理解好流程定义和流程实例的概念，关于流程定义的增删改查，在ide中点一下服务的方法就能看的到。这些服务请查考图一。</p><p>如果<code>leave.xml</code>中没有乱码，但是数据库中有乱码，请检查jdbc-url连接是否带有utf8参数。</p><h2 id="启动流程实例"><a href="#启动流程实例" class="headerlink" title="启动流程实例"></a>启动流程实例</h2><p>代码中有注释，简单解释了一点点东东，实际操作时，还需要自己多点点服务的方法，多多实验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo05 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动流程实例</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void start() throws Exception &#123;</span><br><span class="line">        // 流程定义ID， 指明了流程定义ID，引擎才能知道你使用的是哪个模板</span><br><span class="line">        String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">        // 业务主键，比如请假申请, 就可以使用请假的流水号</span><br><span class="line">        String businessKey = &quot;20170411000001&quot;;</span><br><span class="line">        // 实例参数</span><br><span class="line">        Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(1);</span><br><span class="line">        // 谁请假?</span><br><span class="line">        variables.put(&quot;user&quot;, &quot;zhangsan&quot;);</span><br><span class="line"></span><br><span class="line">        ProcessInstance processInstance = processEngine.getRuntimeService().</span><br><span class="line">                startProcessInstanceByKey(processDefinitionKey, businessKey, variables);</span><br><span class="line">        System.out.println(processInstance.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动流程实例后，从表数据来看，会在<code>act_ru_execution</code>表插入两条数据、在<code>act_ru_task</code>表中插入一条数据，task表中的这条数据表示接下来需要Assignee（zhangsan）来处理这个任务，即填写请假表。</p><h2 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h2><p>张三可以查询出指派给自己的任务，然后去执行。即从<code>act_ru_task</code>表中查出<code>Assignee</code>等于zhangsan的任务，也可以根据业务主键来查询，这些查询我们不用写，引擎已经封装成服务了，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.activiti.engine.task.TaskQuery;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo06 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * zhangsan查询我的待办任务，并执行任务</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void complete() throws Exception &#123;</span><br><span class="line">        // 查询任务</span><br><span class="line">        String businessKey = &quot;20170411000001&quot;;</span><br><span class="line">        TaskQuery query = processEngine.getTaskService().createTaskQuery();</span><br><span class="line">        query.processInstanceBusinessKey(businessKey);</span><br><span class="line">        Task task = query.singleResult();</span><br><span class="line"></span><br><span class="line">        // 执行任务</span><br><span class="line">        Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(1);</span><br><span class="line">        variables.put(&quot;reason&quot;, &quot;请假去阿里面试&quot;);</span><br><span class="line">        processEngine.getTaskService().complete(task.getId(), variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工填写请假申请后，从表数据来看，会把张三之前那个任务删除，即<code>act_ru_task</code>表中的一条记录。<br>他的Assignee=zhangsan, 那么这条数据也不会真的删除了，而是转义到了历史任务表<code>act_hi_taskinst</code>中。<br>同时，task表中会新增一个Assignee=manager的新任务，等待角色为manager的用户去处理。</p><h2 id="审批"><a href="#审批" class="headerlink" title="审批"></a>审批</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.activiti.engine.task.TaskQuery;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo07 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * manager查询我的待办任务，并执行任务</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void complete() throws Exception &#123;</span><br><span class="line">        // 查询任务</span><br><span class="line">        String assignee = &quot;manager&quot;;</span><br><span class="line">        TaskQuery query = processEngine.getTaskService().createTaskQuery();</span><br><span class="line">        // 其实这里使用候选组（Candidate Groups）来查询比较好</span><br><span class="line">        query.taskAssignee(assignee);</span><br><span class="line">        List&lt;Task&gt; tasks = query.list();</span><br><span class="line"></span><br><span class="line">        // 执行任务</span><br><span class="line">        Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(2);</span><br><span class="line">        variables.put(&quot;status&quot;, &quot;complete&quot;);</span><br><span class="line">        variables.put(&quot;replyMsg&quot;, &quot;准了&quot;);</span><br><span class="line">        processEngine.getTaskService().complete(tasks.get(0).getId(), variables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行此任务后task表中assignee=manager的那条记录就被转义到历史任务表中了，并且也不再生成新的task了，因为流程已经结束。  </p><p>至此，一个完整的工作流就走完了。后面估计还要查询历史任务，查询流程进度等，下次再学习。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编译时注解从入门到精通（四）</title>
      <link href="/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本篇文章是以类元素(element)为主体进行探讨的。为了简化代码，我把类元素的两个兄弟提前声明出来：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 类的标识</span><br><span class="line">Symbol.ClassSymbol classSym = (Symbol.ClassSymbol) element;</span><br><span class="line"></span><br><span class="line">// 类的声明</span><br><span class="line">JCTree.JCClassDecl classDecl = (JCTree.JCClassDecl) trees.getTree(element);</span><br></pre></td></tr></table></figure><h2 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h2><h3 id="获取类的全路径"><a href="#获取类的全路径" class="headerlink" title="获取类的全路径"></a>获取类的全路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取类的全路径</span><br><span class="line"> *</span><br><span class="line"> * @return 返回类的全路径</span><br><span class="line"> */</span><br><span class="line">public String getFullName() &#123;</span><br><span class="line">    return classSym.fullname.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="获取类的包名"><a href="#获取类的包名" class="headerlink" title="获取类的包名"></a>获取类的包名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取类的包名</span><br><span class="line"> *</span><br><span class="line"> * @return 返回类的包名</span><br><span class="line"> */</span><br><span class="line">public String getPackageName() &#123;</span><br><span class="line">    return classSym.owner.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取类名</span><br><span class="line"> *</span><br><span class="line"> * @return 返回类名</span><br><span class="line"> */</span><br><span class="line">public String getClassName() &#123;</span><br><span class="line">    return classSym.name.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否有指定的修饰符"><a href="#判断是否有指定的修饰符" class="headerlink" title="判断是否有指定的修饰符"></a>判断是否有指定的修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断类是不是有某个修饰符</span><br><span class="line"> *</span><br><span class="line"> * @return 如果类有某个修饰符的返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">public boolean hasModifier(int modifier) &#123;</span><br><span class="line">    return classDecl.mods.flags % (modifier * 2) &gt;= modifier;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断有没有实现指定的接口"><a href="#判断有没有实现指定的接口" class="headerlink" title="判断有没有实现指定的接口"></a>判断有没有实现指定的接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断有没有实现指定的接口</span><br><span class="line"> *</span><br><span class="line"> * @param interfaceClass 接口</span><br><span class="line"> * @return 如果类已经实现了指定接口则返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">private boolean hasInterface(Class&lt;?&gt; interfaceClass) &#123;</span><br><span class="line">    for (JCTree.JCExpression impl : classDecl.implementing) &#123;</span><br><span class="line">        if (impl.type.toString().equals(interfaceClass.getName())) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断是否存在字段"><a href="#判断是否存在字段" class="headerlink" title="判断是否存在字段"></a>判断是否存在字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否存在字段</span><br><span class="line"> *</span><br><span class="line"> * @param fieldName 字段名</span><br><span class="line"> * @return 若存在返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">private boolean existsField(String fieldName) &#123;</span><br><span class="line">    for (JCTree jcTree : classDecl.defs) &#123;</span><br><span class="line">        if (jcTree.getKind() == Tree.Kind.VARIABLE) &#123;</span><br><span class="line">            JCTree.JCVariableDecl var = (JCTree.JCVariableDecl) jcTree;</span><br><span class="line">            if (fieldName.equals(var.name.toString())) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改相关"><a href="#修改相关" class="headerlink" title="修改相关"></a>修改相关</h2><h3 id="设置类的修饰符"><a href="#设置类的修饰符" class="headerlink" title="设置类的修饰符"></a>设置类的修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 设置类的修饰符</span><br><span class="line"> *</span><br><span class="line"> * @param modifier 修饰符</span><br><span class="line"> */</span><br><span class="line">public void setModifier(int modifier) &#123;</span><br><span class="line">    classDecl.mods.flags = modifier;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导入一个包"><a href="#导入一个包" class="headerlink" title="导入一个包"></a>导入一个包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 导入一个包</span><br><span class="line"> *</span><br><span class="line"> * @param element     所在的类</span><br><span class="line"> * @param importClass 要导入的包</span><br><span class="line"> */</span><br><span class="line">private void importPackage(Element element, Class&lt;?&gt; importClass) &#123;</span><br><span class="line">    JCTree.JCCompilationUnit compilationUnit = (JCTree.JCCompilationUnit) trees.getPath(element).getCompilationUnit();</span><br><span class="line">    JCTree.JCFieldAccess fieldAccess = treeMaker.Select(treeMaker.Ident(names.fromString(importClass.getPackage().getName())), names.fromString(importClass.getSimpleName()));</span><br><span class="line">    JCTree.JCImport jcImport = treeMaker.Import(fieldAccess, false);</span><br><span class="line">    ListBuffer&lt;JCTree&gt; imports = new ListBuffer&lt;&gt;();</span><br><span class="line">    imports.append(jcImport);</span><br><span class="line">    for (int i = 0; i &lt; compilationUnit.defs.size(); i  ) &#123;</span><br><span class="line">        imports.append(compilationUnit.defs.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    compilationUnit.defs = imports.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加接口"><a href="#添加接口" class="headerlink" title="添加接口"></a>添加接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 添加接口</span><br><span class="line"> *</span><br><span class="line"> * @param interfaceClass 接口类</span><br><span class="line"> */</span><br><span class="line">public void addInterface(Class&lt;?&gt; interfaceClass) &#123;</span><br><span class="line">    // 判断类有没有实现此接口</span><br><span class="line">    if (!hasInterface(interfaceClass)) &#123;</span><br><span class="line">        // 导包（会自动去重）</span><br><span class="line">        importPackage(this, interfaceClass);</span><br><span class="line"></span><br><span class="line">        java.util.List&lt;JCTree.JCExpression&gt; implementing = classDecl.implementing;</span><br><span class="line">        ListBuffer&lt;JCTree.JCExpression&gt; statements = new ListBuffer&lt;&gt;();</span><br><span class="line">        for (JCTree.JCExpression impl : implementing) &#123;</span><br><span class="line">            statements.append(impl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Symbol.ClassSymbol sym = new Symbol.ClassSymbol(Sequence.nextLong(), names.fromString(interfaceClass.getSimpleName()), null);</span><br><span class="line">        statements.append(treeMaker.Ident(sym));</span><br><span class="line">        classDecl.implementing = statements.toList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置无参数私有构造器"><a href="#设置无参数私有构造器" class="headerlink" title="设置无参数私有构造器"></a>设置无参数私有构造器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 设置无参数私有构造器</span><br><span class="line"> */</span><br><span class="line">public void setNoArgPrivateConstructor() &#123;</span><br><span class="line">    // 遍历类的所有字段和方法</span><br><span class="line">    for (JCTree jcTree : classDecl.defs) &#123;</span><br><span class="line">        // 只处理方法</span><br><span class="line">        if (jcTree instanceof JCTree.JCMethodDecl) &#123;</span><br><span class="line">            JCTree.JCMethodDecl methodDecl = (JCTree.JCMethodDecl) jcTree;</span><br><span class="line">            // 如果是构造方法 并且 没有参数</span><br><span class="line">            if (JcaConstants.CONSTRUCTOR_NAME.equals(methodDecl.name.toString()) &amp;&amp; methodDecl.params.isEmpty()) &#123;</span><br><span class="line">                // 把修饰符改为private</span><br><span class="line">                methodDecl.mods = treeMaker.Modifiers(Flags.PRIVATE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，肯定还会有其他需求，不过只要这些你掌握了，其他应该问题都不大。</p><p>更多用法请参考：<a href="https://github.com/ofofs/jca.git" target="_blank" rel="noopener">https://github.com/ofofs/jca.git</a></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS3实现加载中的动画效果</title>
      <link href="/2018/08/06/CSS3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
      <url>/2018/08/06/CSS3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E4%B8%AD%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>主要使用transform的rotate属性，将线条组合成Loading图形 (也就是菊花图形)。</p><p>animation实现将线条颜色由浅到深，再由深到浅来回变换的动画，通过animation-delay属性来使颜色的变换产生过渡的效果，从而达到类似于Loading动画的效果。</p><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;line1&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line2&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line3&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line4&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line5&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line6&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line7&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;line8&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">.loading &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 80px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading span &#123;</span><br><span class="line">    width: 4px;</span><br><span class="line">    height: 20px;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 38px;</span><br><span class="line">    -webkit-animation: loading 1s infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line1 &#123;</span><br><span class="line">    background-color: #000;</span><br><span class="line">    -webkit-transform: rotate(0deg);</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">    -webkit-animation-delay: .3s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line2 &#123;</span><br><span class="line">    top: 5px;</span><br><span class="line">    left: 52px;</span><br><span class="line">    -webkit-transform: rotate(45deg);</span><br><span class="line">    transform: rotate(45deg);</span><br><span class="line">    -webkit-animation-delay: .4s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line3 &#123;</span><br><span class="line">    top: 18px;</span><br><span class="line">    left: 57px;</span><br><span class="line">    -webkit-transform: rotate(90deg);</span><br><span class="line">    transform: rotate(90deg);</span><br><span class="line">    -webkit-animation-delay: .5s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line4 &#123;</span><br><span class="line">    top: 31px;</span><br><span class="line">    left: 52px;</span><br><span class="line">    -webkit-transform: rotate(135deg);</span><br><span class="line">    transform: rotate(135deg);</span><br><span class="line">    -webkit-animation-delay: .6s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line5 &#123;</span><br><span class="line">    top: 37px;</span><br><span class="line">    -webkit-animation-delay: .7s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line6 &#123;</span><br><span class="line">    top: 32px;</span><br><span class="line">    left: 24px;</span><br><span class="line">    -webkit-transform: rotate(-135deg);</span><br><span class="line">    transform: rotate(-135deg);</span><br><span class="line">    -webkit-animation-delay: .8s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line7 &#123;</span><br><span class="line">    top: 18px;</span><br><span class="line">    left: 19px;</span><br><span class="line">    -webkit-transform: rotate(-90deg);</span><br><span class="line">    transform: rotate(-90deg);</span><br><span class="line">    -webkit-animation-delay: .9s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.loading .line8 &#123;</span><br><span class="line">    top: 5px;</span><br><span class="line">    left: 24px;</span><br><span class="line">    -webkit-transform: rotate(-45deg);</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    -webkit-animation-delay: 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes loading &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">        background-color: #000;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/uploads/loading-demo.gif" alt="loading-demo.gif"></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC结合拦截器、注解实现简单的防重复提交</title>
      <link href="/2018/08/06/SpringMVC%E7%BB%93%E5%90%88%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%98%B2%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/"/>
      <url>/2018/08/06/SpringMVC%E7%BB%93%E5%90%88%E6%8B%A6%E6%88%AA%E5%99%A8%E3%80%81%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%98%B2%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>在请求一个表单页面时，服务端生成一个随机的token，把token放入session中并回传到前端页面。</li><li>前端表单把token作为一个隐藏域提交给服务端。</li><li>服务端校验提交的token和session中的token是否一致来判断是否是重复提交，然后清除session中的token。</li></ol><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ol><li>服务端：在请求一个表单页面的controller的方法上加上注解@Token，即可生成token，放入session并回传到前端。</li><li>客户端：我使用的是freemarker，想使用宏定义来封装一下表单组件，如果这个表单需要做防重复提交，只需要传入token=true即可，它会自动加入一个隐藏域，其值为服务端回传的token。</li><li>服务端：如果表单提交的controller的方法上有注解@Token(type = Token.Type.CHECK),那么就校验session中的token和提交的token是否一致，从而判断是否是重复提交。</li></ol><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="自定义运行时注解-Token"><a href="#自定义运行时注解-Token" class="headerlink" title="自定义运行时注解@Token"></a>自定义运行时注解@Token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.cms.annotation;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 2018/5/1 0001</span><br><span class="line"> */</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface Token &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * TOKEN的key</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    String key();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * TOKEN的操作类型</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    Type type() default Type.GENERATE;</span><br><span class="line"></span><br><span class="line">    enum Type &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 生成TOKEN</span><br><span class="line">         */</span><br><span class="line">        GENERATE,</span><br><span class="line">        /**</span><br><span class="line">         * 校验TOKEN</span><br><span class="line">         */</span><br><span class="line">        CHECK</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义SpringMVC拦截器"><a href="#自定义SpringMVC拦截器" class="headerlink" title="自定义SpringMVC拦截器"></a>自定义SpringMVC拦截器</h3><p>在SpringMVC的配置文件<code>applicationContext-mvc.xml</code>中配置一个拦截器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MVC拦截器--&gt;</span><br><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">&lt;bean class=&quot;com.kangyonggan.cms.interceptor.HandlerInterceptor&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><p><code>HandlerInterceptor</code>的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.cms.interceptor;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.cms.annotation.Token;</span><br><span class="line">import com.kangyonggan.cms.util.RandomUtil;</span><br><span class="line">import com.kangyonggan.cms.util.ShiroUtils;</span><br><span class="line">import com.kangyonggan.cms.util.StringUtil;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.springframework.web.method.HandlerMethod;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 2018/4/21 0021</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">public class HandlerInterceptor extends HandlerInterceptorAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod method = (HandlerMethod) handler;</span><br><span class="line">            Token token = method.getMethodAnnotation(Token.class);</span><br><span class="line">            if (token != null &amp;&amp; token.type() == Token.Type.CHECK) &#123;</span><br><span class="line">                if (isRepeatSubmit(request, token)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return super.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        if (handler instanceof HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod method = (HandlerMethod) handler;</span><br><span class="line">            Token token = method.getMethodAnnotation(Token.class);</span><br><span class="line">            if (token != null &amp;&amp; token.type() == Token.Type.GENERATE) &#123;</span><br><span class="line">                String random = RandomUtil.getRandomString();</span><br><span class="line">                modelAndView.addObject(&quot;_token&quot;, random);</span><br><span class="line">                request.getSession().setAttribute(token.key(), random);</span><br><span class="line">                log.info(&quot;&#123;&#125;生成一个token，key=&#123;&#125;, value=&#123;&#125;&quot;, ShiroUtils.getShiroUsername(), token.key(), random);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        super.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 校验是否重复提交</span><br><span class="line">     *</span><br><span class="line">     * @param request</span><br><span class="line">     * @param token</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean isRepeatSubmit(HttpServletRequest request, Token token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String random = request.getParameter(&quot;_token&quot;);</span><br><span class="line">            String sessionRandom = (String) request.getSession().getAttribute(token.key());</span><br><span class="line">            log.info(&quot;&#123;&#125;校验是否重复提交，key=&#123;&#125;, random=&#123;&#125;, sessionRandom=&#123;&#125;&quot;, ShiroUtils.getShiroUsername(), token.key(), random, sessionRandom);</span><br><span class="line">            if (StringUtil.hasEmpty(random, sessionRandom)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return !random.equals(sessionRandom);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;校验是否重复提交异常&quot;, e);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            request.getSession().removeAttribute(token.key());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>假设我现在需要修改用户信息，首先是请求一个用户修改页面，然后返回一个修改用户的表单页面，最后提交到服务端。</p><h3 id="拦截请求页面的请求并生成token"><a href="#拦截请求页面的请求并生成token" class="headerlink" title="拦截请求页面的请求并生成token"></a>拦截请求页面的请求并生成token</h3><p><code>@Token(key = &quot;editUser&quot;)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 编辑用户</span><br><span class="line"> *</span><br><span class="line"> * @param username</span><br><span class="line"> * @param model</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;&#123;username:[\\w]+&#125;/edit&quot;, method = RequestMethod.GET)</span><br><span class="line">@RequiresPermissions(&quot;SYSTEM_USER&quot;)</span><br><span class="line">@Token(key = &quot;editUser&quot;)</span><br><span class="line">public String edit(@PathVariable(&quot;username&quot;) String username, Model model) &#123;</span><br><span class="line">model.addAttribute(&quot;user&quot;, userService.findUserByUsername(username));</span><br><span class="line">return getPathFormModal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在表单中加入隐藏域"><a href="#在表单中加入隐藏域" class="headerlink" title="在表单中加入隐藏域"></a>在表单中加入隐藏域</h3><p><code>token=true</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;@c.form id=&quot;modal-form&quot; action=&quot;$&#123;ctx&#125;/dashboard/system/user/$&#123;isEdit?string(&apos;update&apos;, &apos;save&apos;)&#125;&quot; token=true&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; id=&quot;old-username&quot; value=&quot;$&#123;user.username!&apos;&apos;&#125;&quot;/&gt;</span><br><span class="line">&lt;@c.input name=&quot;username&quot; value=&quot;$&#123;user.username!&apos;&apos;&#125;&quot; label=&quot;用户名&quot; readonly=isEdit required=!isEdit valid=&#123;&quot;isUsername&quot;: &quot;true&quot;&#125;/&gt;</span><br><span class="line">&lt;@c.input name=&quot;realname&quot; value=&quot;$&#123;user.realname!&apos;&apos;&#125;&quot; label=&quot;真实姓名&quot; required=true valid=&#123;&quot;rangelength&quot;: &quot;[1, 32]&quot;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;#if !isEdit&gt;</span><br><span class="line">&lt;@c.input name=&quot;password&quot; type=&quot;password&quot; label=&quot;密码&quot; required=true valid=&#123;&quot;isPassword&quot;: &quot;true&quot;&#125;/&gt;</span><br><span class="line">&lt;@c.input name=&quot;rePassword&quot; type=&quot;password&quot; label=&quot;确认密码&quot; required=true valid=&#123;&quot;equalTo&quot;: &apos;#password&apos;&#125;/&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">&lt;/@c.form&gt;</span><br></pre></td></tr></table></figure><p><code>token=true</code>背后做了什么呢？其实就是在表单中加了一个隐藏域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;$&#123;_token!&apos;&apos;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>我之所以给@Token注解添加一个key，是防止一种特殊的情况：</p><ol><li>请求表单A，但是未提交。</li><li>请求表单B，也未提交。</li><li>回到表单A，提交。</li></ol><p>如果没有设计<code>key</code>, 那么所有表单的token放在session中的key都是一样的，后面请求的token就会覆盖前面的token，会导致前面的表单无法提交。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编译时注解从入门到精通（五）</title>
      <link href="/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本篇文章是以方法元素(element)为主体进行探讨的。为了简化代码，我把方法元素的两个兄弟提前声明出来：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 方法的标识</span><br><span class="line">Symbol.MethodSymbol methodSym = (Symbol.MethodSymbol) element;</span><br><span class="line"></span><br><span class="line">// 类的声明</span><br><span class="line">JCTree.JCMethodDecl methodDecl = (JCTree.JCMethodDecl) trees.getTree(element);</span><br></pre></td></tr></table></figure><h2 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h2><h3 id="获取方法名"><a href="#获取方法名" class="headerlink" title="获取方法名"></a>获取方法名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取方法名</span><br><span class="line"> *</span><br><span class="line"> * @return 返回方法名</span><br><span class="line"> */</span><br><span class="line">public String getMethodName() &#123;</span><br><span class="line">    return methodSym.name.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="获取方法的返回类型"><a href="#获取方法的返回类型" class="headerlink" title="获取方法的返回类型"></a>获取方法的返回类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取方法的返回类型</span><br><span class="line"> *</span><br><span class="line"> * @return 返回方法的返回类型</span><br><span class="line"> */</span><br><span class="line">public JCTree.JCExpression getReturnType() &#123;</span><br><span class="line">    return methodDecl.restype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断方法是否有返回值"><a href="#判断方法是否有返回值" class="headerlink" title="判断方法是否有返回值"></a>判断方法是否有返回值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断方法是否有返回值</span><br><span class="line"> *</span><br><span class="line"> * @return 有则返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">public boolean hasReturnValue() &#123;</span><br><span class="line">    return !&quot;void&quot;.equals(getReturnType().getObject().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方法的参数"><a href="#获取方法的参数" class="headerlink" title="获取方法的参数"></a>获取方法的参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取方法的参数</span><br><span class="line"> *</span><br><span class="line"> * @return 返回方法的参数</span><br><span class="line"> */</span><br><span class="line">public com.sun.tools.javac.util.List&lt;Symbol.VarSymbol&gt; getArgs() &#123;</span><br><span class="line">    return methodSym.params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断方法是不是有指定修饰符"><a href="#判断方法是不是有指定修饰符" class="headerlink" title="判断方法是不是有指定修饰符"></a>判断方法是不是有指定修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断方法是不是有指定修饰符</span><br><span class="line"> *</span><br><span class="line"> * @return 如果方法有某个修饰符的返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">public boolean hasModifier(int modifier) &#123;</span><br><span class="line">    return methodDecl.mods.flags % (modifier * 2) &gt;= modifier;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改相关"><a href="#修改相关" class="headerlink" title="修改相关"></a>修改相关</h2><h3 id="在方法第一行插入一个表达式"><a href="#在方法第一行插入一个表达式" class="headerlink" title="在方法第一行插入一个表达式"></a>在方法第一行插入一个表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在方法第一行插入一个表达式</span><br><span class="line"> *</span><br><span class="line"> * @param express 表达式</span><br><span class="line"> */</span><br><span class="line">public void insert(JCTree.JCExpression express) &#123;</span><br><span class="line">    ListBuffer&lt;JCTree.JCStatement&gt; statements = new ListBuffer&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    statements.append(treeMaker.Exec(express));</span><br><span class="line">    for (JCTree.JCStatement statement : methodDecl.body.stats) &#123;</span><br><span class="line">        statements.append(statement);</span><br><span class="line">    &#125;</span><br><span class="line">    methodDecl.body.stats = statements.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在方法第一行插入一个代码块"><a href="#在方法第一行插入一个代码块" class="headerlink" title="在方法第一行插入一个代码块"></a>在方法第一行插入一个代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在方法第一行插入一个代码块</span><br><span class="line"> *</span><br><span class="line"> * @param statement 代码块</span><br><span class="line"> */</span><br><span class="line">public void insertBlock(JCTree.JCStatement statement) &#123;</span><br><span class="line">    ListBuffer&lt;JCTree.JCStatement&gt; statements = new ListBuffer&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    statements.append(statement);</span><br><span class="line">    for (JCTree.JCStatement stat : methodDecl.body.stats) &#123;</span><br><span class="line">        statements.append(stat);</span><br><span class="line">    &#125;</span><br><span class="line">    methodDecl.body.stats = statements.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置方法的修饰符"><a href="#设置方法的修饰符" class="headerlink" title="设置方法的修饰符"></a>设置方法的修饰符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 设置方法的修饰符</span><br><span class="line"> *</span><br><span class="line"> * @param modifier 修饰符</span><br><span class="line"> */</span><br><span class="line">public void setModifier(int modifier) &#123;</span><br><span class="line">    methodDecl.mods.flags = modifier;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多用法请参考：<a href="https://github.com/ofofs/jca.git" target="_blank" rel="noopener">https://github.com/ofofs/jca.git</a></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （二）</title>
      <link href="/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>上一篇文章的最后有一个@Serial的注解，现在我捋一捋此注解实现的思路。  </p><ol><li>一个项目中有很多很多的类，我们要找出带有@Serial注解的类。然后遍历这些类，对其逐个处理。</li><li>我们给这个类实现Serializable接口(如果没实现)，同时也要把对应的包导入进来。</li><li>生成一个不重复的long型的值，并赋值给一个叫做serialVersionUID的long型遍历。</li><li>最后把serialVersionUID加入到类的变量中（如果不存在）。</li></ol><a id="more"></a><h2 id="找出带有指定注解的元素"><a href="#找出带有指定注解的元素" class="headerlink" title="找出带有指定注解的元素"></a>找出带有指定注解的元素</h2><p>在<code>JcaProcessor.java</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env) &#123;</span><br><span class="line">    // 找出带有@Serial注解的元素</span><br><span class="line">    Set&lt;? extends Element&gt; elements = env.getElementsAnnotatedWith(Serial.class);</span><br><span class="line">    for (Element element : elements) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每一个Element就是一个带有@Serial注解的类。我想debug看看Element到底是什么鬼，怎么debug呢？编译时注解的debug请见下一篇文章。</p><h2 id="给类实现Serializable接口"><a href="#给类实现Serializable接口" class="headerlink" title="给类实现Serializable接口"></a>给类实现Serializable接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">for (Element element : elements) &#123;</span><br><span class="line">    // 先获取到类的声明</span><br><span class="line">    JCTree.JCClassDecl classDecl = (JCTree.JCClassDecl) trees.getTree(element);</span><br><span class="line"></span><br><span class="line">    // 遍历类的所有接口, 如果没有实现Serializable接口，那么就需要实现</span><br><span class="line">    boolean hasSerializable = false;</span><br><span class="line">    List&lt;JCTree.JCExpression&gt; implementing = classDecl.implementing;</span><br><span class="line">    ListBuffer&lt;JCTree.JCExpression&gt; statements = new ListBuffer&lt;&gt;();</span><br><span class="line">    for (JCTree.JCExpression impl : implementing) &#123;</span><br><span class="line">        statements.append(impl);</span><br><span class="line">        if (impl.type.toString().equals(Serializable.class.getName())) &#123;</span><br><span class="line">            hasSerializable = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!hasSerializable) &#123;</span><br><span class="line">        Symbol.ClassSymbol sym = new Symbol.ClassSymbol(Sequence.nextLong(), names.fromString(Serializable.class.getSimpleName()), null);</span><br><span class="line">        statements.append(treeMaker.Ident(sym));</span><br><span class="line">        </span><br><span class="line">        // 把Serializable的包导入进来</span><br><span class="line">        importPackage(element, Serializable.class);</span><br><span class="line">    &#125;</span><br><span class="line">    classDecl.implementing = statements.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中出现的<code>trees</code>、<code>treeMaker</code>和<code>names</code>，是在<code>JcaProcessor</code>的<code>init</code>方法中获取的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Trees trees;</span><br><span class="line">private TreeMaker treeMaker;</span><br><span class="line">private Name.Table names;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public synchronized void init(ProcessingEnvironment env) &#123;</span><br><span class="line">    trees = Trees.instance(env);</span><br><span class="line">    Context context = ((JavacProcessingEnvironment) env).getContext();</span><br><span class="line">    treeMaker = TreeMaker.instance(context);</span><br><span class="line">    names = Names.instance(context).table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>importPackage</code>方法的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 导入一个包</span><br><span class="line"> *</span><br><span class="line"> * @param element     所在的类</span><br><span class="line"> * @param importClass 要导入的包</span><br><span class="line"> */</span><br><span class="line">private void importPackage(Element element, Class&lt;?&gt; importClass) &#123;</span><br><span class="line">    JCTree.JCCompilationUnit compilationUnit = (JCTree.JCCompilationUnit) trees.getPath(element).getCompilationUnit();</span><br><span class="line"></span><br><span class="line">    JCTree.JCFieldAccess fieldAccess = treeMaker.Select(treeMaker.Ident(names.fromString(importClass.getPackage().getName())), names.fromString(importClass.getSimpleName()));</span><br><span class="line">    JCTree.JCImport jcImport = treeMaker.Import(fieldAccess, false);</span><br><span class="line"></span><br><span class="line">    ListBuffer&lt;JCTree&gt; imports = new ListBuffer&lt;&gt;();</span><br><span class="line">    imports.append(jcImport);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; compilationUnit.defs.size(); i  ) &#123;</span><br><span class="line">        imports.append(compilationUnit.defs.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compilationUnit.defs = imports.toList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本文并非只是贴代码，所以后面两步不再贴出来，以上内容也不解释，因为我会在后面的文章中逐个讲解，上面代码只为给大家一个直观的开发过程。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （三）</title>
      <link href="/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="如何debug？"><a href="#如何debug？" class="headerlink" title="如何debug？"></a>如何debug？</h2><p>对于debug应该都会熟悉，但是如果让你在<code>mvn clean install</code>的过程中debug，你还会吗？会的请跳过，不会的向下看。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- jca</span><br><span class="line">    - jca-core</span><br><span class="line">        - src</span><br><span class="line">            - main</span><br><span class="line">                - java</span><br><span class="line">                    - com.github.ofofs.jca.processor</span><br><span class="line">                        - JcaProcessor.java</span><br><span class="line">                - resources</span><br><span class="line">                    - META-INF</span><br><span class="line">                        - services</span><br><span class="line">                            - javax.annotation.processing.Processor</span><br><span class="line">        - pom.xml</span><br><span class="line">    - jca-test</span><br><span class="line">        - src</span><br><span class="line">            - main</span><br><span class="line">                - java</span><br><span class="line">                    - com.github.ofofs.jca.serial</span><br><span class="line">                        - SerialTest.java</span><br><span class="line">        - pom.xml</span><br><span class="line">    - pom.xml</span><br></pre></td></tr></table></figure><a id="more"></a><p>上篇文章贴出了<code>jca-core</code>模块下的代码。下面贴出其余代码。</p><p><code>jca/pom.xml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">没啥特殊的，正常的父模块代码。</span><br></pre></td></tr></table></figure></p><p><code>jca-test/pom.xml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--Compiler Plugin --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.github.ofofs&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jca-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p><p><code>SerialTest,java</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.jca.serial;</span><br><span class="line"></span><br><span class="line">import com.github.ofofs.jca.annotation.Serial;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/22/18</span><br><span class="line"> */</span><br><span class="line">@Serial</span><br><span class="line">public class SerialTest &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>先在<code>JcaProcessor.java</code>的某个地方打上断点。然后以debug的形式对jca项目进行<code>clean install</code>即可。</p><p>下篇文章将会逐个介绍编译时的一些语法。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编译时注解从入门到精通（一）</title>
      <link href="/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/08/06/%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>编译时注解是一种只在编译期间生效的注解。比如常见的<code>@Override</code>。<br>@Override的定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>@Target(ElementType.METHOD) 表示此注解只能用在方法上。</li><li>@Retention(RetentionPolicy.SOURCE) 表示此注解只存在于源码中。</li></ul><blockquote><p>@Retention(RetentionPolicy.RUNTIME) 表示这是一个运行时注解</p></blockquote><a id="more"></a><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>我们为什么要使用编译时注解呢？在什么情况下使用呢？  </p><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><ul><li>【打印日志】可以用于打印方法的出参、入参和耗时。</li><li>【管理缓存】可以缓存方法的返回值，也可以删除方法的缓存。</li><li>【方法限流】可以限制方法的访问量和访问频率。</li><li>【监控预警】可以用于监控接口的调用。</li><li>【防重复提交】可以用于防重复提交。</li><li>…</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>【比运行时注解快】因为运行时注解需要结合反射，而编译时注解只是消耗编译时性能。</li><li>【运用范围广】因为她不依赖任何环境，比如spring环境。她能在main方法中使用。</li></ul><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>本例以maven项目演示。</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;!--Compiler Plugin --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">                &lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;sun.jdk&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">        &lt;systemPath&gt;$&#123;java.home&#125;/../lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>&lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</code>表示不使用默认的处理器（因为我们要使用自定义的处理器）。</p></blockquote><h3 id="注册注解处理器"><a href="#注册注解处理器" class="headerlink" title="注册注解处理器"></a>注册注解处理器</h3><p>在<code>/src/main/resources/META-INF/services/</code>目录下创建文件<code>javax.annotation.processing.Processor</code>, 内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.github.ofofs.jca.processor.JcaProcessor</span><br></pre></td></tr></table></figure></p><blockquote><p>JcaProcessor是我们自定义的注解处理器，请注意修改为自己的包名。</p></blockquote><h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><p>顾名思义，它就是用来处理注解的，就像我们在使用运行时注解的时候，也会在切面方法中去处理注解一样。注解定义好了，当然要去处理，不然要她做甚。</p><p><code>JcaProcessor.java</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.jca.processor;</span><br><span class="line"></span><br><span class="line">import javax.annotation.processing.*;</span><br><span class="line">import javax.lang.model.SourceVersion;</span><br><span class="line">import javax.lang.model.element.TypeElement;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * JCA编译时注解处理器</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/22/18</span><br><span class="line"> */</span><br><span class="line">@SupportedAnnotationTypes(&quot;com.github.ofofs.jca.annotation.Serial&quot;)</span><br><span class="line">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span><br><span class="line">public class JcaProcessor extends AbstractProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public synchronized void init(ProcessingEnvironment env) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env) &#123;</span><br><span class="line">        // 可以在这里处理自定义编译时注解@Serial</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><code>SupportedAnnotationTypes</code>, 它的value是一个数组，表明我们可以在一个注解处理器中同时处理多个注解。</li><li>要注意init方法中的env和process方法中的env不是同一种。</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我想定义一个@Serial的编译时注解，只作用在类上，它的功能是给这个类实现序列化接口（implements Serializable）, 并且生成唯一的serialVersionUID。即：</p><h3 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.jca.serial;</span><br><span class="line"></span><br><span class="line">import com.github.ofofs.jca.annotation.Serial;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/22/18</span><br><span class="line"> */</span><br><span class="line">@Serial</span><br><span class="line">public class SerialTest &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译后："><a href="#编译后：" class="headerlink" title="编译后："></a>编译后：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">// (powered by Fernflower decompiler)</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">package com.github.ofofs.jca.serial;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class SerialTest implements Serializable &#123;</span><br><span class="line">    private static final Long serialVersionUID = 6893472666383691777L;</span><br><span class="line"></span><br><span class="line">    public SerialTest() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉是不是很炫酷？很神奇？很强大？其实编译时注解的强大远远超乎你的想象。本篇文章不会贴出此注解的实现代码。下篇文章我将会一一介绍处理编译时注解的各个技巧。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在mac上发布jar包到中央仓库</title>
      <link href="/2018/08/06/%E5%9C%A8mac%E4%B8%8A%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2018/08/06/%E5%9C%A8mac%E4%B8%8A%E5%8F%91%E5%B8%83jar%E5%8C%85%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="注册sonatype账号"><a href="#注册sonatype账号" class="headerlink" title="注册sonatype账号"></a>注册sonatype账号</h3><p>地址：<a href="https://issues.sonatype.org/secure/Signup!default.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Signup!default.jspa</a></p><blockquote><ul><li>记住用户名和密码，后面会频繁使用。</li></ul></blockquote><h3 id="创建一个issue"><a href="#创建一个issue" class="headerlink" title="创建一个issue"></a>创建一个issue</h3><p>地址：<a href="https://issues.sonatype.org/secure/Dashboard.jspa" target="_blank" rel="noopener">https://issues.sonatype.org/secure/Dashboard.jspa</a><br>使用上面注册的用户名和密码登录。</p><a id="more"></a><p><img src="/uploads/sona-01.png" alt="sona"></p><blockquote><ul><li>不要修改<code>Project</code>和<code>Issue Type</code>，使用默认值即可。</li></ul></blockquote><p><img src="/uploads/sona-02.png" alt="sona"></p><blockquote><ul><li>其他的值请参考例子。</li></ul></blockquote><p>创建完成后，1个工作日以内工作人员会回复你的Issue，如果通过的话，内容如下，如果不通过，那你就检查后再试试吧。</p><p><img src="/uploads/sona-03.png" alt="sona"></p><h3 id="使用-GPG-生成密钥对"><a href="#使用-GPG-生成密钥对" class="headerlink" title="使用 GPG 生成密钥对"></a>使用 GPG 生成密钥对</h3><p>如果mac上没有gpg命令，可以使用下面的命令进行安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gpg</span><br></pre></td></tr></table></figure><p>如果mac上没有brew命令，需要先安装brew命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</span><br></pre></td></tr></table></figure><blockquote><ul><li>安brew命令需要先打开Xcode并同意条款。</li></ul></blockquote><p>安装成功gpg命令后，生成密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>输出信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gpg (GnuPG) 2.2.1; Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory &apos;/Users/kyg/.gnupg&apos; created</span><br><span class="line">gpg: keybox &apos;/Users/kyg/.gnupg/pubring.kbx&apos; created</span><br><span class="line">Note: Use &quot;gpg --full-generate-key&quot; for a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name:</span><br></pre></td></tr></table></figure><p>提示输入名字， 如：<code>kangyonggan</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Email address:</span><br></pre></td></tr></table></figure><p>又提示输入邮箱, 如：<a href="mailto:`java@kangyonggan.com">`java@kangyonggan.com</a>`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">You selected this USER-ID:</span><br><span class="line">    &quot;kangyonggan &lt;java@kangyonggan.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit?</span><br></pre></td></tr></table></figure><p>选择okay, 输入：<code>o</code></p><p>然后弹框要求输入密码， 这个密码后面会用到，别忘记了。</p><p><img src="/uploads/sona-06.png" alt="sona"></p><p>之后会让你再次输入密码，到此密钥就生成成功了，输出信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /Users/kyg/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key C38B01CFC194AE3C marked as ultimately trusted</span><br><span class="line">gpg: directory &apos;/Users/kyg/.gnupg/openpgp-revocs.d&apos; created</span><br><span class="line">gpg: revocation certificate stored as &apos;/Users/kyg/.gnupg/openpgp-revocs.d/7A98F7517B453D562425F564C38B01CFC194AE3C.rev&apos;</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa2048 2017-10-18 [SC] [expires: 2019-10-18]</span><br><span class="line">      7A98F7517B453D562425F564C38B01CFC194AE3C</span><br><span class="line">uid                      kangyonggan &lt;java@kangyonggan.com&gt;</span><br><span class="line">sub   rsa2048 2017-10-18 [E] [expires: 2019-10-18]</span><br></pre></td></tr></table></figure><p>需要记住<code>7A98F7517B453D562425F564C38B01CFC194AE3C</code>，会面会有用，记不住也没关系，可以使用下面的命令查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --list-keys</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gpg: checking the trustdb</span><br><span class="line">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class="line">gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u</span><br><span class="line">gpg: next trustdb check due at 2019-10-18</span><br><span class="line">/Users/kyg/.gnupg/pubring.kbx</span><br><span class="line">-----------------------------</span><br><span class="line">pub   rsa2048 2017-10-18 [SC] [expires: 2019-10-18]</span><br><span class="line">      7A98F7517B453D562425F564C38B01CFC194AE3C</span><br><span class="line">uid           [ultimate] kangyonggan &lt;java@kangyonggan.com&gt;</span><br><span class="line">sub   rsa2048 2017-10-18 [E] [expires: 2019-10-18]</span><br></pre></td></tr></table></figure><h3 id="将公钥发布到-PGP-密钥服务器"><a href="#将公钥发布到-PGP-密钥服务器" class="headerlink" title="将公钥发布到 PGP 密钥服务器"></a>将公钥发布到 PGP 密钥服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys 7A98F7517B453D562425F564C38B01CFC194AE3C</span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg: sending key C38B01CFC194AE3C to hkp://keyserver.ubuntu.com:11371</span><br><span class="line">You have new mail in /var/mail/kyg</span><br></pre></td></tr></table></figure><p>说明密钥已经发布成功了，也可以使用命令查看有没有发布成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:11371 --recv-keys 7A98F7517B453D562425F564C38B01CFC194AE3C</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gpg: key C38B01CFC194AE3C: &quot;kangyonggan &lt;java@kangyonggan.com&gt;&quot; not changed</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:              unchanged: 1</span><br></pre></td></tr></table></figure><h3 id="配置setting-xml"><a href="#配置setting-xml" class="headerlink" title="配置setting.xml"></a>配置setting.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">        &lt;id&gt;oss&lt;/id&gt;</span><br><span class="line">        &lt;username&gt;sonatype用户名&lt;/username&gt;</span><br><span class="line">        &lt;password&gt;sonatype密码&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">&lt;/servers&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;ossrh&lt;/id&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line"></span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;gpg.executable&gt;gpg&lt;/gpg.executable&gt;</span><br><span class="line">            &lt;gpg.passphrase&gt;密钥的密码&lt;/gpg.passphrase&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>server的id随意填写，只要和pom.xml里面对应就行了。</p><h3 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;name&gt;Method Logger&lt;/name&gt;</span><br><span class="line">&lt;description&gt;使用编译时注解打印方法入参出参和耗时&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;url&gt;http://www.dexcoder.com/&lt;/url&gt;</span><br><span class="line">&lt;licenses&gt;</span><br><span class="line">    &lt;license&gt;</span><br><span class="line">        &lt;name&gt;The Apache Software License, Version 2.0&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;</span><br><span class="line">    &lt;/license&gt;</span><br><span class="line">&lt;/licenses&gt;</span><br><span class="line">&lt;developers&gt;</span><br><span class="line">    &lt;developer&gt;</span><br><span class="line">        &lt;name&gt;kangyonggan&lt;/name&gt;</span><br><span class="line">        &lt;email&gt;java@kangyonggan.com&lt;/email&gt;</span><br><span class="line">    &lt;/developer&gt;</span><br><span class="line">&lt;/developers&gt;</span><br><span class="line">&lt;scm&gt;</span><br><span class="line">    &lt;connection&gt;scm:git:git@github.com/kangyonggan/method-logger.git&lt;/connection&gt;</span><br><span class="line">    &lt;developerConnection&gt;scm:git:git@github.com/kangyonggan/method-logger.git&lt;/developerConnection&gt;</span><br><span class="line">    &lt;url&gt;git@github.com/kangyonggan/method-logger.git&lt;/url&gt;</span><br><span class="line">&lt;/scm&gt;</span><br><span class="line"></span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;release&lt;/id&gt;</span><br><span class="line">        &lt;build&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- Source --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">                &lt;!-- Javadoc --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- GPG --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;1.6&lt;/version&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class="line">                            &lt;goals&gt;</span><br><span class="line">                                &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class="line">                            &lt;/goals&gt;</span><br><span class="line">                        &lt;/execution&gt;</span><br><span class="line">                    &lt;/executions&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/build&gt;</span><br><span class="line">        &lt;distributionManagement&gt;</span><br><span class="line">            &lt;snapshotRepository&gt;</span><br><span class="line">                &lt;id&gt;oss&lt;/id&gt;</span><br><span class="line">                &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class="line">            &lt;/snapshotRepository&gt;</span><br><span class="line">            &lt;repository&gt;</span><br><span class="line">                &lt;id&gt;oss&lt;/id&gt;</span><br><span class="line">                &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class="line">            &lt;/repository&gt;</span><br><span class="line">        &lt;/distributionManagement&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>如果你的英文很六，description标签最好用英文来写，逼格更高。其他值你看着填写就好。</p><blockquote><p>repository-&gt;id 要和 setting.xml 中的保持一致。</p></blockquote><h3 id="上传构件到-OSS-中"><a href="#上传构件到-OSS-中" class="headerlink" title="上传构件到 OSS 中"></a>上传构件到 OSS 中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean deploy -P release</span><br></pre></td></tr></table></figure><p>当执行以上 Maven 命令后，如果顺利，就会看见一堆upload信息，部分输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Using transporter WagonTransporter with priority -1.0 for https://oss.sonatype.org/service/local/staging/deploy/maven2/</span><br><span class="line">[DEBUG] Using connector BasicRepositoryConnector with priority 0.0 for https://oss.sonatype.org/service/local/staging/deploy/maven2/ with username=java@kangyonggan.com, password=***</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.jar</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.jar (14 KB at 3.6 KB/sec)</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.pom</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/1.0/method-logger-1.0.pom (6 KB at 1.2 KB/sec)</span><br><span class="line">Downloading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml</span><br><span class="line">[DEBUG] Could not find metadata com.kangyonggan:method-logger/maven-metadata.xml in oss (https://oss.sonatype.org/service/local/staging/deploy/maven2/)</span><br><span class="line">[DEBUG] Writing tracking file /Users/kyg/data/repository/com/kangyonggan/method-logger/resolver-status.properties</span><br><span class="line">Uploading: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml</span><br><span class="line">Uploaded: https://oss.sonatype.org/service/local/staging/deploy/maven2/com/kangyonggan/method-logger/maven-metadata.xml (304 B at 0.2 KB/sec)</span><br></pre></td></tr></table></figure><blockquote><ul><li>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布</li></ul></blockquote><h3 id="发布构建"><a href="#发布构建" class="headerlink" title="发布构建"></a>发布构建</h3><p>地址：<a href="https://oss.sonatype.org/#stagingRepositories" target="_blank" rel="noopener">https://oss.sonatype.org/#stagingRepositories</a><br>需要使用之前注册的sonatype账号登录。</p><p>点击<code>Staging Repositories</code>菜单，并拉至最下方，会看见自己刚刚deploy的jar包</p><p><img src="/uploads/sona-07.png" alt="sona"></p><p>选择此构建后，点击<code>Close</code>，如下图：</p><p><img src="/uploads/sona-08.png" alt="sona"></p><p>系统会自动验证该构件是否满足指定要求，当验证完毕后，状态会变为 Closed。然后点击<code>Release</code>。</p><h3 id="通知-Sonatype-构件已成功发布"><a href="#通知-Sonatype-构件已成功发布" class="headerlink" title="通知 Sonatype 构件已成功发布"></a>通知 Sonatype 构件已成功发布</h3><p>找到之前创建的Issue，并回复：<code>构建已发布</code></p><p><img src="/uploads/sona-04.png" alt="sona"></p><h3 id="等待构件审批通过"><a href="#等待构件审批通过" class="headerlink" title="等待构件审批通过"></a>等待构件审批通过</h3><p>等待大概一个工作日内，如果审核通过，Issue会有回复：</p><p><img src="/uploads/sona-05.png" alt="sona"></p><blockquote><ul><li>大概需要2个小时才能把jar同步到中央仓库。</li></ul></blockquote><h3 id="从中央仓库搜索自己发布的jar"><a href="#从中央仓库搜索自己发布的jar" class="headerlink" title="从中央仓库搜索自己发布的jar"></a>从中央仓库搜索自己发布的jar</h3><p>地址：<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a><br>搜索,如：<code>com.kangyonggan</code>, 结果如下：</p><p><img src="/uploads/sona-09.png" alt="sona"></p><p>据我实际测试发现，大概release之后不超过20分钟，就可以在<a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="noopener">https://repo.maven.apache.org/maven2/</a>这里查看到了，只要这里有了，别人就可以依赖这个jar了。</p><blockquote><ul><li>二次发布同一个构建（只要groupId不变）的过程就不用这么麻烦，后面就不用再Issue中操作了。</li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>根据正则表达式生成字符串</title>
      <link href="/2018/08/06/%E6%A0%B9%E6%8D%AE%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2018/08/06/%E6%A0%B9%E6%8D%AE%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h2 id="reggen"><a href="#reggen" class="headerlink" title="reggen"></a>reggen</h2><p>reggen是一个正则表达式生成器。可以根据指定的正则表达式随机生成符合正则表达式的字符串。目前有部分特殊字符无法生成，比如：\r、\n等。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ofofs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;reggen&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;reggen.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>可以到<a href="http://mvnrepository.com/search?q=reggen" target="_blank" rel="noopener">http://mvnrepository.com/search?q=reggen</a>查看最新版本。</p><a id="more"></a><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.github.ofofs.reggen;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 7/25/18</span><br><span class="line"> */</span><br><span class="line">public class ReggenTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String regex = &quot;^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$&quot;;</span><br><span class="line">        System.out.println(&quot;身份证:&quot; + RegexGenerator.generate(regex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">身份证:147913327403065318</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用编译时注解增强方法</title>
      <link href="/2018/08/06/%E5%88%A9%E7%94%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E5%A2%9E%E5%BC%BA%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/06/%E5%88%A9%E7%94%A8%E7%BC%96%E8%AF%91%E6%97%B6%E6%B3%A8%E8%A7%A3%E5%A2%9E%E5%BC%BA%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ol><li>在任何一个方法上加上注解，都要能打印出参、入参信息，而不局限于spring管理的类方法。</li><li>不要每次调用方法都要经过各种反射，而是编译时就把增强代码注入到方法第一行。这样性能更好。</li><li>可以自定义使用什么日志框架输出日志。</li></ol><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ul><li>开发工具：idea或eclipse</li><li>项目管理工具：maven3.3.9</li><li>jdk版本：1.8.0_144</li></ul><a id="more"></a><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h4><p>使用idea创建一个普通的maven项目hello。并创建两个子模块hello-core和hello-test。整体项目结构如下图：</p><p><img src="/uploads/method-logger.png" alt="method-logger"></p><h4 id="父模块pom-xml"><a href="#父模块pom-xml" class="headerlink" title="父模块pom.xml"></a>父模块pom.xml</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;hello-core&lt;/module&gt;</span><br><span class="line">        &lt;module&gt;hello-test&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!--Project--&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.build.version&gt;1.0-SNAPSHOT&lt;/project.build.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Plugins--&gt;</span><br><span class="line">        &lt;plugin.compiler.version&gt;3.5.1&lt;/plugin.compiler.version&gt;</span><br><span class="line">        &lt;plugin.compiler.level&gt;1.8&lt;/plugin.compiler.level&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!--compiler plugin --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;$&#123;plugin.compiler.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="hello-core模块pom-xml"><a href="#hello-core模块pom-xml" class="headerlink" title="hello-core模块pom.xml"></a>hello-core模块pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hello-core&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--compiler plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;plugin.compiler.level&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;plugin.compiler.level&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                    &lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;sun.jdk&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;java.home&#125;/../lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：编译插件一定要配置：<code>&lt;compilerArgument&gt;-proc:none&lt;/compilerArgument&gt;</code>, 否则编译时报错：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad service configuration file, or exception thrown while constructing Processor object: javax.annotation.processing.Processor: Provider com.kangyonggan.demo.hello.core.MethodLoggerProcessor not found</span><br></pre></td></tr></table></figure><blockquote><p>注意：一定要依赖<code>tools.jar</code>，否则编译时报错：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.sun.tools.javac.processing does not exist</span><br></pre></td></tr></table></figure><h3 id="编译时注解"><a href="#编译时注解" class="headerlink" title="编译时注解"></a>编译时注解</h3><p><code>MethodLogger.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.core;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 9/28/17</span><br><span class="line"> */</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface MethodLogger &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><p><code>MethodLoggerProcessor.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.core;</span><br><span class="line"></span><br><span class="line">import com.sun.source.util.Trees;</span><br><span class="line">import com.sun.tools.javac.processing.JavacProcessingEnvironment;</span><br><span class="line">import com.sun.tools.javac.tree.JCTree;</span><br><span class="line">import com.sun.tools.javac.tree.TreeMaker;</span><br><span class="line">import com.sun.tools.javac.tree.TreeTranslator;</span><br><span class="line">import com.sun.tools.javac.util.*;</span><br><span class="line"></span><br><span class="line">import javax.annotation.processing.*;</span><br><span class="line">import javax.lang.model.SourceVersion;</span><br><span class="line">import javax.lang.model.element.Element;</span><br><span class="line">import javax.lang.model.element.ElementKind;</span><br><span class="line">import javax.lang.model.element.TypeElement;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 注解处理器</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 9/28/17</span><br><span class="line"> */</span><br><span class="line">@SupportedAnnotationTypes(&quot;com.kangyonggan.demo.hello.core.MethodLogger&quot;)</span><br><span class="line">@SupportedSourceVersion(SourceVersion.RELEASE_8)</span><br><span class="line">public class MethodLoggerProcessor extends AbstractProcessor &#123;</span><br><span class="line"></span><br><span class="line">    private Trees trees;</span><br><span class="line">    private TreeMaker treeMaker;</span><br><span class="line">    private Name.Table names;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化，获取编译环境</span><br><span class="line">     *</span><br><span class="line">     * @param env</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public synchronized void init(ProcessingEnvironment env) &#123;</span><br><span class="line">        super.init(env);</span><br><span class="line"></span><br><span class="line">        trees = Trees.instance(env);</span><br><span class="line">        Context context = ((JavacProcessingEnvironment) env).getContext();</span><br><span class="line">        treeMaker = TreeMaker.instance(context);</span><br><span class="line">        names = Names.instance(context).table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理注解</span><br><span class="line">     *</span><br><span class="line">     * @param annotations</span><br><span class="line">     * @param env</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env) &#123;</span><br><span class="line">        // 处理有@MethodLogger注解的元素</span><br><span class="line">        for (Element element : env.getElementsAnnotatedWith(MethodLogger.class)) &#123;</span><br><span class="line">            // 只处理作用在方法上的注解</span><br><span class="line">            if (element.getKind() == ElementKind.METHOD) &#123;</span><br><span class="line">                JCTree tree = (JCTree) trees.getTree(element);</span><br><span class="line">                tree.accept(new TreeTranslator() &#123;</span><br><span class="line">                    /**</span><br><span class="line">                     * 方法的代码块，在代码块的第一行添加代码：System.out.println(&quot;Hello World!!!&quot;);</span><br><span class="line">                     *</span><br><span class="line">                     * @param tree</span><br><span class="line">                     */</span><br><span class="line">                    @Override</span><br><span class="line">                    public void visitBlock(JCTree.JCBlock tree) &#123;</span><br><span class="line">                        ListBuffer&lt;JCTree.JCStatement&gt; statements = new ListBuffer();</span><br><span class="line"></span><br><span class="line">                        // 创建代码: System.out.println(&quot;Hello World!!!&quot;);</span><br><span class="line">                        JCTree.JCFieldAccess fieldAccess = treeMaker.Select(treeMaker.Select(treeMaker.Ident(names.fromString(&quot;System&quot;)), names.fromString(&quot;out&quot;)), names.fromString(&quot;println&quot;));</span><br><span class="line">                        JCTree.JCExpression argsExpr = treeMaker.Literal(&quot;Hello world!!!&quot;);</span><br><span class="line">                        JCTree.JCMethodInvocation methodInvocation = treeMaker.Apply(List.nil(), fieldAccess, List.of(argsExpr));</span><br><span class="line">                        JCTree.JCExpressionStatement code = treeMaker.Exec(methodInvocation);</span><br><span class="line"></span><br><span class="line">                        // 把代码加到方法体之前</span><br><span class="line">                        statements.append(code);</span><br><span class="line"></span><br><span class="line">                        // 把原来的方法体写回去</span><br><span class="line">                        for (int i = 0; i &lt; tree.getStatements().size(); i++) &#123;</span><br><span class="line">                            statements.append(tree.getStatements().get(i));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        result = treeMaker.Block(0, statements.toList());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册注解处理器"><a href="#注册注解处理器" class="headerlink" title="注册注解处理器"></a>注册注解处理器</h3><p>在<code>resources/META-INF/services</code>目录下创建文件<code>javax.annotation.processing.Processor</code>， 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.kangyonggan.demo.hello.core.MethodLoggerProcessor</span><br></pre></td></tr></table></figure><h3 id="hello-test模块pom-xml"><a href="#hello-test模块pom-xml" class="headerlink" title="hello-test模块pom.xml"></a>hello-test模块pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;hello&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;hello-test&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--compiler plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;plugin.compiler.level&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;plugin.compiler.level&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.kangyonggan.demo&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hello-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><code>MethodLoggerTest.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.hello.test;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.demo.hello.core.MethodLogger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 10/17/17</span><br><span class="line"> */</span><br><span class="line">public class MethodLoggerTest &#123;</span><br><span class="line"></span><br><span class="line">    @MethodLogger</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new MethodLoggerTest().test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main方法输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello world!!!</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h3 id="反编译MethodLoggerTest-class"><a href="#反编译MethodLoggerTest-class" class="headerlink" title="反编译MethodLoggerTest.class"></a>反编译MethodLoggerTest.class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="line">// (powered by Fernflower decompiler)</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">package com.kangyonggan.demo.hello.test;</span><br><span class="line"></span><br><span class="line">public class MethodLoggerTest &#123;</span><br><span class="line">    public MethodLoggerTest() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void test() &#123;</span><br><span class="line">        System.out.println(&quot;Hello world!!!&quot;);</span><br><span class="line">        System.out.println(&quot;test&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        (new MethodLoggerTest()).test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>Hello World的源代码托管在github上：<a href="https://github.com/kangyonggan/method-logger-hello.git" target="_blank" rel="noopener">https://github.com/kangyonggan/method-logger-hello.git</a></p><p>最终实现的代码：<a href="https://github.com/kangyonggan/extra.git" target="_blank" rel="noopener">https://github.com/kangyonggan/method-logger.git</a></p><p>此jar包已经发布到中央仓库，联网即可依赖。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>把网站从http免费升级到https</title>
      <link href="/2018/08/06/%E6%8A%8A%E7%BD%91%E7%AB%99%E4%BB%8Ehttp%E5%85%8D%E8%B4%B9%E5%8D%87%E7%BA%A7%E5%88%B0https/"/>
      <url>/2018/08/06/%E6%8A%8A%E7%BD%91%E7%AB%99%E4%BB%8Ehttp%E5%85%8D%E8%B4%B9%E5%8D%87%E7%BA%A7%E5%88%B0https/</url>
      <content type="html"><![CDATA[<h2 id="申请免费SSL"><a href="#申请免费SSL" class="headerlink" title="申请免费SSL"></a>申请免费SSL</h2><p>打开<a href="https://zerossl.com/" target="_blank" rel="noopener">https://zerossl.com/</a>, 点击【ONLINE TOOLS】</p><p><img src="/uploads/https01.png" alt="https"></p><p>点击【START】开始申请证书</p><a id="more"></a><p><img src="/uploads/https02.png" alt="https"></p><p>填写【邮箱】、【域名】、勾选【HTTP verification】、【Accept ZeroSSL TOS】和【Accept Let’s Encrypt SA (pdf)】, 填写完成后点击【NEXT】</p><p><img src="/uploads/https03.png" alt="https"></p><p>此时会询问你是否也包含www前缀的域名，建议第一次玩的时候选择No，因为这样后面的校验是相对容易一些，等玩会了之后再选择Yes，我这里选择的是【Yes】。</p><p><img src="/uploads/https04.png" alt="https"></p><p>点击【下载】，然后点击【NEXT】。</p><p><img src="/uploads/https05.png" alt="https"></p><p>点击【下载】，然后点击【NEXT】。</p><p><img src="/uploads/https06.png" alt="https"></p><p>然后进入域名校验界面。</p><p><img src="/uploads/https07.png" alt="https"></p><p>这时候你需要在你的项目中放置两个文件，以供校验：</p><ol><li>文件路径为：<a href="http://kangyonggan.com/.well-known/acme-challenge/WxvjNvXfff_DGNzHeGhi6rDqMVjJQlcatSvO_1SdemE">http://kangyonggan.com/.well-known/acme-challenge/WxvjNvXfff_DGNzHeGhi6rDqMVjJQlcatSvO_1SdemE</a></li><li>文件内容为：WxvjNvXfff_DGNzHeGhi6rDqMVjJQlcatSvO_1SdemE.m4z6_KmV_JPWzx3GFVoB9p-ytleQL5vLVuNZItQ2dik</li></ol><p>同理，再创建另外一个文件：</p><ol><li>文件路径为：<a href="http://www.kangyonggan.com/.well-known/acme-challenge/wpyYcbGItz-rmHKNFPrjrSnVy3vQ4cFC3fuRGvYF1l8" target="_blank" rel="noopener">http://www.kangyonggan.com/.well-known/acme-challenge/wpyYcbGItz-rmHKNFPrjrSnVy3vQ4cFC3fuRGvYF1l8</a></li><li>文件内容为：wpyYcbGItz-rmHKNFPrjrSnVy3vQ4cFC3fuRGvYF1l8.m4z6_KmV_JPWzx3GFVoB9p-ytleQL5vLVuNZItQ2dik</li></ol><p>需要注意的是：这两个文件的地址，一个有www，一个没有www，如果你前面没有包含www前缀的域名，你就只需要提供一个文件只可。</p><p>下面是我提供的文件：</p><p><img src="/uploads/https08.png" alt="https"></p><p><img src="/uploads/https09.png" alt="https"></p><p>把项目发布之后访问以下上面的两个地址，看看能不能访问通, 如果访问的通，点击【NEXT】</p><p><img src="/uploads/https10.png" alt="https"></p><p>如果校验没过，别放弃，多点几次，我就是在点了2次才通过的：</p><p><img src="/uploads/https11.png" alt="https"></p><p>在这一步一定一定不能忘了下载这两个文件，因为后面配置服务器的时候回用到这两个文件，最后点击【DONE NEXT】结束。</p><p>但是这个证书有效期是90天，90天之后需要再次申请，过程和这次一样。</p><h2 id="使用Nginx配置SSL"><a href="#使用Nginx配置SSL" class="headerlink" title="使用Nginx配置SSL"></a>使用Nginx配置SSL</h2><p>把下载的两个文件重命名为domain.crt和domain.key,然后配置nginx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">server_name kangyonggan.com;</span><br><span class="line">    listen 443;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /root/ssl/domain.crt;</span><br><span class="line">    ssl_certificate_key /root/ssl/domain.key;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设定访问静态文件直接读取不经过tomcat</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">proxy_pass http://localhost:8080;</span><br><span class="line">root /WEB-INF/static/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载nginx的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问<a href="https://kangyonggan.com和https://www.kangyonggan.com" target="_blank" rel="noopener">https://kangyonggan.com和https://www.kangyonggan.com</a></p><p><img src="/uploads/https12.png" alt="https"></p><p><img src="/uploads/https13.png" alt="https"></p><p>虽然可以访问https了，但是原本的http仍然可以访问，所以还需要再配置。</p><h2 id="http重定向到https"><a href="#http重定向到https" class="headerlink" title="http重定向到https"></a>http重定向到https</h2><p>把原本80端口的server配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # proxy_pass http://localhost:8080;</span><br><span class="line">                return 301 https://kangyonggan.com$request_uri;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问http的网站，就会被重定向到https了。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>持续集成工具TeamCity的安装和使用</title>
      <link href="/2018/08/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7TeamCity%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/06/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7TeamCity%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>TeamCity是一款功能强大的持续集成（Continue Integration）工具。</p><p>和IntelliJ IDEA同属于JetBrains公司，因此，TeamCity可以和IDEA无缝集成，通俗一点说，就是可以在IDEA上一键发布。</p><p>官方地址：<a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/</a><br>官方文档：<a href="https://confluence.jetbrains.com/display/TCD9/TeamCity+Documentation" target="_blank" rel="noopener">https://confluence.jetbrains.com/display/TCD9/TeamCity+Documentation</a></p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、windows 或 Mac 或 Linux<br>2、配置<code>JAVA_HOME</code>环境变量<br>3、下载安装包<a href="https://www.jetbrains.com/teamcity/download/" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/download/</a></p><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>以mac系统为例, 我下载的安装包为<code>TeamCity-2017.2.1.tar.gz</code>。</p><h3 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /Users/kyg/Downloads/TeamCity-2017.2.1.tar.gz -C /Users/kyg/install/</span><br></pre></td></tr></table></figure><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /Users/kyg/install/TeamCity/bin/runAll.sh start</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /Users/kyg/install/TeamCity/bin/runAll.sh stop</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://127.0.0.1:8111" target="_blank" rel="noopener">http://127.0.0.1:8111</a></p><p>TeamCity内置了一个tomcat容器，默认端口为8111，可以在<br><code>/Users/kyg/install/TeamCity/conf/server.xml</code>修改端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8111&quot; ...</span><br></pre></td></tr></table></figure><p>首次访问，会让你选择存放配置的目录， 如下图：</p><p><img src="/uploads/tc-01.png" alt=""></p><p>默认即可，点击<code>Proceed</code>， 接下来是选择数据库，如下图：</p><p><img src="/uploads/tc-02.png" alt=""></p><p>这里我选择的是mysql，选择mysql后，需要把mysql的驱动包(可以从本地maven仓库中找到)拷贝到<br><code>/Users/kyg/.BuildServer/lib/jdbc</code>目录下，然后点击<code>Refresh JDBC Drivers</code>, 如果jar包没问题，会出现下面的界面：</p><p><img src="/uploads/tc-03.png" alt=""></p><p>最后填写jdbc连接的相关信息后点击<code>Proceed</code>，需要先自己创建一个数据库<code>teamcity</code><br>下一步就是接受条款，不多说。</p><p>然后就是让我们创建一个管理员, 如下图：</p><p><img src="/uploads/tc-04.png" alt=""></p><p>创建完成后会直接登录，并让我们补全个人信息，如下图：</p><p><img src="/uploads/tc-05.png" alt=""></p><p>到此，TeamCity就算安装完毕了，接下来就是配置一个项目，用于持续集成。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="/uploads/tc-06.png" alt=""></p><p>此处我使用的是github上的项目。<br><img src="/uploads/tc-07.png" alt=""></p><p><img src="/uploads/tc-08.png" alt=""></p><p>如果是maven项目，它会自动识别出，并推荐你使用它的构建步骤，这里选不选都行，因为回头可以修改，基本上必须修改。<br><img src="/uploads/tc-09.png" alt=""></p><p><img src="/uploads/tc-10.png" alt=""></p><p>勾选后，跳转到构建步骤界面，这里你可以自由配置自己的构建步骤，比如<br>第一步：更新代码并打包<br>第二步：把war包拷贝到服务器<br>第三步：执行几个shell命令，停止服务+替换war包+启动服务</p><p>下面是我的配置，可供参考：<br><img src="/uploads/tc-11.png" alt=""></p><p>以及三个步骤的具体配置：<br><img src="/uploads/tc-12.png" alt=""></p><p><img src="/uploads/tc-13.png" alt=""></p><p><img src="/uploads/tc-14.png" alt=""></p><p>接下来就可以尝试启动了，点击右上角的<code>run</code>， 如果运气好，就会发布成功。</p><p>这个过程会很慢甚至会失败，因为你没有配置maven的<code>settings.xml</code><br>它可能找不到你的仓库，如果你用的全部都是中央仓库的jar那就没问题</p><p>为了保证一个服务器只有一个本地仓库，最好指定一下settings.xml<br>如下图：<br><img src="/uploads/tc-15.png" alt=""></p><p>到此，算是搞定了，但是它还有另外一种操作，那就是集成在IDEA中。</p><h2 id="集成到IDEA"><a href="#集成到IDEA" class="headerlink" title="集成到IDEA"></a>集成到IDEA</h2><p>在idea中搜索插件<code>teamcity</code>，安装后重启。<br><img src="/uploads/tc-16.png" alt=""></p><p>重启后，会发现下面3点变化，右下角的那个图标表示暂未登录到TeamView。<br><img src="/uploads/tc-17.png" alt=""></p><p>点击右下角的图标登录TeamView：<br><img src="/uploads/tc-18.png" alt=""></p><p>登录成功后，即可在IDEA中一键发布项目了。<br><img src="/uploads/tc-19.png" alt=""></p><p>这样的话，一个IDEA就可以开发代码，运行项目，控制版本，操作数据库，一键发布，强大的不要不要的。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA自动生成setter方法丢失is</title>
      <link href="/2018/08/06/IntelliJ%20IDEA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90setter%E6%96%B9%E6%B3%95%E4%B8%A2%E5%A4%B1is/"/>
      <url>/2018/08/06/IntelliJ%20IDEA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90setter%E6%96%B9%E6%B3%95%E4%B8%A2%E5%A4%B1is/</url>
      <content type="html"><![CDATA[<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>有一个实体类Demo，他有一个boolean类型的属性isUpdate。</p><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p>如果使用idea自动生成setter方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void setUpdate(boolean update) &#123;</span><br><span class="line">    isUpdate = update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端请求"><a href="#前端请求" class="headerlink" title="前端请求"></a>前端请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.post(&quot;xxxxx/update&quot;, &#123;</span><br><span class="line">    isUpdate: true</span><br><span class="line">&#125;, function(data,status)&#123;</span><br><span class="line">    alert(&quot;数据: \n&quot; + data + &quot;\n状态: &quot; + status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="spring注入"><a href="#spring注入" class="headerlink" title="spring注入"></a>spring注入</h3><p>我们在前端请求后台controller时，controller方法的参数是实体类Demo，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;update&quot;, method = RequestMethod.POST)</span><br><span class="line">public String update(Demo demo) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    System.out.println(&quot;isUpdate is &quot; + demo.getIsUpdate());</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isUpdate is false</span><br></pre></td></tr></table></figure><p>说明spring在注入时找不到isUpdate对应的setter方法。</p><h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h3><p>如果使用eclipse自动生成setter方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void setIsUpdate(boolean isUpdate) &#123;</span><br><span class="line">    this.isUpdate = isUpdate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换成eclipse之后，生成的setter就是好的了, 如果使用lombok插件自动生成setter也是好的</p><blockquote><p>说明：只有属性是boolean或者Boolean时，并且以is开头的字段，使用idea自动生成setter时才会丢失is。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud07-使用docker部署SpringCloud项目</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud07-%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2SpringCloud%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud07-%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2SpringCloud%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://blog.csdn.net/forezp/article/details/70198649" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70198649</a></li><li><a href="http://www.runoob.com/docker/docker-hello-world.html" target="_blank" rel="noopener">http://www.runoob.com/docker/docker-hello-world.html</a></li><li><a href="https://blog.csdn.net/lvyuan1234/article/details/69255944" target="_blank" rel="noopener">https://blog.csdn.net/lvyuan1234/article/details/69255944</a></li></ul><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>各平台docker下载地址：<a href="http://get.daocloud.io/" target="_blank" rel="noopener">http://get.daocloud.io/</a></p><a id="more"></a><h3 id="docker容器常用命令"><a href="#docker容器常用命令" class="headerlink" title="docker容器常用命令"></a>docker容器常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># 查看docker的版本号</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker --version</span><br><span class="line">Docker version 1.12.3, build 6b644ec</span><br><span class="line"></span><br><span class="line"># 查看docker的基本信息</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker version</span><br><span class="line">Containers: 3</span><br><span class="line"> Running: 1</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 2</span><br><span class="line">Images: 10</span><br><span class="line">Server Version: 1.12.3</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 运行一个容器[-d后台运行，-p端口号，-t容器名称or镜像ID]</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker run -d -p 8761:8761 -t sc02-eureka-server:0.0.1-SNAPSHOT</span><br><span class="line">d501ba7a268c79492c176b232e69290ba32fcf47fb4dba2668136880b0c49c5d</span><br><span class="line"></span><br><span class="line">## 查看正在运行的容器</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">cd4d076d8a7e        sc02-eureka-server:0.0.1-SNAPSHOT   &quot;java -Djava.security&quot;   9 minutes ago       Up 9 minutes        0.0.0.0:8761-&gt;8761/tcp   condescending_mcclintock</span><br><span class="line"></span><br><span class="line">## 查看容器所使用的端口</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker port cd4d076d8a7e</span><br><span class="line">8761/tcp -&gt; 0.0.0.0:8761</span><br><span class="line"></span><br><span class="line">## 查看指定的容器ID的[实时]日志</span><br><span class="line">docker logs -f cd4d076d8a7e</span><br><span class="line"></span><br><span class="line">## 查看容器的进程[PID]</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker top cd4d076d8a7e</span><br><span class="line">PID                 USER                TIME                COMMAND</span><br><span class="line">2197                root                0:34                java -Djava.security.egd=file:/dev/./urandom -jar /app.jar</span><br><span class="line"></span><br><span class="line"># 查看容器的底层信息</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker inspect cd4d076d8a7e</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;cd4d076d8a7e286c18cdc9efddb3923d1c02c3989fa475436e2996fb9fac0345&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2018-06-21T06:22:07.34160656Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;java&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-Djava.security.egd=file:/dev/./urandom&quot;,</span><br><span class="line">            &quot;-jar&quot;,</span><br><span class="line">            &quot;/app.jar&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 2197,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 停止容器</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker stop cd4d076d8a7e</span><br><span class="line">cd4d076d8a7e</span><br><span class="line"></span><br><span class="line"># 启动容器</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker start cd4d076d8a7e</span><br><span class="line">cd4d076d8a7e</span><br><span class="line"></span><br><span class="line"># 移除容器[-f可移除运行中的容器]</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker rm -f cd4d076d8a7e</span><br><span class="line">cd4d076d8a7e</span><br></pre></td></tr></table></figure><h3 id="docker镜像常用命令"><a href="#docker镜像常用命令" class="headerlink" title="docker镜像常用命令"></a>docker镜像常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 列出镜像列表</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">sc02-eureka-server   0.0.1-SNAPSHOT      a7a90edc7d8d        31 minutes ago      732.6 MB</span><br><span class="line">&lt;none&gt;               &lt;none&gt;              93487316dcfd        34 minutes ago      732.6 MB</span><br><span class="line">java                 8                   d23bdf5b1b1b        17 months ago       643.2 MB</span><br><span class="line"></span><br><span class="line"># 获取一个新的镜像</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker pull ubuntu:13.10</span><br><span class="line"></span><br><span class="line"># 查找镜像</span><br><span class="line">kangyonggans-MacBook-Pro:~ kyg$ docker search eureka</span><br><span class="line"></span><br><span class="line"># 构建镜像[docker-maven-plugin]</span><br><span class="line">docker build</span><br></pre></td></tr></table></figure><h2 id="修改eureka-server项目"><a href="#修改eureka-server项目" class="headerlink" title="修改eureka-server项目"></a>修改<code>eureka-server</code>项目</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;project.name&#125;:$&#123;project.version&#125;&lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;skipDockerBuild&gt;false&lt;/skipDockerBuild&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建<code>Dockerfile</code></h3><ol><li>在<code>src/main</code>目录下创建目录<code>docker</code></li><li>在<code>src/main/docker</code>目录下创建文件<code>Dockerfile</code>和<code>runboot.sh</code></li><li><code>Dockerfile</code>文件内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基于哪个镜像</span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line"># 将本地文件夹挂载到当前容器</span><br><span class="line">VOLUME /tmp</span><br><span class="line"></span><br><span class="line"># 拷贝文件到容器，也可以直接写成ADD eureka-server-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line">ADD eureka-server-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line">RUN bash -c &apos;touch /app.jar&apos;</span><br><span class="line"></span><br><span class="line"># 开放8761端口</span><br><span class="line">EXPOSE 8761</span><br><span class="line"></span><br><span class="line"># 配置容器启动后执行的命令</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package docker:build</span><br></pre></td></tr></table></figure><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8761:8761 -t eureka-server:0.0.1-SNAPSHOT</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问：<a href="http://localhost:8761/" target="_blank" rel="noopener">http://localhost:8761/</a></p><h2 id="采用docker-compose启动镜像"><a href="#采用docker-compose启动镜像" class="headerlink" title="采用docker-compose启动镜像"></a>采用docker-compose启动镜像</h2><p>在项目根目录下创建文件<code>docker-compose.yml</code>: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eureka-server:</span><br><span class="line">  image: eureka-server:0.0.1-SNAPSHOT</span><br><span class="line">  restart: always</span><br><span class="line">  ports:</span><br><span class="line">    - 8761:8761</span><br></pre></td></tr></table></figure><p>然后再执行命令即可启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud06-Eureka-高可用</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud06-Eureka-%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud06-Eureka-%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/sosfnima/article/details/53178305" target="_blank" rel="noopener">https://blog.csdn.net/sosfnima/article/details/53178305</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>服务注册中心的高可用，其实就是冗余一个注册中心，当其中一个注册中心挂了的时候另外一个还可以继续使用，这就是注册中心的高可用。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>启动两个服务注册中心，并注册一个服务，此时两个注册中心都有此服务，kill掉其中一个注册中心，另外一个注册中心还能继续使用。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>这篇文章的实验环境是基于《学习SpringCloud03-Eureka》中的几个项目的。</p><h2 id="改造eureka-server"><a href="#改造eureka-server" class="headerlink" title="改造eureka-server"></a>改造eureka-server</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>添加多环境的配置，当环境是1时，启动注册中心1，当环境是2时启动注册中心2。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;2&lt;/id&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;env&gt;2&lt;/env&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line">&lt;profile&gt;</span><br><span class="line">&lt;id&gt;1&lt;/id&gt;</span><br><span class="line">&lt;activation&gt;</span><br><span class="line">&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">&lt;/activation&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;env&gt;1&lt;/env&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: @env@</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # registerWithEureka: false 和 fetchRegistry: false 表明自己是一个eureka server.</span><br><span class="line">    registerWithEureka: false</span><br><span class="line">    fetchRegistry: false</span><br></pre></td></tr></table></figure><h3 id="application-1-yml"><a href="#application-1-yml" class="headerlink" title="application-1.yml"></a>application-1.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8761</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost2:8771/eureka/</span><br></pre></td></tr></table></figure><h3 id="application-2-yml"><a href="#application-2-yml" class="headerlink" title="application-2.yml"></a>application-2.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8771</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost2</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动注册中心1"><a href="#启动注册中心1" class="headerlink" title="启动注册中心1"></a>启动注册中心1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean intsall</span><br><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><p>此时可访问：localhost:8761</p><h3 id="启动注册中心2"><a href="#启动注册中心2" class="headerlink" title="启动注册中心2"></a>启动注册中心2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean intsall -P2</span><br><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><p>此时可访问：localhost2:8771</p><blockquote><p>需要配置一下host文件，127.0.0.1 localhost2</p></blockquote><h3 id="启动一个服务提供者"><a href="#启动一个服务提供者" class="headerlink" title="启动一个服务提供者"></a>启动一个服务提供者</h3><p>服务提供者的serviceUrl指向1和2都行，观察localhost:8761和localhost2:8771，会发现都有服务。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud04-zuul</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud04-zuul/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud04-zuul/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/forezp/article/details/70148833/" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70148833/</a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>Zuul的主要功能是路由转发和过滤器，本文对此进行实验，请求/a/hi?name=hahaha转发到a服务，请求/b/hi?name=hahaha转发到b服务。</p><p>zuul主要有以下功能：</p><ul><li>认证</li><li>洞察</li><li>压力测试</li><li>金丝雀测试</li><li>动态路由</li><li>服务迁移</li><li>负载脱落</li><li>安全</li><li>静态响应处理</li><li>主动/主动流量管理</li></ul><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>这篇文章的实验环境是基于《学习SpringCloud03-Eureka》中的几个项目的，先启动注册中<code>eureka-server</code>, 再启动服务提供者1<code>eureka-provider1</code>。<br>将服务提供者2<code>eureka-provider2</code>的Application Name改为<code>service-hello</code>并启动。</p><h2 id="路由网关"><a href="#路由网关" class="headerlink" title="路由网关"></a>路由网关</h2><p>创建一个新项目<code>eureka-zuul</code>。</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;spring-cloud.version&gt;Finchley.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http://localhost:8761/eureka/</span><br><span class="line">server:</span><br><span class="line">  port: 8765</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: service-zuul</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    a:</span><br><span class="line">      path: /a/**</span><br><span class="line">      serviceId: service-hi</span><br><span class="line">    b:</span><br><span class="line">      path: /b/**</span><br><span class="line">      serviceId: service-hello</span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line">@EnableZuulProxy</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后分别访问</p><ul><li><a href="http://localhost:8765/a/hi?name=abc" target="_blank" rel="noopener">http://localhost:8765/a/hi?name=abc</a><br>响应：<code>hi abc,i am from port:8762</code></li><li><a href="http://localhost:8765/b/hi?name=abc" target="_blank" rel="noopener">http://localhost:8765/b/hi?name=abc</a><br>响应：<code>hi abc,i am from port:8763</code></li></ul><p>zuul还有很多强大的功能，学习入门阶段浅尝辄止即可，待后面搭建项目时再系统的学习。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud03-hystrix</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud03-hystrix/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud03-hystrix/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://blog.csdn.net/forezp/article/details/70148833/" target="_blank" rel="noopener">https://blog.csdn.net/forezp/article/details/70148833/</a></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>尝试使用熔断器。即服务消费者去调用服务提供者的时候，如果由于各种原因提供者不可用了，并且达到一个阀值（Hystric 是5秒20次）断路器将会被打开。当提供者再次可用时，调用会恢复正常。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>这篇文章的实验环境是基于《学习SpringCloud03-Eureka》中的几个项目的，先启动注册中<code>eureka-server</code>, 再启动服务提供者1<code>eureka-provider1</code>，服务提供者2就不用启动了，这篇文章不是为了实验集群和负载均衡。</p><h2 id="改造消费者"><a href="#改造消费者" class="headerlink" title="改造消费者"></a>改造消费者</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>在<code>eureka-consumer</code>的pom中加入依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><p>添加注解<code>@EnableHystrix</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableHystrix</span><br><span class="line">public class Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="HelloService-java"><a href="#HelloService-java" class="headerlink" title="HelloService.java"></a>HelloService.java</h3><p>改造后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/20/18</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class HelloService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @HystrixCommand(fallbackMethod = &quot;hiError&quot;)</span><br><span class="line">    public String hiService(String name) &#123;</span><br><span class="line">        return restTemplate.getForObject(&quot;http://SERVICE-HI/hi?name=&quot;   name, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String hiError(String name) &#123;</span><br><span class="line">        return &quot;hi,&quot;   name   &quot;,sorry,error!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动后访问<a href="http://localhost:8764/hi?name=小新。会有正常的响应，然后把服务提供者（eureka-provider1）关闭，再次请求，响应如下：" target="_blank" rel="noopener">http://localhost:8764/hi?name=小新。会有正常的响应，然后把服务提供者（eureka-provider1）关闭，再次请求，响应如下：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hi,forezp,sorry,error!</span><br></pre></td></tr></table></figure><p>再次启动服务提供者（eureka-provider1）并发起请求，又可以正常响应。</p><blockquote><p>注1. 本次没能实验出熔断阈值（5秒20次）<br>注2. 貌似还有其他流弊的用法，本次入门暂不多研究，后面再细看。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （四）</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="挂起-amp-激活"><a href="#挂起-amp-激活" class="headerlink" title="挂起 &amp; 激活"></a>挂起 &amp; 激活</h2><p>当一个流程定义被挂起后，如果再去尝试启动一个流程，那么就会抛一个异常<code>ActivitiException</code>, 测试代码如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ActivitiException;</span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo08 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    private static final String DEF_KEY = &quot;LeaveProcess&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 挂起</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void suspend() throws Exception &#123;</span><br><span class="line">        processEngine.getRepositoryService().suspendProcessDefinitionByKey(DEF_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 激活</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void active() throws Exception &#123;</span><br><span class="line">        processEngine.getRepositoryService().activateProcessDefinitionByKey(DEF_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 启动一个工作流</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 业务主键，比如请假申请, 就可以使用请假的流水号</span><br><span class="line">            String businessKey = &quot;20170411000002&quot;;</span><br><span class="line">            // 实例参数</span><br><span class="line">            Map&lt;String, Object&gt; variables = new HashMap&lt;&gt;(1);</span><br><span class="line">            // 谁请假?</span><br><span class="line">            variables.put(&quot;user&quot;, &quot;lisi&quot;);</span><br><span class="line">            processEngine.getRuntimeService().startProcessInstanceByKey(DEF_KEY, businessKey, variables);</span><br><span class="line">        &#125; catch (ActivitiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行挂起方法后, 再运行启动工作流的方法抛的异常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.activiti.engine.ActivitiException: Cannot start process instance. Process definition 员工请假申请 (id = LeaveProcess:1:4) is suspended</span><br></pre></td></tr></table></figure><blockquote><ul><li>重复挂起也会抛异常：org.activiti.engine.ActivitiException: Cannot set suspension state ‘suspended’ for ProcessDefinitionEntity[LeaveProcess:1:4]’: already in state ‘suspended’.</li><li>重复激活也会抛异常：org.activiti.engine.ActivitiException: Cannot set suspension state ‘active’ for ProcessDefinitionEntity[LeaveProcess:1:4]’: already in state ‘active’.</li></ul></blockquote><h2 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h2><p>需求：部门经理想查询张三的请假申请。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo09 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需求：部门经理想查询张三的请假申请。</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void query() throws Exception &#123;</span><br><span class="line">        List&lt;Task&gt; tasks = processEngine.getTaskService()</span><br><span class="line">                .createTaskQuery()</span><br><span class="line">                .taskAssignee(&quot;manager&quot;)</span><br><span class="line">                .processVariableValueEquals(&quot;user&quot;, &quot;zhangsan&quot;)</span><br><span class="line">                .list();</span><br><span class="line"></span><br><span class="line">        for (Task task : tasks) &#123;</span><br><span class="line">            System.out.println(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管activiti提供的api已经很强大很完善了，但是任然满足不了脑洞大开的需求。比如：部门经理想查询张三和李四的请假申请。</p><p>在activiti现有的api中我是没找到这种api，如下图：</p><p><img src="/uploads/ARTICLE20180412bcadfe1368eafc10393bfdb6438b779f98f883e2.png" alt=""></p><p>也许有其他曲线救国的方法，在此不多研究，我想说的是，如果api中没有提供方法，我们可以使用本地查询，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.acti;</span><br><span class="line"></span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @date 4/11/18</span><br><span class="line"> */</span><br><span class="line">public class Demo10 extends AbstractServiceTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 需求：部门经理想查询张三和李四的请假申请。</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void query() throws Exception &#123;</span><br><span class="line">        String sql = &quot;SELECT a.* FROM ACT_RU_TASK a &quot;</span><br><span class="line">                + &quot;LEFT JOIN ACT_RU_VARIABLE b &quot;</span><br><span class="line">                + &quot;ON a.PROC_INST_ID_ = b.PROC_INST_ID_ WHERE &quot;</span><br><span class="line">                + &quot;b.NAME_ = &apos;user&apos; AND b.TEXT_ IN (&apos;zhangsan&apos;, &apos;lisi&apos;)&quot;;</span><br><span class="line"></span><br><span class="line">        List&lt;Task&gt; tasks = processEngine.getTaskService()</span><br><span class="line">                .createNativeTaskQuery()</span><br><span class="line">                .sql(sql).list();</span><br><span class="line"></span><br><span class="line">        for (Task task : tasks) &#123;</span><br><span class="line">            System.out.println(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java.sql.SQLException:connection_holder_is_null</title>
      <link href="/2018/08/06/java.sql.SQLException:connection_holder_is_null/"/>
      <url>/2018/08/06/java.sql.SQLException:connection_holder_is_null/</url>
      <content type="html"><![CDATA[<h2 id="异常信息"><a href="#异常信息" class="headerlink" title="异常信息"></a>异常信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: connection holder is null</span><br></pre></td></tr></table></figure><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 关闭长时间不使用的连接 --&gt;</span><br><span class="line">&lt;property name=&quot;removeAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 打开removeAbandoned功能 --&gt;</span><br><span class="line">&lt;property name=&quot;removeAbandonedTimeout&quot; value=&quot;1200&quot; /&gt; &lt;!-- 1200秒，也就是20分钟 --&gt;</span><br><span class="line">&lt;property name=&quot;logAbandoned&quot; value=&quot;true&quot; /&gt; &lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>removeAbandoned 设置为 false，不建议。</li><li>removeAbandonedTimeout 延长这个过期时间，也不是太建议。</li><li>指定不要关闭某个方法的连接（how？）</li></ol>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(一)</title>
      <link href="/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%B8%80)/"/>
      <url>/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><ul><li>IntelliJ IDEA下载地址：<a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a></li><li>TeamCity下载地址：<a href="https://www.jetbrains.com/teamcity/download" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/download</a></li><li>Upsource下载地址：<a href="https://www.jetbrains.com/upsource/download" target="_blank" rel="noopener">https://www.jetbrains.com/upsource/download</a></li><li>TeamCity Plugin：<a href="https://plugins.jetbrains.com/plugin/1820-teamcity-integration" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/1820-teamcity-integration</a></li><li>Upsource Pligin：<a href="https://plugins.jetbrains.com/plugin/7431-upsource-integration" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7431-upsource-integration</a></li><li>阿里巴巴代码质量检测插件：<a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</a></li></ul><p>后面三个是idea插件，如果电脑能联网，可以在插件中搜索到直接安装，如果是公司内网，可以下载离线安装包，然后手动安装idea插件。</p><p>安装IDEA插件方法：<code>Preferences &gt; Plugins &gt; Install plugin from disk...</code></p><a id="more"></a><h2 id="TeamCity的安装"><a href="#TeamCity的安装" class="headerlink" title="TeamCity的安装"></a>TeamCity的安装</h2><blockquote><p>以下都是以我博客服务器（ubuntu 16.04.4）为例</p></blockquote><h3 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf soft/TeamCity-2017.2.3.tar.gz  -C install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/TeamCity/bin/runAll.sh start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/TeamCity/bin/runAll.sh stop</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://kangyonggan.com:8111">http://kangyonggan.com:8111</a></p><p>TeamCity内置了一个tomcat容器，默认端口为8111，可以在<br><code>/home/hxzq/install/TeamCity/conf/server.xml</code>修改端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8111&quot; ...</span><br></pre></td></tr></table></figure><p><img src="/uploads/ARTICLE20180401b89693552301f2e1d60c3a780427f167a4738378.png" alt=""></p><p>默认即可，点击<code>Proceed</code>， 接下来是选择数据库，如下图：</p><p><img src="/uploads/ARTICLE201804014eb4101e00e74b27246e5ad2c387ebc2b149c35b.png" alt=""></p><p>这里我选择的是mysql，选择mysql后，需要把mysql的驱动包(可以从本地maven仓库中找到)拷贝到<br><code>/home/hxzq/.BuildServer/lib/jdbc</code>目录下，然后点击<code>Refresh JDBC Drivers</code>, 如果jar包没问题，会出现下面的界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.34.jar /home/hxzq/.BuildServer/lib/jdbc/</span><br></pre></td></tr></table></figure><p><img src="/uploads/ARTICLE2018040187bd260ade064bf05398f4c6a05612a27606d408.png" alt=""></p><p>最后填写jdbc连接的相关信息后点击<code>Proceed</code>，需要先自己创建一个数据库<code>teamcity</code><br>下一步就是接受条款，不多说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS teamcity;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE teamcity</span><br><span class="line">  DEFAULT CHARACTER SET utf8</span><br><span class="line">  COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p>然后就是让我们创建一个管理员, 如下图：</p><p><img src="/uploads/ARTICLE2018040192a3a27d4ed5cc2c1fe4b149c8d1a57e8122a2e3.png" alt=""></p><p>创建完成后会直接登录，并让我们补全个人信息，如下图：</p><p><img src="/uploads/ARTICLE20180401b2cbe1b9fbf4274961a274da47d9daf9ec109958.png" alt=""></p><p>到此，TeamCity就算安装完毕了，接下来就是配置一个项目，用于持续集成。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="/uploads/ARTICLE2018040164a3c5faec96dfedb57c97f0b0f7515353ec7bde.png" alt=""></p><p>此处我使用的是github上的项目。<br><img src="/uploads/ARTICLE2018040114db8b0e9e377d0f3d04b5641a351780877ba0e9.png" alt=""></p><p><img src="/uploads/ARTICLE2018040190c432c5b896215b65196e70be7329b53479978a.png" alt=""></p><p>如果是maven项目，它会自动识别出，并推荐你使用它的构建步骤，这里选不选都行，因为回头可以修改，基本上必须修改。<br><img src="/uploads/ARTICLE20180401945610b306ddc518538f8b34fd225bb99ca0b047.png" alt=""></p><p>勾选后，跳转到下面的构建步骤界面，这里你可以自由配置自己的构建步骤</p><p><img src="/uploads/ARTICLE2018040119397adc0f74429b8bfd0ebbe8bb2a3e636c6e43.png" alt=""></p><p>比如我配置的三个构建步骤：  </p><ul><li>第一步：更新代码并打包</li><li>第二步：把war包拷贝到服务器</li><li>第三步：执行几个shell命令，停止服务+替换war包+启动服务</li></ul><h3 id="配置第一步"><a href="#配置第一步" class="headerlink" title="配置第一步"></a>配置第一步</h3><p>点击<code>Edit</code><br><img src="/uploads/ARTICLE2018040142d927ce6004bb654d9e2da17b9ddc413604006f.png" alt=""></p><p><img src="/uploads/ARTICLE2018040169fed61178e0e18087a094c631c280880dbdf920.png" alt=""></p><p>如果配置的settings.xml不管用，可以在下面上传settings.xml文件</p><p><img src="/uploads/ARTICLE20180401ab7f2e264df5a3e87c93d11c1104da6cb39c7ef3.png" alt=""></p><h2 id="配置第二步"><a href="#配置第二步" class="headerlink" title="配置第二步"></a>配置第二步</h2><p>点击<code>Add build setup</code></p><p><img src="/uploads/ARTICLE201804010377f4258ce46f3fb1ef2c6f93ea0928a70f45b8.png" alt=""></p><p><img src="/uploads/ARTICLE2018040157a4a890be0e9580e47679a58a504c31b024f2d3.png" alt=""></p><p>如果不知道，第一步打出的war包在什么路径，可以先随意写几个字符，后面尝试运行时，会打印第一步的日志，从日志中可以看到war包路径。</p><p>接下来就可以尝试启动了，点击右上角的<code>run</code>， 注意看日志，顺便看看第一步打的war包的路径。</p><blockquote><p>首次构建，时间会比较久，需要耐心等待</p></blockquote><p><img src="/uploads/ARTICLE20180401ea6ffbce26284267db7f2cc11729e6144aab803d.png" alt=""></p><h3 id="配置第三步"><a href="#配置第三步" class="headerlink" title="配置第三步"></a>配置第三步</h3><p>点击<code>Add build setup</code></p><p><img src="/uploads/ARTICLE201804016153dda66dbc3992f894a5ca779771ad5cb1f513.png" alt=""></p><blockquote><p>我再第一步打的war包路径为<code>/home/hxzq/install/TeamCity/buildAgent/work/23d0c25675dc1f18/blog-web/target/blog-web-1.0-SNAPSHOT.war</code>，可供参考。</p></blockquote><p>其中ssh命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/shutdown.sh</span><br><span class="line"></span><br><span class="line">rm -rf /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/*</span><br><span class="line"></span><br><span class="line">unzip -d /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/ /home/hxzq/data/wars/blog-*.war </span><br><span class="line"></span><br><span class="line">ln -s /home/hxzq/data/blog/upload/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line">ln -s /home/hxzq/data/blog/cover/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line">ln -s /home/hxzq/data/blog/rss/ /home/hxzq/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br><span class="line"></span><br><span class="line">sh /home/hxzq/install/apache-tomcat-8.5.6-blog/bin/startup.sh</span><br><span class="line"></span><br><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure><p>配置完成后界面如下：<br><img src="/uploads/ARTICLE201804019b2233e08610bf055fa4767a0af395580886ad2a.png" alt=""></p><p>到此，算是搞定了，但是它还有另外一种操作，那就是集成在IDEA中。</p><h2 id="集成到IDEA"><a href="#集成到IDEA" class="headerlink" title="集成到IDEA"></a>集成到IDEA</h2><p>在idea中搜索插件<code>teamcity</code>，安装后重启。<br><img src="/uploads/tc-16.png" alt=""></p><p>重启后，会发现下面3点变化，右下角的那个图标表示暂未登录到TeamView。<br><img src="/uploads/tc-17.png" alt=""></p><p>点击右下角的图标登录TeamView：<br><img src="/uploads/tc-18.png" alt=""></p><p>登录成功后，即可在IDEA中一键发布项目了。<br><img src="/uploads/tc-19.png" alt=""></p><p>这样的话，一个IDEA就可以开发代码，运行项目，控制版本，操作数据库，一键发布，强大的不要不要的。</p><p>但是！如果代码没有改变，是不能remote run的，我也没有找到怎么在没改变代码的情况下运行。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习SpringCloud01-HelloWorld</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud01-HelloWorld/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0SpringCloud01-HelloWorld/</url>
      <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-dalston.html</a><br><a href="http://projects.spring.io/spring-cloud/#quick-start" target="_blank" rel="noopener">http://projects.spring.io/spring-cloud/#quick-start</a></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br></pre></td></tr></table></figure><h3 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/20/18</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        log.info(&quot;Hello World&quot;);</span><br><span class="line">        return &quot;Hello World!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Finchley.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h3 id="Application-java-1"><a href="#Application-java-1" class="headerlink" title="Application.java"></a>Application.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.sc;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 6/20/18</span><br><span class="line"> */</span><br><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    RestTemplate restTemplate() &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return this.restTemplate.getForObject(&quot;http://localhost:8090/hello&quot;, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kangyonggans-MacBook-Pro:~ kyg$ curl localhost:8080/hello</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA集开发、持续集成、代码质量检测和代码审核于一体(二)</title>
      <link href="/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%BA%8C)/"/>
      <url>/2018/08/06/IntelliJ%20IDEA%E9%9B%86%E5%BC%80%E5%8F%91%E3%80%81%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E3%80%81%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%A0%B8%E4%BA%8E%E4%B8%80%E4%BD%93(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="Upsource的安装"><a href="#Upsource的安装" class="headerlink" title="Upsource的安装"></a>Upsource的安装</h2><h3 id="解压到指定目录"><a href="#解压到指定目录" class="headerlink" title="解压到指定目录"></a>解压到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip soft/upsource-2017.3.2888.zip -d install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/upsource-2017.3.2888/bin/upsource.sh start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh install/upsource-2017.3.2888/bin/upsource.sh stop</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://kangyonggan.com:8081/">http://kangyonggan.com:8081/</a><br>upsource会从8080端口开始，找到一个不是正在使用的端口使用，比如说8080端口没在使用的话，他就会使用8080端口</p><p><img src="/uploads/itu-20.png" alt=""></p><p>配置应用地址和端口，保持默认即可</p><p><img src="/uploads/itu-21.png" alt=""></p><p>设置管理员密码</p><p><img src="/uploads/itu-22.png" alt=""></p><p>使用默认的60天免费授权码</p><p><img src="/uploads/itu-23.png" alt=""></p><p>接下来就是等待配置，可能需要几分钟的时间</p><p><img src="/uploads/itu-24.png" alt=""><br><img src="/uploads/itu-25.png" alt=""></p><p>加载完成之后，如下图：</p><p><img src="/uploads/itu-26.png" alt=""></p><p>点击右上角的<code>Log in...</code>，登录后提示你完善个人信息</p><p><img src="/uploads/itu-27.png" alt=""></p><p>当我填写邮箱后点击保存，他提示我邮箱没有验证，当我点击发送验证邮件时，又提示邮件通知被禁用了</p><p>下图是开启邮件通知和smtp的配置</p><p><img src="/uploads/itu-28.png" alt=""><br><img src="/uploads/itu-29.png" alt=""><br><img src="/uploads/itu-30.png" alt=""><br><img src="/uploads/itu-31.png" alt=""><br><img src="/uploads/itu-32.png" alt=""></p><p>配置好smtp并且开启邮件通知之后，再回到profile，重新发送一个校验邮件，收到邮件后，点击邮件中的链接即可。</p><p><img src="/uploads/itu-33.png" alt=""></p><p>补充好个人信息之后，切到<code>upsource</code>视图去创建一个项目，从而开始review之路。</p><p><img src="/uploads/itu-34.png" alt=""><br><img src="/uploads/itu-35.png" alt=""><br><img src="/uploads/itu-36.png" alt=""><br><img src="/uploads/itu-37.png" alt=""></p><h2 id="集成到idea中"><a href="#集成到idea中" class="headerlink" title="集成到idea中"></a>集成到idea中</h2><p>在idea中安装upsource插件<br><img src="/uploads/itu-38.png" alt=""></p><p>重启idea后会在右下角看见up图标，点击后会弹框让你输入upsource服务器的地址，输入后弹出浏览器登录界面。</p><p><img src="/uploads/itu-39.png" alt=""></p><p>如何审核代码呢？在idea中找到要审核的代码<code>行</code>，<code>右键 &gt; upsource &gt; 留言</code></p><p><img src="/uploads/itu-40.png" alt=""></p><p>留言后，在代码行首可以看见图标，点击图标可以查看留言内容，并且可以对其进行评论或其他骚操作。</p><p><img src="/uploads/itu-41.png" alt=""></p><p>还有其他更多操作，请自行探索。</p><h2 id="代码质量检测"><a href="#代码质量检测" class="headerlink" title="代码质量检测"></a>代码质量检测</h2><p>代码质量检测是按照阿里巴巴开发规范来进行检测的，为此阿里还开发了对应的idea、eclipse插件。在idea中按照此插件如下图：</p><p><img src="/uploads/itu-42.png" alt=""></p><p>安装完成重启idea后，可以在tools中看到对应的菜单、右键菜单里也有对应的菜单，也可以使用快捷键。</p><p><img src="/uploads/itu-43.png" alt=""></p><p><img src="/uploads/itu-44.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （五）</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>需求1：查询张三的请假申请</li><li>需求2：查询张三已完成的请假申请</li><li>需求3：查询张三未完成的请假申请</li><li>需求4：查询张三指定流水的请假申请</li><li>需求5：查询部门经理的请假待办任务</li><li>需求6：查询部门经理的请假未办任务</li><li>需求7：查询部门经理的流水号为20170411000001的请假待办任务</li><li>需求8：查询某次请假申请的流转和审批历史</li></ul><a id="more"></a><h2 id="查询申请历史"><a href="#查询申请历史" class="headerlink" title="查询申请历史"></a>查询申请历史</h2><p>包含已完成的和未完成的，流程走到endEvent的叫做已完成的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricProcessInstance&gt; list = historyService</span><br><span class="line">        .createHistoricProcessInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .variableValueEquals(&quot;user&quot;, &quot;zhangsan&quot;).list();</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果需要分页查询，把list()方法换成listPage(int firstResult, int maxResults)即可。</li><li>当然也是支持排序的: orderByXxx()</li></ul></blockquote><p>只包含已完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricProcessInstance&gt; list = historyService</span><br><span class="line">        .createHistoricProcessInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey).finished()</span><br><span class="line">        .variableValueEquals(&quot;user&quot;, &quot;zhangsan&quot;).list();</span><br></pre></td></tr></table></figure><p>只包含未完成的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricProcessInstance&gt; list = historyService</span><br><span class="line">        .createHistoricProcessInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey).unfinished()</span><br><span class="line">        .variableValueEquals(&quot;user&quot;, &quot;zhangsan&quot;).list();</span><br></pre></td></tr></table></figure><p>查询指定流水（业务主键）的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">String businessKey = &quot;20170411000001&quot;;</span><br><span class="line">List&lt;HistoricProcessInstance&gt; list = historyService</span><br><span class="line">        .createHistoricProcessInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .processInstanceBusinessKey(businessKey)</span><br><span class="line">        .variableValueEquals(&quot;user&quot;, &quot;zhangsan&quot;).list();</span><br></pre></td></tr></table></figure><h2 id="查询任务"><a href="#查询任务" class="headerlink" title="查询任务"></a>查询任务</h2><p>查询部门经理待办的请假申请：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricTaskInstance&gt; tasks = historyService</span><br><span class="line">        .createHistoricTaskInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .unfinished().taskAssignee(&quot;manager&quot;)</span><br><span class="line">        .list();</span><br></pre></td></tr></table></figure><p>查询部门经理已办的请假申请：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricTaskInstance&gt; tasks = historyService</span><br><span class="line">        .createHistoricTaskInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .finished().taskAssignee(&quot;manager&quot;)</span><br><span class="line">        .list();</span><br></pre></td></tr></table></figure><p>查询部门经理的流水号为20170411000001的请假待办任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricTaskInstance&gt; tasks = historyService</span><br><span class="line">        .createHistoricTaskInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .processInstanceBusinessKey(&quot;20170411000001&quot;)</span><br><span class="line">        .taskAssignee(&quot;manager&quot;).list();</span><br></pre></td></tr></table></figure><h2 id="查询流转历史"><a href="#查询流转历史" class="headerlink" title="查询流转历史"></a>查询流转历史</h2><p>查询某次请假申请的流转和审批历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String processDefinitionKey = &quot;LeaveProcess&quot;;</span><br><span class="line">List&lt;HistoricTaskInstance&gt; tasks = historyService</span><br><span class="line">        .createHistoricTaskInstanceQuery()</span><br><span class="line">        .processDefinitionKey(processDefinitionKey)</span><br><span class="line">        .processInstanceBusinessKey(&quot;20170411000001&quot;)</span><br><span class="line">        .list();</span><br></pre></td></tr></table></figure><p>但是，结果集中没有审批意见和审批状态等信息。是不是有对应的api呢？还是说需要自己写sql？  </p><p>可不可以根据taskId查询到经理审批时传的replyMsg等流程参数呢？</p><p>好像也不行，ACT_HI_VARINST表中没有记录taskId，我也不知道为什么，有待研究…</p><p>发现可能是流程变量用的有问题，还有就是task的owner、assignee、groups以及Candidate等用的也很low，需要多多研究。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习Activiti 6.0.0 （一）</title>
      <link href="/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/08/06/%E5%AD%A6%E4%B9%A0Activiti%206.0.0%20%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="一、activiti简介"><a href="#一、activiti简介" class="headerlink" title="一、activiti简介"></a>一、activiti简介</h2><h3 id="1-1-百度百科"><a href="#1-1-百度百科" class="headerlink" title="1.1 百度百科"></a>1.1 百度百科</h3><p><a href="https://baike.baidu.com/item/activiti" target="_blank" rel="noopener">https://baike.baidu.com/item/activiti</a></p><h3 id="1-2-官方文档"><a href="#1-2-官方文档" class="headerlink" title="1.2 官方文档"></a>1.2 官方文档</h3><p><a href="https://www.activiti.org/userguide/6.latest/index.html" target="_blank" rel="noopener">https://www.activiti.org/userguide/6.latest/index.html</a></p><h3 id="1-3-下载地址"><a href="#1-3-下载地址" class="headerlink" title="1.3 下载地址"></a>1.3 下载地址</h3><p><a href="http://activiti.org/download.html" target="_blank" rel="noopener">http://activiti.org/download.html</a></p><h3 id="1-4-源码地址"><a href="#1-4-源码地址" class="headerlink" title="1.4 源码地址"></a>1.4 源码地址</h3><p><a href="https://github.com/Activiti/Activiti" target="_blank" rel="noopener">https://github.com/Activiti/Activiti</a></p><a id="more"></a><h2 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h2><h3 id="2-1-小试牛刀"><a href="#2-1-小试牛刀" class="headerlink" title="2.1 小试牛刀"></a>2.1 小试牛刀</h3><ul><li>解压<code>activiti-6.0.0.zip</code>, 把<code>activiti-6.0.0/wars/activiti-app.war</code>拷贝到tomcat的webapps目录下，并启动。</li><li>访问<a href="http://localhost:8080/activiti-app/" target="_blank" rel="noopener">http://localhost:8080/activiti-app/</a></li><li>用户名：<code>admin</code>、密码：<code>test</code></li></ul><p>但是，activiti-app默认使用的是内存数据库<code>H2</code>, 当重启后，我们在UI界面做的任何操作都不会保留。所以有必要使用其他数据库，比如MySQL。</p><h3 id="2-2-配置数据库"><a href="#2-2-配置数据库" class="headerlink" title="2.2 配置数据库"></a>2.2 配置数据库</h3><ul><li>创建一个数据库<code>acti</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS acti;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE acti DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">USE acti;</span><br></pre></td></tr></table></figure><ul><li><p>执行初始化脚本</p><ul><li><code>activiti-6.0.0/database/create/activiti.mysql.create.identity.sql</code></li><li><code>activiti-6.0.0/database/create/activiti.mysql55.create.engine.sql</code></li><li><code>activiti-6.0.0/database/create/activiti.mysql55.create.history.sql</code></li></ul></li><li><p>修改连接数据库的配置<code>activiti-app.properties</code></p></li></ul><p>这里需要说明一下：</p><ul><li>如果MySQL的版本号小于5.6, 需要执行上面提到的三个sql脚本。</li><li>如果MySQL的版本号大于等于5.6，可以不用执行mysql55的脚本，而是执行<code>activiti.mysql.create.engine.sql</code>和<code>activiti.mysql.create.history.sql</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi apache-tomcat-8.5.6/webapps/activiti-app/WEB-INF/classes/META-INF/activiti-app/activiti-app.properties</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">datasource.driver=com.mysql.jdbc.Driver</span><br><span class="line">datasource.url=jdbc:mysql://127.0.0.1:3306/acti?characterEncoding=UTF-8</span><br><span class="line"></span><br><span class="line">datasource.username=root</span><br><span class="line">datasource.password=123456</span><br><span class="line"></span><br><span class="line">hibernate.dialect=org.hibernate.dialect.MySQLDialect</span><br></pre></td></tr></table></figure><ul><li>重启即可生效。</li></ul>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDBC连接MySQL数据库的代码片段</title>
      <link href="/2018/08/06/JDBC%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2018/08/06/JDBC%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 4/25/17</span><br><span class="line"> */</span><br><span class="line">public class ExcelParse605 &#123;</span><br><span class="line"></span><br><span class="line">    private static String url = &quot;jdbc:mysql://127.0.0.1:3306/dfjz?useUnicode=true&amp;characterEncoding=UTF-8&quot;;</span><br><span class="line">    private static String username = &quot;root&quot;;</span><br><span class="line">    private static String password = &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">    private static Connection conn;</span><br><span class="line">    private static PreparedStatement ps;</span><br><span class="line">    private static ResultSet rs;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">            ps = conn.prepareStatement(&quot;SELECT bnk_resp_co FROM be_resp WHERE bnk_no = &apos;605&apos;&quot;);</span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            while (rs.next()) &#123;</span><br><span class="line">                String bnkRespCo = rs.getString(&quot;bnk_resp_co&quot;);</span><br><span class="line">                System.out.println(bnkRespCo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (rs != null) &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (ps != null) &#123;</span><br><span class="line">                    ps.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (conn != null) &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用阿里巴巴开发规范扫描我的博客发现的问题总结</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%AB%E6%8F%8F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%AB%E6%8F%8F%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%91%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>一、 在if/else/for/while/do语句中必须使用大括号，即使只有一行代码，避免使用下面的形式（发现1处）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (condition) statements;</span><br></pre></td></tr></table></figure><p>二应该写成下面这样的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (flag) &#123;</span><br><span class="line">    System.out.println(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>二、 所有的覆写方法，必须加@Override注解。 反例：getObject()与get0bject()的问题。一个是字母的O，一个是数字的0，加@Override可以准确判断是否覆盖成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错（发现25处）。</p><p>三、 Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals（发现62处）。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void f(String str)&#123;</span><br><span class="line">    String inner = &quot;hi&quot;;</span><br><span class="line">    if (inner.equals(str)) &#123;</span><br><span class="line">        System.out.println(&quot;hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四、 SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类（发现62处）。</p><p>说明：如果是JDK8的应用，可以使用instant代替Date，LocalDateTime代替Calendar，DateTimeFormatter代替SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p><p>Positive example 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static final String FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">public String getFormat(Date date)&#123;</span><br><span class="line">    SimpleDateFormat dateFormat = new SimpleDateFormat(FORMAT);</span><br><span class="line">    return sdf.format(date);</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">Positive example 2：</span><br></pre></td></tr></table></figure><p>private static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>public void getFormat(){<br>    synchronized (sdf){<br>    sdf.format(new Date());<br>    ….;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line">Positive example 3：</span><br></pre></td></tr></table></figure></p><p>private static final ThreadLocal<dateformat> DATE_FORMATTER = new ThreadLocal<dateformat>() {<br>    @Override<br>    protected DateFormat initialValue() {<br>        return new SimpleDateFormat(“yyyy-MM-dd”);<br>    }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 我玩意说是这么说，但是经过我的实验，发现SimpleDateFormat的parse确实需要加锁，但是format方法不需要。</span><br><span class="line"></span><br><span class="line">五、 不能使用过时的类或方法。 说明：java.net.URLDecoder 中的方法decode(String encodeStr) 这个方法已经过时，应该使用双参数decode(String source, String encode)（发现1处）。</span><br><span class="line"></span><br><span class="line">接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用方来说，有义务去考证过时方法的新实现是什么。</span><br><span class="line"></span><br><span class="line">六、常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长（发现6处） </span><br><span class="line"></span><br><span class="line">```            </span><br><span class="line">public class ConstantNameDemo &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * max stock count</span><br><span class="line">     */</span><br><span class="line">    public static final Long MAX_STOCK_COUNT = 50000L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></dateformat></dateformat></p><p>七、 所有的枚举类型字段必须要有注释，说明每个数据项的用途。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public enum TestEnum &#123;</span><br><span class="line">    /**</span><br><span class="line">     * agree</span><br><span class="line">     */</span><br><span class="line">    agree(&quot;agree&quot;),</span><br><span class="line">    /**</span><br><span class="line">     * reject</span><br><span class="line">     */</span><br><span class="line">    reject(&quot;reject&quot;);</span><br><span class="line">    </span><br><span class="line">    private String action;</span><br><span class="line"></span><br><span class="line">    TestEnum(String action) &#123;</span><br><span class="line">        this.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAction() &#123;</span><br><span class="line">        return action;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>八、 方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase，必须遵从驼峰形式(发现4处)</p><p>九、线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。 说明：使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题(发现8处)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</span><br><span class="line">    .setNameFormat(&quot;demo-pool-%d&quot;).build();</span><br><span class="line">ExecutorService singleThreadPool = new ThreadPoolExecutor(1, 1,</span><br><span class="line">    0L, TimeUnit.MILLISECONDS,</span><br><span class="line">    new LinkedBlockingQueue&lt;Runnable&gt;(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">singleThreadPool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class="line">singleThreadPool.shutdown();</span><br></pre></td></tr></table></figure><p>十、 不允许任何魔法值（即未经定义的常量）直接出现在代码中(发现212处)。 </p><p>Negative example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//Magic values, except for predefined, are forbidden in coding.</span><br><span class="line">if (key.equals(&quot;Id#taobao_1&quot;)) &#123;</span><br><span class="line">        //...</span><br><span class="line">&#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>String KEY_PRE = “Id#taobao_1”;<br>if (KEY_PRE.equals(key)) {<br>        //…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">十一、中括号是数组类型的一部分，数组定义如下(发现19处)：</span><br></pre></td></tr></table></figure></p><p>String[] args;</p><p>String[] a = new String[3];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十二、及时清理不再使用的代码段或配置信息。 说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余(发现2处)。</span><br><span class="line"></span><br><span class="line">Positive example: For codes which are temporarily removed and likely to be reused, use /// to add a reasonable note.</span><br></pre></td></tr></table></figure></p><p>public static void hello() {<br>    /// Business is stopped temporarily by the owner.<br>    // Business business = new Business();<br>    // business.active();<br>    System.out.println(“it’s finished”);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十三、所有的抽象方法（包括接口中的方法）必须要用javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。 说明：如有实现和调用注意事项，请一并说明(发现2处)。</span><br></pre></td></tr></table></figure></p><p>/**</p><ul><li>fetch data by rule id</li><li></li><li>@param ruleId rule id</li><li>@param page page number</li><li>@param jsonContext json format context</li><li>@return Result<xxxxdo><br>*/<br>Result<xxxxdo> fetchDataByRuleId(Long ruleId, Integer page, String jsonContext);<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十四、所有的类都必须添加创建者信息。 说明：在设置模板时，注意IDEA的@author为$&#123;USER&#125;，而eclipse的@author为$&#123;user&#125;，大小写有区别，而日期的设置统一为yyyy/MM/dd的格式（发现45处）。</span><br></pre></td></tr></table></figure></xxxxdo></xxxxdo></li></ul><p>/**</p><ul><li>Demo class</li><li></li><li>@author keriezhang</li><li>@date 2016/10/31<br>*/<br>public class CodeNoteDemo {<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十五、集合初始化时，指定集合初始值大小。 说明：HashMap使用如下构造方法进行初始化，如果暂时无法确定集合大小，那么指定默认值（16）即可(发现6处)。</span><br><span class="line">         </span><br><span class="line">Negative example:</span><br></pre></td></tr></table></figure></li></ul><p>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(16);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十六、类名使用UpperCamelCase风格，必须遵从驼峰形式，但以下情形例外：（领域模型的相关命名）DO / BO / DTO / VO / DAO（发现1处）</span><br><span class="line"></span><br><span class="line">十七、除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量，以提高可读性。 说明：很多if语句内的逻辑相当复杂，阅读者需要分析条件表达式的最终结果，才能明确什么样的条件执行什么样的语句，那么，如果阅读者分析逻辑表达式错误呢？</span><br><span class="line">            </span><br><span class="line">Negative example:</span><br></pre></td></tr></table></figure></p><p>if ((file.open(fileName, “w”) != null) &amp;&amp; (…) || (…)) {<br>    // …<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">            </span><br><span class="line">Positive example:</span><br></pre></td></tr></table></figure></p><p>boolean existed = (file.open(fileName, “w”) != null) &amp;&amp; (…) || (…);<br>if (existed) {<br>    //…<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">十八、类、类属性、类方法的注释必须使用javadoc规范，使用/**内容*/格式，不得使用//xxx方式和/*xxx*/方式。 说明：在IDE编辑窗口中，javadoc方式会提示相关注释，生成javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率(发现2处)。</span><br></pre></td></tr></table></figure></p><p>/**</p><ul><li></li><li><p>XXX class function description.<br><em></em>/<br>public class XxClass implements Serializable {<br> private static final long serialVersionUID = 113323427779853001L;<br> /**</p><ul><li>id<br>*/<br>private Long id;<br>/**</li><li><p>title<br>*/<br>private String title;</p><p>/**</p></li><li>find by id</li><li></li><li>@param ruleId rule id</li><li>@param page start from 1</li><li>@return Result<xxxx><br>*/<br>public Result<xxxx> funcA(Long ruleId, Integer page) {<br> return null;<br>}<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">十九、方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释。注意与代码对齐(发现12处)。</span><br></pre></td></tr></table></figure></xxxx></xxxx></li></ul></li></ul><p>public void method() {<br>    // Put single line comment above code. (Note: align ‘//‘ comment with code)<br>    int a = 3;</p><pre><code>/*** Some description about follow code. (Note: align &apos;/**&apos; comment with code)*/int b = 4;</code></pre><p>}<br><code>`</code></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何把N个苹果按重量相对公平的分配给M个人</title>
      <link href="/2018/08/06/%E5%A6%82%E4%BD%95%E6%8A%8AN%E4%B8%AA%E8%8B%B9%E6%9E%9C%E6%8C%89%E9%87%8D%E9%87%8F%E7%9B%B8%E5%AF%B9%E5%85%AC%E5%B9%B3%E7%9A%84%E5%88%86%E9%85%8D%E7%BB%99M%E4%B8%AA%E4%BA%BA/"/>
      <url>/2018/08/06/%E5%A6%82%E4%BD%95%E6%8A%8AN%E4%B8%AA%E8%8B%B9%E6%9E%9C%E6%8C%89%E9%87%8D%E9%87%8F%E7%9B%B8%E5%AF%B9%E5%85%AC%E5%B9%B3%E7%9A%84%E5%88%86%E9%85%8D%E7%BB%99M%E4%B8%AA%E4%BA%BA/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有N个苹果，想要平均分给M个人，而且每个人得到的苹果重量要尽量差不多。</p><p>例如：10个苹果的重量为：<code>{4, 9, 2, 8, 7, 5, 6, 1, 3, 7}</code>。</p><h2 id="方案一：S形分法"><a href="#方案一：S形分法" class="headerlink" title="方案一：S形分法"></a>方案一：S形分法</h2><p>这是大家最容易想到的又是相对简单的，而且还有很高的公平性。XX银行的分案就是采用此法，所以可行性很高。</p><p>思路：  </p><ol><li>先把数组降序（降序比升序更公平）排序，排序结果为：<code>{9, 8, 7, 7, 6, 5, 4, 3, 2, 1}</code>。</li><li>然后把所有苹果从大到小依次分给：P1、P2、P3、P3、P2、P1、P1、P2、P3、P3。也就是S形分法。</li></ol><a id="more"></a><p>分完之后各自手里的苹果： </p><ul><li>P1: <code>{9, 5, 4}</code> = 18</li><li>P2: <code>{8, 6, 3}</code> = 17</li><li>P3: <code>{7, 7, 2, 1}</code> = 17</li></ul><p>由此可见此算法基本算是公平的，但就怕极端数据比如<code>{6, 2, 2, 2, 2, 2, 2}</code>。<br>如果使用S形分法：  </p><ul><li>P1: <code>{6, 2, 2}</code> = 10</li><li>P2: <code>{2, 2}</code> = 4</li><li>P3: <code>{2, 2}</code> = 4</li></ul><p>显而易见最好的分法应该是：  </p><ul><li>P1: <code>{6}</code> = 6</li><li>P2: <code>{2, 2, 2}</code> = 6</li><li>P3: <code>{2, 2, 2}</code> = 6</li></ul><h2 id="方案二：穷举法"><a href="#方案二：穷举法" class="headerlink" title="方案二：穷举法"></a>方案二：穷举法</h2><p>在说此方案之前，我要说一下“公平性”。<br>观察方案一的结果<code>18、17、17</code>，我们感觉比较公平，因为每个数都接近平均数17.333。<br>在数学中，有一个说法叫做离散程度，就是各个数字距离平均数的远近程度。而标准差的大小就可以体现离散程度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = sqrt(((X1 - X0)^2 + (X2 - X0)^2 + ... (Xn - X0)^2) / n)</span><br></pre></td></tr></table></figure></p><p>其中s为标准差，sqrt是求平方根，X0为平均数，Xi为各个元素，n为元素的个数。</p><p>有了衡量公平与否的方案之后，我们可以穷举出所有的分配方案，然后计算各自的标准差，取最小的一组即可。</p><p>但是，此算法的时间复杂度高的令人发指：<code>A(n, m)</code> 即：<code>n! / (n-m)! = n * (n-1) * (n-2) * ... * (n-m)</code></p><p>由于时间复杂度太高，所以此法并不实用，除非在此基础上进行优化，比如：</p><ol><li>当标准差小于某个指标时，退出循环，但是此法还是不可控，搞不好就穷举了。</li><li>可以在方案一的基础上进行<code>有限穷举</code>。</li></ol><h2 id="方案三：折中的方案"><a href="#方案三：折中的方案" class="headerlink" title="方案三：折中的方案"></a>方案三：折中的方案</h2><p>上面我说了可以在方案一的基础上进行有限穷举，这听着矛盾的有限穷举到底是什么骚操作呢？</p><p>在限穷举顾名思义就是有限个穷举，避免真正的穷举，所以不可能得到所有的标准差，<br>也就没法获得一个最小的标准差（因为最小的那种情况可能就是你没有穷举到的）。<br>但我们可以在有限的穷举中获得相对最小的标准差。  </p><p>再看一组数据：<code>{9, 8, 7, 5, 5, 5, 3, 2}</code><br>用S形分法的结果：  </p><ul><li>P1: <code>{9, 5, 3}</code> = 17</li><li>P2: <code>{8, 5, 2}</code> = 15</li><li>P3: <code>{7, 5}</code> = 12</li></ul><p>调和方案：  </p><ol><li>用最大的减去最小的，17 - 12 = 5</li><li>从最大的数组中找到恰好比5小的数3（也可能没有）。</li><li>如果没找到比5小的，终止，在这有限的情况下找出最小标准差即可。</li><li>如果找到5小的，即3，把3给最小的那组，然后计算一下此时的标准差，再回到第一步。</li></ol><blockquote><p>这只是我个人意淫的方案，如果时间充足，我相信还可以研究出其他更优方案，尔等若有时间，可以考虑考虑，回头告诉我。</p></blockquote><h2 id="附1：计算标准差"><a href="#附1：计算标准差" class="headerlink" title="附1：计算标准差"></a>附1：计算标准差</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 计算标准差</span><br><span class="line"> *</span><br><span class="line"> * @param arr</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private static double calcStandardDeviation(int[] arr) &#123;</span><br><span class="line">// 计算平均值</span><br><span class="line">double average = calcAverage(arr);</span><br><span class="line">double sum = 0;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">sum += Math.pow((arr[i] - average), 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return Math.sqrt(sum / arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附2：A-n-m-的排列组合"><a href="#附2：A-n-m-的排列组合" class="headerlink" title="附2：A(n, m)的排列组合"></a>附2：A(n, m)的排列组合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private static double recursion(List&lt;Double&gt; apples, List&lt;List&lt;Double&gt;&gt; baskets, int m, double minStandardDeviation) &#123;</span><br><span class="line">    if (apples.isEmpty()) &#123;</span><br><span class="line">        // 每个篮子中苹果总重量</span><br><span class="line">        List&lt;Double&gt; basketTotalApples = calcSumApples(baskets);</span><br><span class="line">        // 标准差</span><br><span class="line">        Double standardDeviation = calcStandardDeviation(basketTotalApples);</span><br><span class="line">        if (standardDeviation &lt; minStandardDeviation) &#123;</span><br><span class="line">            minStandardDeviation = standardDeviation;</span><br><span class="line">            System.out.println(&quot;发现一个更小的标准差:&quot; + minStandardDeviation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return minStandardDeviation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Double&gt;&gt; copyBaskets = new ArrayList&lt;&gt;(baskets);</span><br><span class="line">    List&lt;Double&gt; copyApples = new ArrayList&lt;&gt;(apples);</span><br><span class="line">    for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; apples.size(); j++) &#123;</span><br><span class="line">            Double a = apples.get(j);</span><br><span class="line">            copyBaskets.get(i).add(a);</span><br><span class="line">            copyApples.remove(j);</span><br><span class="line">            copyApples.add(j, a);</span><br><span class="line">            copyBaskets.get(i).remove(copyBaskets.get(i).size() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return minStandardDeviation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在jboss上配置jndi</title>
      <link href="/2018/08/06/%E5%9C%A8jboss%E4%B8%8A%E9%85%8D%E7%BD%AEjndi/"/>
      <url>/2018/08/06/%E5%9C%A8jboss%E4%B8%8A%E9%85%8D%E7%BD%AEjndi/</url>
      <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>以配置MySQL的jndi为例。</p><ol><li>jdk环境</li><li>jboss安装包</li><li>MySQL驱动包</li></ol><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>${JBOSS_HOME}/standalone/configuration/<code>standalone.xml</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;datasources&gt;</span><br><span class="line">    &lt;datasource jndi-name=&quot;java:jboss/datasources/DemoDS&quot; pool-name=&quot;DemoDS&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot;&gt;</span><br><span class="line">        &lt;connection-url&gt;jdbc:mysql://127.0.0.1:3306/demodb&lt;/connection-url&gt;</span><br><span class="line">        &lt;driver&gt;mysql&lt;/driver&gt;</span><br><span class="line">        &lt;security&gt;</span><br><span class="line">            &lt;user-name&gt;root&lt;/user-name&gt;</span><br><span class="line">            &lt;password&gt;123456&lt;/password&gt;</span><br><span class="line">        &lt;/security&gt;</span><br><span class="line">    &lt;/datasource&gt;</span><br><span class="line">    &lt;drivers&gt;</span><br><span class="line">        &lt;driver name=&quot;mysql&quot; module=&quot;com.kangyonggan.mysql&quot;&gt;</span><br><span class="line">            &lt;xa-datasource-class&gt;com.mysql.jdbc.Driver&lt;/xa-datasource-class&gt;</span><br><span class="line">        &lt;/driver&gt;</span><br><span class="line">    &lt;/drivers&gt;</span><br><span class="line">&lt;/datasources&gt;</span><br></pre></td></tr></table></figure><h2 id="添加驱动"><a href="#添加驱动" class="headerlink" title="添加驱动"></a>添加驱动</h2><p>在${JBOSS_HOME}/modules/com/kangyonggan/mysql/main/目录下添加mysql驱动包，如：<code>mysql-connector-java-5.1.38.jar</code>, 这个jar包可以从本地maven仓库中找到，也可以从中央仓库下载。</p><p>在此目录下添加驱动包的配置文件：<code>module.xml</code>， 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;module xmlns=&quot;urn:jboss:module:1.1&quot; name=&quot;com.kangyonggan.mysql&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource-root path=&quot;mysql-connector-java-5.1.38.jar&quot;&gt;&lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;module name=&quot;javax.api&quot;&gt;&lt;/module&gt;</span><br><span class="line">        &lt;module name=&quot;javax.transaction.api&quot;&gt;&lt;/module&gt;</span><br><span class="line">        &lt;module name=&quot;javax.servlet.api&quot; optional=&quot;true&quot;&gt;&lt;/module&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/module&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回到顶部功能的实现</title>
      <link href="/2018/08/06/%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/06/%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E5%8A%9F%E8%83%BD%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:scrollTo(0, 0)&quot; class=&quot;scroll-top&quot;&gt;</span><br><span class="line">&lt;img src=&quot;$&#123;ctx&#125;/static/app/images/top.png&quot; width=&quot;40&quot; height=&quot;40&quot;/&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.scroll-top &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 10px;</span><br><span class="line">    right: 10px;</span><br><span class="line">    z-index: 99999;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="js控制"><a href="#js控制" class="headerlink" title="js控制"></a>js控制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    $(window).scroll(function () &#123;</span><br><span class="line">        if ($(window).scrollTop() &gt;= 300) &#123; //向下滚动像素大于这个值时，即出现浮窗~</span><br><span class="line">            $(&apos;.scroll-top&apos;).fadeIn(1000);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $(&apos;.scroll-top&apos;).fadeOut(1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>史上最强分布式版本控制系统Git</title>
      <link href="/2018/08/06/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9FGit/"/>
      <url>/2018/08/06/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9FGit/</url>
      <content type="html"><![CDATA[<h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是目前世界上最强的分布式版本控制系统，没有之一。</p><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p>以Ubuntu系统为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p><p>配置全局用户名和邮箱：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="把文件添加到仓库"><a href="#把文件添加到仓库" class="headerlink" title="把文件添加到仓库"></a>把文件添加到仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><p>也可以一次添加多个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README1.md README2.md</span><br></pre></td></tr></table></figure></p><p>或者添加全部文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></p><h3 id="把文件提交到仓库"><a href="#把文件提交到仓库" class="headerlink" title="把文件提交到仓库"></a>把文件提交到仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;添加一个文件&quot;</span><br></pre></td></tr></table></figure><h3 id="拉取最新代码"><a href="#拉取最新代码" class="headerlink" title="拉取最新代码"></a>拉取最新代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h3 id="查看Git状态"><a href="#查看Git状态" class="headerlink" title="查看Git状态"></a>查看Git状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="查看文件的改变"><a href="#查看文件的改变" class="headerlink" title="查看文件的改变"></a>查看文件的改变</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff README.md</span><br></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>上面的命令会输出版本号，提交信息，提交时间，作者和邮箱信息，有时候我们只需要版本号和提交信息，可以用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure></p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>也可以回退到指定的版本号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 版本号（可以只写前几位）</span><br></pre></td></tr></table></figure></p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>如果修改文件后并且已经提交了（已commit但没push），可以使用撤销命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- README.md</span><br></pre></td></tr></table></figure></p><p>注意：<code>--</code>不能少，否则就变成切换分支的命令了。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><h4 id="1-文件还没add"><a href="#1-文件还没add" class="headerlink" title="1. 文件还没add"></a>1. 文件还没add</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm README.md</span><br></pre></td></tr></table></figure><h4 id="2-已经add，还没commit"><a href="#2-已经add，还没commit" class="headerlink" title="2. 已经add，还没commit"></a>2. 已经add，还没commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -f README.md</span><br></pre></td></tr></table></figure><h4 id="3-已经commit，还没push"><a href="#3-已经commit，还没push" class="headerlink" title="3. 已经commit，还没push"></a>3. 已经commit，还没push</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm README.md</span><br></pre></td></tr></table></figure><blockquote><p>或者使用撤销命令</p></blockquote><h4 id="4-已经push"><a href="#4-已经push" class="headerlink" title="4. 已经push"></a>4. 已经push</h4><p>请参考<code>版本回退</code></p><h3 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h3><p>把一个已有的本地仓库与某个远程仓库关联:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/ofofs/demo.git</span><br></pre></td></tr></table></figure></p><p>把本地库的内容推送到远程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><h3 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ofofs/demo.git</span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>上面两条命令可以合一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure></p><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>例：把dev分支的提交全部合并到master分支上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先切到marster分支</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"># 再把dev分并到master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure></p><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>在合并分支的过程中很容易发生冲突，当发生冲突时，merge操作并不会直接成功，此时需要我们去vi冲突的文件，手动解决冲突之后，在进行下列操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;解决冲突&quot;</span><br></pre></td></tr></table></figure></p><p>使用下面的命令可以查看分支之间的合并图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure></p><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>比如：我正在开发一个新需求，改了一大坨文件，突然要紧急修复一个bug，但是我新需求还没开发好，怎么办？难道要在这个基础上改bug？还是重新checkout一份代码？显示这些都是不优雅的，我们可以使用stash命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>执行过这个命令之后，工作区代码就像是全部进行了撤销一样干净，但是请放行，代码没丢。</p><p>此时你可以从相应的分支checkout一个bug分支去修复bug，完事之后再回到现在的分支。</p><h4 id="查看之前被暂存的代码"><a href="#查看之前被暂存的代码" class="headerlink" title="查看之前被暂存的代码"></a>查看之前被暂存的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h4 id="恢复暂存的代码"><a href="#恢复暂存的代码" class="headerlink" title="恢复暂存的代码"></a>恢复暂存的代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure><p>但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除。<br>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了。</p><p>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>stash@{0}</code>是暂存的id，其值一般为<code>stash@{0}</code>,<code>stash@{1}</code>,…</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure><p>上面的命令默认是把标签打在最新提交的commit上的，有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.9 版本号</span><br></pre></td></tr></table></figure></p><p>还可以创建带有说明的标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 版本号</span><br></pre></td></tr></table></figure></p><p>查看说明文字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v0.1</span><br></pre></td></tr></table></figure></p><h3 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.1</span><br></pre></td></tr></table></figure><h3 id="推送某个标签到远程"><a href="#推送某个标签到远程" class="headerlink" title="推送某个标签到远程"></a>推送某个标签到远程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure><h3 id="推送全部尚未推送的标签到远程"><a href="#推送全部尚未推送的标签到远程" class="headerlink" title="推送全部尚未推送的标签到远程"></a>推送全部尚未推送的标签到远程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h3 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v0.9</span><br><span class="line">git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure><h3 id="遴选"><a href="#遴选" class="headerlink" title="遴选"></a>遴选</h3><p>例：我想把dev上某个提交合并到master，但是又不想把整个dev分支合并到master。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch master</span><br><span class="line">git cherry-pick dev的某个版本号</span><br></pre></td></tr></table></figure></p><p>也可以同时遴选多个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick dev的某个版本号1 dev的某个版本号2</span><br></pre></td></tr></table></figure></p><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>见名之意，这就像是一个黑名单，git会忽略此文件中列出的文件，不对齐进行管理，也就不会误提交。下面是我常用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Maven #</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"># IDEA #</span><br><span class="line">.idea/</span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line"># Eclipse #</span><br><span class="line">.settings/</span><br><span class="line">.metadata/</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">Servers/</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>修改Linux系统的系统时间</title>
      <link href="/2018/08/06/%E4%BF%AE%E6%94%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/"/>
      <url>/2018/08/06/%E4%BF%AE%E6%94%B9Linux%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<h2 id="使用date命令"><a href="#使用date命令" class="headerlink" title="使用date命令"></a>使用date命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo date -s &quot;2017-04-20 09:27:07&quot;</span><br></pre></td></tr></table></figure><p>改了之后再使用date命令查询时间，发现成功了，但是，大概几分钟之后又恢复成之前的错误时间了。</p><h2 id="使用hwclock命令"><a href="#使用hwclock命令" class="headerlink" title="使用hwclock命令"></a>使用hwclock命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hwclock --set --date=&quot;04/20/17 09:24&quot;</span><br></pre></td></tr></table></figure><p>还是同样的问题，几分钟后就恢复了。</p><a id="more"></a><h2 id="改时区"><a href="#改时区" class="headerlink" title="改时区"></a>改时区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/share/zoneinfo/Asia/Shanghai ./localtime</span><br></pre></td></tr></table></figure><p>亲测这个是ok的，即使重启也不会恢复成错的时间。</p>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用swift3开发iOS应用</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8swift3%E5%BC%80%E5%8F%91iOS%E5%BA%94%E7%94%A8/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8swift3%E5%BC%80%E5%8F%91iOS%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>代码托管地址：<a href="https://github.com/kangyonggan/SmartNovel.git" target="_blank" rel="noopener">https://github.com/kangyonggan/SmartNovel.git</a></p><p>首页原型图：<br><img src="/uploads/ARTICLE201803291a669a8feedf06228961747698713e19548eaf00.jpeg" alt=""></p><a id="more"></a><p><img src="/uploads/ARTICLE20180329e44cec1dec1d3b9b03c291ce1fe7e5004f0b66f8.png" alt=""><br><img src="/uploads/ARTICLE20180329fe041a6ecab12d3375957a83f4f7cf955bb72e27.png" alt=""><br><img src="/uploads/ARTICLE20180329240316dc285f2176d97afb30cc96dfe1bbc49a46.png" alt=""><br><img src="/uploads/ARTICLE201803294da883b80dd96dbbd0f62effe47ad3ff1d652453.png" alt=""><br><img src="/uploads/ARTICLE20180329a444d1365aa78e878d553cba2a064f2126c5f488.png" alt=""><br><img src="/uploads/ARTICLE2018032946ff8ea3b8b64a176e59d15b8c605c450e7bd12e.png" alt=""><br><img src="/uploads/ARTICLE20180329db0e5f6eeb1e6f18a01ee8e2ad05b2ba5ac58736.png" alt=""><br><img src="/uploads/ARTICLE20180329b558fdcfc194a3c4bfbba132020e0e4e762f00aa.png" alt=""><br><img src="/uploads/ARTICLE20180329272ef2255bba2c536eae793fff6776ad5b758c8b.png" alt=""><br><img src="/uploads/ARTICLE201803293633b88664f2b300081beabeb72197377512e863.png" alt=""><br><img src="/uploads/ARTICLE20180329cab0385d756409741e63944e63ebf2f4315fb954.png" alt=""><br><img src="/uploads/ARTICLE20180329001d8e279d65048c0dcbc5dd6cb80173c98ddd81.png" alt=""><br><img src="/uploads/ARTICLE20180329bb4f8ff8d7313393276a745c47fb134dcbaa0dff.png" alt=""><br><img src="/uploads/ARTICLE20180329720c525c115fab4e2a83ceaec0bcef810c4c3ae5.png" alt=""><br><img src="/uploads/ARTICLE201803291531cee2ea814b6e16ea4319812f723682f6f42f.png" alt=""><br><img src="/uploads/ARTICLE201803293b4dda43256e5e42251c423d0175c6e490970a81.png" alt=""><br><img src="/uploads/ARTICLE20180329f8a98ddfdfab9152e46ae533f0b37bf76ca90ba0.png" alt=""><br><img src="/uploads/ARTICLE20180329a234d9ad240c728d1deaf9645a033b61c2590b0c.png" alt=""><br><img src="/uploads/ARTICLE20180329f69306e0c0aaf8099b51957865cb651ac9dbd6b2.png" alt=""><br><img src="/uploads/ARTICLE2018032977e8f4b2e8894951d7171b3997f9c765a4508a08.png" alt=""><br><img src="/uploads/ARTICLE2018032968448b2686352eb32ed5ce1d37023a656d039a9f.png" alt=""><br><img src="/uploads/ARTICLE201803293615191241b47d08cac1e20889433a8ea8dd640a.png" alt=""><br><img src="/uploads/ARTICLE201803292b4a1236a524db0b07ba01355e14b471f89be2e0.png" alt=""><br><img src="/uploads/ARTICLE20180329625a5540139caadf1a34ae98ea07ff47e914be1b.png" alt=""><br><img src="/uploads/ARTICLE20180329455eb5d4607a519c1e559a9f58e2a09946b7f5dc.png" alt=""><br><img src="/uploads/ARTICLE20180329a0e6417ee221afec014596baab5d9abb3becb035.png" alt=""><br><img src="/uploads/ARTICLE201803295b969d00d4a19654bdac5490704d5aef60c0d639.png" alt=""><br><img src="/uploads/ARTICLE20180329bfa1cbc3d5ae828b64112fb3ab2011222dd15e48.png" alt=""><br><img src="/uploads/ARTICLE20180329d8c5422b4948329769f4c956b1149d682a032a3f.png" alt=""><br><img src="/uploads/ARTICLE201803292e38ed339ce58b8395b0631708dd55ba00832b7a.png" alt=""><br><img src="/uploads/ARTICLE201803291f2be214eb728974170b91dfdb60e9e23e2f8329.png" alt=""><br><img src="/uploads/ARTICLE20180329eabd66b56aa94ef477cd9e095b2710d2c361023f.png" alt=""><br><img src="/uploads/ARTICLE2018032962047bfe0ada1ae75e5817d9143edab79f2d79f1.png" alt=""><br><img src="/uploads/ARTICLE2018032970b74281949244157e139cf98bc051d453675c0d.png" alt=""><br><img src="/uploads/ARTICLE20180329951e83b2162ddd233c81ee7a280590c6bd23886d.png" alt=""><br><img src="/uploads/ARTICLE20180329a264b52cdc39fa15a7c8740e53cd57d14271111d.png" alt=""><br><img src="/uploads/ARTICLE20180329be685eac962e536a0f60ef05fe7bd4e16974f076.png" alt=""><br><img src="/uploads/ARTICLE2018032993f0b186852babe40c80dbc5e1d1e30a7317a2bd.png" alt=""><br><img src="/uploads/ARTICLE20180329bb1431c798cd6668a7172026e101849d62030a56.png" alt=""><br><img src="/uploads/ARTICLE2018032958f05b24a4c0a5079163d9a222311cb51986e3c3.png" alt=""><br><img src="/uploads/ARTICLE2018032987576544d53a1772c257435bafcb2cff4e0423e3.png" alt=""><br><img src="/uploads/ARTICLE20180329fd58a4a8dd403e75b8b37452370b66f9861ded8f.png" alt=""><br><img src="/uploads/ARTICLE201803293b32a8e4f1198cc7126c3a268ec2476d9999ca67.png" alt=""></p><p>依赖第三方框架，是在项目的根目录添加<code>Podfile</code>文件</p><p><img src="/uploads/ARTICLE20180329922ba7ac1d5625efc4a50899a040dfc449036cd2.png" alt=""></p><p>其中<code>Podfile</code>的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, &apos;10.3&apos;</span><br><span class="line">use_frameworks!</span><br><span class="line"> </span><br><span class="line">target &apos;SmartNovel&apos; do</span><br><span class="line">pod &apos;Toast-Swift&apos;</span><br><span class="line">pod &apos;Just&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>文件添加后之后执行命令<code>pod install</code>，执行成功之后如下图：</p><p><img src="/uploads/ARTICLE201803296b30f1712b6902876962f31dfc5f2163809c6443.png" alt=""></p><p>第三方框架报错，是因为它使用的是oc的语法，我使用的是swift语法，可能有些不兼容，点击自动修复即可。</p><p><img src="/uploads/ARTICLE2018032903a774a0cf2db0f3f20582b5ea0bad6b3c23e318.png" alt=""></p><p>把报错的代码删了就好，貌似没发现有其他影响。</p><p><img src="/uploads/ARTICLE20180329322d16429004dcf360118a34a77788eecaa4c386.png" alt=""></p><p>还有一些其他的小操作，我也知道的不多，不过这已经够我开发一个业余的小应用了。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用netstat查看端口占用情况</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8netstat%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8netstat%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
      <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>参数</th><th>全拼</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>–all</td><td>显示所有连线中的Socket</td></tr><tr><td>-c</td><td>–continuous</td><td>持续列出网络状态</td></tr><tr><td>-C</td><td>–cache</td><td>显示路由器配置的快取信息</td></tr><tr><td>-e</td><td>–extend</td><td>显示网络其他相关信息</td></tr><tr><td>-F</td><td>–fib</td><td>显示FIB</td></tr><tr><td>-g</td><td>–groups</td><td>显示多重广播功能群组组员名单</td></tr><tr><td>-i</td><td>–interfaces</td><td>显示网络界面信息表单</td></tr><tr><td>-l</td><td>–listening</td><td>显示监控中的服务器的Socket</td></tr><tr><td>-M</td><td>–masquerade</td><td>显示伪装的网络连线</td></tr><tr><td>-n</td><td>–numeric</td><td>直接使用IP地址，而不通过域名服务器</td></tr><tr><td>-N</td><td>––netlink或–symbolic</td><td>显示网络硬件外围设备的符号连接名称</td></tr><tr><td>-o</td><td>–timers</td><td>显示计时器</td></tr><tr><td>-p</td><td>–programs</td><td>显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td>-r</td><td>–route</td><td>显示Routing Table</td></tr><tr><td>-s</td><td>–statistice</td><td>显示网络工作信息统计表</td></tr><tr><td>-t</td><td>–tcp</td><td>显示TCP传输协议的连线状况</td></tr><tr><td>-u</td><td>–udp</td><td>显示UDP传输协议的连线状况</td></tr><tr><td>-v</td><td>–verbose</td><td>显示指令执行过程</td></tr><tr><td>-V</td><td>–version</td><td>显示版本信息</td></tr><tr><td>-w</td><td>–raw</td><td>显示RAW传输协议的连线状况</td></tr><tr><td>-x</td><td>–unix</td><td>此参数的效果和指定”-A unix”参数相同</td></tr><tr><td>-ip</td><td>–inet</td><td>此参数的效果和指定”-A inet”参数相同</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tunlp | grep 6379</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1962/redis-server *</span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      1962/redis-server *</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用jdbc向MySQL中插入时间丢失毫秒</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8jdbc%E5%90%91MySQL%E4%B8%AD%E6%8F%92%E5%85%A5%E6%97%B6%E9%97%B4%E4%B8%A2%E5%A4%B1%E6%AF%AB%E7%A7%92/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8jdbc%E5%90%91MySQL%E4%B8%AD%E6%8F%92%E5%85%A5%E6%97%B6%E9%97%B4%E4%B8%A2%E5%A4%B1%E6%AF%AB%E7%A7%92/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table la_trans_monitor</span><br><span class="line">(</span><br><span class="line">begin_time timestamp(3) default CURRENT_TIMESTAMP(3) not null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>其他和本题无关字段已省略。</p><a id="more"></a><p>生成的Model：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.app.dfjz.model.vo;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import javax.persistence.*;</span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">@Table(name = &quot;la_trans_monitor&quot;)</span><br><span class="line">@Data</span><br><span class="line">public class LaTransMonitor implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    @Column(name = &quot;begin_time&quot;)</span><br><span class="line">    private Date beginTime;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>从debug日志中可以看出参数是有毫秒的，但是数据库中就是没有落入毫秒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2017-06-16 10:59:11.039 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - ==&gt;  Preparing: INSERT INTO la_trans_monitor ( sys_date,sys_time,method_type,method_route,method_name,begin_time,end_time,used_time ) VALUES ( ?,?,?,?,?,?,?,? )</span><br><span class="line">[DEBUG] 2017-06-16 10:59:11.065 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - ==&gt; Parameters: 20170615(String), 112233(String), XX(String), XX(String), XXX(String), 2017-06-16 10:59:10.342(Timestamp), 2017-06-16 10:59:10.342(Timestamp), 12345(Long)</span><br><span class="line">[DEBUG] 2017-06-16 10:59:11.188 [com.kangyonggan.app.dfjz.mapper.LaTransMonitorMapper.insertSelective.main:145] - &lt;==    Updates: 1</span><br></pre></td></tr></table></figure><p>解决这个问题的过程中有想到：</p><ol><li>会不会是MySQL版本问题？</li><li>会不会是Mybatis版本问题？</li><li>会不会是建表脚本问题？</li><li>会不会是配置问题？</li></ol><p>通过控制变量法，经过一一验证，都没发现问题。</p><p>我曾经手写过简版Mybatis，所以清楚以下几点：</p><ol><li>日志不等于它实际执行的SQL，所以看到日志中有毫秒是没多大意义的。</li><li>PreparedStatement有两个主要步骤，一个是准备带有占位符的SQL，另一个就是给占位符填数据。</li></ol><p>所以我猜测PreparedStatement在填数据的时候，对java.util.date的处理过程中丢掉了毫秒，接下来就是debug跟踪源代码，最后发现PreparedStatement填数据的类是在mysql-connector-java这个jar包下的。<br>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private void setTimestampInternal(int parameterIndex, Timestamp x, Calendar targetCalendar, TimeZone tz, boolean rollForward) throws SQLException &#123;</span><br><span class="line">    if(x == null) &#123;</span><br><span class="line">        this.setNull(parameterIndex, 93);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.checkClosed();</span><br><span class="line">        if(!this.useLegacyDatetimeCode) &#123;</span><br><span class="line">            this.newSetTimestampInternal(parameterIndex, x, targetCalendar);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String timestampString = null;</span><br><span class="line">            Calendar sessionCalendar = this.connection.getUseJDBCCompliantTimezoneShift()?this.connection.getUtcCalendar():this.getCalendarInstanceForSessionOrNew();</span><br><span class="line">            synchronized(sessionCalendar) &#123;</span><br><span class="line">                x = TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, x, tz, this.connection.getServerTimezoneTZ(), rollForward);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if(this.connection.getUseSSPSCompatibleTimezoneShift()) &#123;</span><br><span class="line">                this.doSSPSCompatibleTimezoneShift(parameterIndex, x, sessionCalendar);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                synchronized(this) &#123;</span><br><span class="line">                    if(this.tsdf == null) &#123;</span><br><span class="line">                        this.tsdf = new SimpleDateFormat(&quot;\&apos;\&apos;yyyy-MM-dd HH:mm:ss&quot;, Locale.US);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    timestampString = this.tsdf.format(x);</span><br><span class="line">                    StringBuffer buf = new StringBuffer();</span><br><span class="line">                    buf.append(timestampString);</span><br><span class="line">                    buf.append(&apos;.&apos;);</span><br><span class="line">                    buf.append(this.formatNanos(x.getNanos()));</span><br><span class="line">                    buf.append(&apos;\&apos;&apos;);</span><br><span class="line">                    this.setInternal(parameterIndex, buf.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.parameterTypes[parameterIndex - 1 + this.getParameterIndexOffset()] = 93;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出，它在处理时间的时候，使用SimpleDateFormat进行格式化的，格式化中没保留毫秒，紧接着后面又去拼接纳秒formatNanos，但是继续跟踪此方法后发现它返回的是0，因此最后PreparedStatement填的值形如”yyyy-MM-dd HH:MM:ss.0”。</p><p>问题已经定位到，所以就想着能不能升级jar包版本解决问题呢？</p><p>去<a href="https://mvnrepository.com/" target="_blank" rel="noopener">中央仓库</a>搜一把, 发现我现在的版本5.1.9实在是太古老了，用的人也不多，于是换了新版的用的人较多的5.1.34, 果然成功解决问题。新版jar包核心代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">private void setTimestampInternal(int parameterIndex, Timestamp x, Calendar targetCalendar, TimeZone tz, boolean rollForward) throws SQLException &#123;</span><br><span class="line">    synchronized(this.checkClosed().getConnectionMutex()) &#123;</span><br><span class="line">        if(x == null) &#123;</span><br><span class="line">            this.setNull(parameterIndex, 93);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.checkClosed();</span><br><span class="line">            if(!this.useLegacyDatetimeCode) &#123;</span><br><span class="line">                this.newSetTimestampInternal(parameterIndex, x, targetCalendar);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Calendar sessionCalendar = this.connection.getUseJDBCCompliantTimezoneShift()?this.connection.getUtcCalendar():this.getCalendarInstanceForSessionOrNew();</span><br><span class="line">                synchronized(sessionCalendar) &#123;</span><br><span class="line">                    x = TimeUtil.changeTimezone(this.connection, sessionCalendar, targetCalendar, x, tz, this.connection.getServerTimezoneTZ(), rollForward);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if(this.connection.getUseSSPSCompatibleTimezoneShift()) &#123;</span><br><span class="line">                    this.doSSPSCompatibleTimezoneShift(parameterIndex, x, sessionCalendar);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    synchronized(this) &#123;</span><br><span class="line">                        if(this.tsdf == null) &#123;</span><br><span class="line">                            this.tsdf = new SimpleDateFormat(&quot;\&apos;\&apos;yyyy-MM-dd HH:mm:ss&quot;, Locale.US);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        StringBuffer buf = new StringBuffer();</span><br><span class="line">                        buf.append(this.tsdf.format(x));</span><br><span class="line">                        if(this.serverSupportsFracSecs) &#123;</span><br><span class="line">                            int nanos = x.getNanos();</span><br><span class="line">                            if(nanos != 0) &#123;</span><br><span class="line">                                buf.append(&apos;.&apos;);</span><br><span class="line">                                buf.append(TimeUtil.formatNanos(nanos, this.serverSupportsFracSecs, true));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        buf.append(&apos;\&apos;&apos;);</span><br><span class="line">                        this.setInternal(parameterIndex, buf.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.parameterTypes[parameterIndex - 1 + this.getParameterIndexOffset()] = 93;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用jaudiotagger解析mp3文件</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8jaudiotagger%E8%A7%A3%E6%9E%90mp3%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8jaudiotagger%E8%A7%A3%E6%9E%90mp3%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;jaudiotagger.version&gt;2.0.3&lt;/jaudiotagger.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jaudiotagger&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;jaudiotagger.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Mp3Util-java"><a href="#Mp3Util-java" class="headerlink" title="Mp3Util.java"></a>Mp3Util.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.app.future.common.util;</span><br><span class="line"></span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.jaudiotagger.audio.mp3.MP3AudioHeader;</span><br><span class="line">import org.jaudiotagger.audio.mp3.MP3File;</span><br><span class="line">import org.jaudiotagger.tag.id3.AbstractID3v2Frame;</span><br><span class="line">import org.jaudiotagger.tag.id3.AbstractID3v2Tag;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * mp3工具类</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 9/4/17</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">public class Mp3Util &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = parse(&quot;/Users/kyg/Music/网易云音乐/demo.mp3&quot;, &quot;/Users/kyg/Desktop&quot;);</span><br><span class="line">        log.info(resultMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析mp3</span><br><span class="line">     *</span><br><span class="line">     * @param mp3Path  mp3路径</span><br><span class="line">     * @param albumDir 解析出的专辑图片存放目录</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, Object&gt; parse(String mp3Path, String albumDir) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = new HashMap();</span><br><span class="line"></span><br><span class="line">        FileOutputStream out = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            MP3File mp3File = new MP3File(mp3Path);</span><br><span class="line">            MP3AudioHeader header = mp3File.getMP3AudioHeader();</span><br><span class="line">            AbstractID3v2Tag id3v2Tag = mp3File.getID3v2Tag();</span><br><span class="line"></span><br><span class="line">            // 时长(秒)</span><br><span class="line">            int duration = header.getTrackLength();</span><br><span class="line">            // 文件大小</span><br><span class="line">            long size = mp3File.getFile().length();</span><br><span class="line">            // 歌曲名</span><br><span class="line">            String name = getInfo(id3v2Tag, &quot;TIT2&quot;);</span><br><span class="line">            // 歌手</span><br><span class="line">            String singer = getInfo(id3v2Tag, &quot;TPE1&quot;);</span><br><span class="line">            // 专辑</span><br><span class="line">            String album = getInfo(id3v2Tag, &quot;TALB&quot;);</span><br><span class="line">            // 专辑图片</span><br><span class="line">            AbstractID3v2Frame frame = (AbstractID3v2Frame) id3v2Tag.frameMap.get(&quot;APIC&quot;);</span><br><span class="line">            String mimeTpe = (String) frame.getBody().getObjectValue(&quot;MIMEType&quot;);</span><br><span class="line">            byte data[] = (byte[]) frame.getBody().getObjectValue(&quot;PictureData&quot;);</span><br><span class="line"></span><br><span class="line">            // 根据MIMEType获取对应的后缀，如：image/jpeg -&gt; .jpg</span><br><span class="line">            String extension = FileUtil.getExtension(mimeTpe);</span><br><span class="line">            if (StringUtils.isEmpty(extension)) &#123;</span><br><span class="line">                extension = &quot;.jpg&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            // 把专辑图片写入指定文件夹</span><br><span class="line">            out = new FileOutputStream(albumDir + File.separator + album + extension);</span><br><span class="line">            out.write(data);</span><br><span class="line">            out.flush();</span><br><span class="line"></span><br><span class="line">            // 写响应</span><br><span class="line">            resultMap.put(&quot;duration&quot;, duration);</span><br><span class="line">            resultMap.put(&quot;size&quot;, size);</span><br><span class="line">            resultMap.put(&quot;name&quot;, name);</span><br><span class="line">            resultMap.put(&quot;singer&quot;, singer);</span><br><span class="line">            resultMap.put(&quot;album&quot;, album);</span><br><span class="line">            resultMap.put(&quot;mimeTpe&quot;, mimeTpe);</span><br><span class="line">            resultMap.put(&quot;albumName&quot;, album + extension);</span><br><span class="line"></span><br><span class="line">            resultMap.put(&quot;respCo&quot;, 0);</span><br><span class="line">            resultMap.put(&quot;respMsg&quot;, &quot;解析mp3成功&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.warn(&quot;解析mp3信息异常&quot;, e);</span><br><span class="line">            resultMap.put(&quot;respCo&quot;, -1);</span><br><span class="line">            resultMap.put(&quot;respMsg&quot;, e.getLocalizedMessage());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (out != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    log.warn(&quot;关闭流异常&quot;, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取歌曲信息</span><br><span class="line">     *</span><br><span class="line">     * @param id3v2Tag</span><br><span class="line">     * @param identifier</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String getInfo(AbstractID3v2Tag id3v2Tag, String identifier) &#123;</span><br><span class="line">        AbstractID3v2Frame frame = (AbstractID3v2Frame) id3v2Tag.frameMap.get(identifier);</span><br><span class="line">        return (String) frame.getBody().getObjectValue(&quot;Text&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中依赖了apache下的一个jar包，用于获取MIMEType对应的文件后缀名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;tika.version&gt;1.16&lt;/tika.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tika&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tika-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;tika.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="FileUtil-java"><a href="#FileUtil-java" class="headerlink" title="FileUtil.java"></a>FileUtil.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据MIMEType获取后缀</span><br><span class="line"> *</span><br><span class="line"> * @param mimeType</span><br><span class="line"> * @return</span><br><span class="line"> * @throws Exception</span><br><span class="line"> */</span><br><span class="line">public static String getExtension(String mimeType) throws Exception &#123;</span><br><span class="line">    MimeTypes allTypes = MimeTypes.getDefaultMimeTypes();</span><br><span class="line">    MimeType type = allTypes.forName(mimeType);</span><br><span class="line">    return type.getExtension();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Compile Expression Language</title>
      <link href="/2018/08/06/JavaCompileExpressionLanguage/"/>
      <url>/2018/08/06/JavaCompileExpressionLanguage/</url>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.kangyonggan&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jcel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// treeMaker and names is JCTree&apos;s environment</span><br><span class="line">JCExpressionParser parser = new JCExpressionParser(treeMaker, names);</span><br><span class="line">JCTree.JCExpression expression = parser.parse(</span><br><span class="line">    &quot;Hello $&#123;user.info.name&#125;, welcome use my $&#123;project[0](1).name&#125;, thanks!&quot;);</span><br><span class="line">System.out.println(expression);</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello &quot; + user.getInfo().getName() + &quot;, welcome use my &quot; + project[0].get(1).getName();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用SSH内网穿透加Nginx反向代理之后获取真实IP</title>
      <link href="/2018/08/06/%E4%BD%BF%E7%94%A8SSH%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8A%A0Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B9%8B%E5%90%8E%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP/"/>
      <url>/2018/08/06/%E4%BD%BF%E7%94%A8SSH%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8A%A0Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B9%8B%E5%90%8E%E8%8E%B7%E5%8F%96%E7%9C%9F%E5%AE%9EIP/</url>
      <content type="html"><![CDATA[<p><img src="/uploads/nginx-ssh.png" alt="nginx"></p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">        # First attempt to serve request as file, then</span><br><span class="line">        # as directory, then fall back to displaying a 404.</span><br><span class="line">        # try_files $uri $uri/ =404;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>重新加载Nginx配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="JAVA获取IP"><a href="#JAVA获取IP" class="headerlink" title="JAVA获取IP"></a>JAVA获取IP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ip = request.getHeader(&quot;X-Real-IP&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java对象的生命周期</title>
      <link href="/2018/08/06/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2018/08/06/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="Java对象的生命周期分为下面七个阶段"><a href="#Java对象的生命周期分为下面七个阶段" class="headerlink" title="Java对象的生命周期分为下面七个阶段"></a>Java对象的生命周期分为下面七个阶段</h2><ol><li>创建阶段（Created）</li><li>应用阶段（In Use）</li><li>不可见阶段（Invisible）</li><li>不可达阶段（Unreachable）</li><li>收集阶段（Collected）</li><li>终结阶段（Finalized）</li><li>对象空间重新分配阶段（De-allocated）</li></ol><a id="more"></a><h2 id="创建阶段（Created）"><a href="#创建阶段（Created）" class="headerlink" title="创建阶段（Created）"></a>创建阶段（Created）</h2><p>系统创建对象的过程如下：  </p><ul><li>为对象分配存储空间</li><li>开始构造对象</li><li>从超类到子类对类成员变量进行初始化</li><li>超类成员变量按顺序初始化，递归调用超类的构造方法</li><li>子类成员变量按顺序初始化，调用子类构造方法</li></ul><p>一旦对象创建，并被赋给某些变量，这个对象就进入了下一个阶段，也就是应用阶段。</p><h2 id="应用阶段（In-Use）"><a href="#应用阶段（In-Use）" class="headerlink" title="应用阶段（In Use）"></a>应用阶段（In Use）</h2><p>对象至少被一个强引用持有着（需先了解一下强引用、弱引用、虚引用、软引用）。</p><h2 id="不可见阶段（Invisible）"><a href="#不可见阶段（Invisible）" class="headerlink" title="不可见阶段（Invisible）"></a>不可见阶段（Invisible）</h2><p>程序本身不再持有对象的任何强引用，但是这些引用任然可能存在着。一般来说就是程序的执行<code>超出对象的作用域</code>。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure></p><p>最后一行的i已经超出了它的作用域，此时称<code>i处于不可见阶段</code>。当然，这在编译时会报错。</p><h2 id="不可达阶段（Unreachable）"><a href="#不可达阶段（Unreachable）" class="headerlink" title="不可达阶段（Unreachable）"></a>不可达阶段（Unreachable）</h2><p>是指对象不再被任何强引用持有着。但对象仍可能被JVM等系统下的某些已装载的静态变量或线程或JNI等强引用持有着，这些特殊的强引用被称为”GC root”。存在着这些GC root会导致对象的内存泄露情况，无法被回收。</p><h2 id="收集阶段（Collected）"><a href="#收集阶段（Collected）" class="headerlink" title="收集阶段（Collected）"></a>收集阶段（Collected）</h2><p>当垃圾回收器发现该对象已经处于“不可达阶段”并且垃圾回收器已经对该对象的内存空间重新分配做好准备时，则对象进入了“收集阶段”。如果该对象已经重写了finalize()方法，则会去执行该方法的终端操作。<br>这里要特别说明一下：不要重载finazlie()方法！原因有两点：  </p><ol><li>会影响JVM的对象分配与回收速度</li><li>可能造成该对象的再次“复活”</li></ol><h2 id="终结阶段（Finalized）"><a href="#终结阶段（Finalized）" class="headerlink" title="终结阶段（Finalized）"></a>终结阶段（Finalized）</h2><p>当对象执行完finalize()方法后仍然处于不可达状态时，则该对象进入终结阶段。在该阶段是等待垃圾回收器对该对象空间进行回收。</p><h2 id="对象空间重新分配阶段（De-allocated）"><a href="#对象空间重新分配阶段（De-allocated）" class="headerlink" title="对象空间重新分配阶段（De-allocated）"></a>对象空间重新分配阶段（De-allocated）</h2><p>垃圾回收器对该对象的所占用的内存空间进行回收或者再分配了，则该对象彻底消失了，称之为“对象空间重新分配阶段”。</p><p>原文地址：<a href="http://blog.csdn.net/sodino/article/details/38387049" target="_blank" rel="noopener">http://blog.csdn.net/sodino/article/details/38387049</a></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一键生成通用增删改查从前端到后台的所有代码</title>
      <link href="/2018/08/06/%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E5%8F%B0%E7%9A%84%E6%89%80%E6%9C%89%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/08/06/%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%80%9A%E7%94%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E5%8F%B0%E7%9A%84%E6%89%80%E6%9C%89%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 拉取项目到本地</span><br><span class="line">git clone https://github.com/kangyonggan/codegen.git</span><br><span class="line"># 编译并安装</span><br><span class="line">mvn clean install</span><br><span class="line"># 一键生成项目</span><br><span class="line">mvn archetype:generate -DarchetypeGroupId=com.kangyonggan.archetype -DarchetypeArtifactId=codegen -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=local</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从零开始搭建NexT主题的Hexo博客</title>
      <link href="/2017/03/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BANexT%E4%B8%BB%E9%A2%98%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/03/29/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BANexT%E4%B8%BB%E9%A2%98%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote><p>参考文档: <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p></blockquote><h1 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# cat /etc/issue</span><br><span class="line">Ubuntu 16.04.2 LTS \n \l</span><br></pre></td></tr></table></figure><p>其他系统搭建流程类似，这里不一一演示。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>关于hexo和next的基本概念这里不再介绍，只说怎么安装和使用。</p><a id="more"></a><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# apt-get update</span><br><span class="line">root@iZ23ldh8kudZ:~# apt-get install git</span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# apt-get install nodejs</span><br><span class="line">root@iZ23ldh8kudZ:~# apt-get install npm</span><br></pre></td></tr></table></figure><!-- more --><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>发现报错, 经谷歌后，在需要安装nodejs-legacy：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# apt-get install nodejs-legacy</span><br></pre></td></tr></table></figure><p>再次安装hexo-cli后成功！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# hexo -version</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Linux 4.4.0-63-generic linux x64</span><br><span class="line">http_parser: 2.5.0</span><br><span class="line">node: 4.2.6</span><br><span class="line">v8: 4.5.103.35</span><br><span class="line">uv: 1.8.0</span><br><span class="line">zlib: 1.2.8</span><br><span class="line">ares: 1.10.1-DEV</span><br><span class="line">icu: 55.1</span><br><span class="line">modules: 46</span><br><span class="line">openssl: 1.0.2g-fips</span><br></pre></td></tr></table></figure><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# hexo init blog</span><br><span class="line">root@iZ23ldh8kudZ:~# cd blog/</span><br><span class="line">root@iZ23ldh8kudZ:~/blog# npm install</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# hexo s</span><br></pre></td></tr></table></figure><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>在浏览器中输入localhost:4000，查看效果如下：</p><p><img src="/uploads/hexo-01.png" alt="hexo-01"></p><p>至此，hexo博客就搭建好了，接下来就是安装NexT主题并且进行各种配置了。</p><h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# pwd</span><br><span class="line">/root/blog</span><br><span class="line">root@iZ23ldh8kudZ:~/blog# git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>安装成功之后，会发现主题文件夹下面多了一个<code>next</code>文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# ll themes/</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 4 root root 4096 Mar 28 17:58 ./</span><br><span class="line">drwxr-xr-x 6 root root 4096 Mar 28 17:48 ../</span><br><span class="line">drwxr-xr-x 6 root root 4096 Mar 28 17:26 landscape/</span><br><span class="line">drwxr-xr-x 9 root root 4096 Mar 28 17:59 next/</span><br></pre></td></tr></table></figure><h3 id="使用next主题"><a href="#使用next主题" class="headerlink" title="使用next主题"></a>使用next主题</h3><p>编辑<code>站点配置文件</code>, 修改theme配置的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>重启hexo，查看界面效果：</p><p><img src="/uploads/hexo-02.png" alt="hexo-02"></p><blockquote><p>提示：修改站点配置需要重启，修改主题文件不需要重启，如果改了没生效，请运行<code>hexo clean</code></p></blockquote><p>个人感觉这个有点丑，所以我又换了一个风格，next提供了3中风格的主题：</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>修改<code>主题配置文件</code>, 修改scheme配置的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Mist</span><br></pre></td></tr></table></figure><p>重启hexo，查看界面效果：</p><p><img src="/uploads/hexo-03.png" alt="hexo-03"></p><p>个人比较喜欢这种风格的主题。</p><h1 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h1><h3 id="网站相关设置"><a href="#网站相关设置" class="headerlink" title="网站相关设置"></a>网站相关设置</h3><p>修改<code>站点配置文件</code>， Site相关配置默认如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">author: John Doe</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>经过配置后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 东方骄子 </span><br><span class="line">subtitle:</span><br><span class="line">description: 二逼青年欢乐多</span><br><span class="line">author: 康永敢</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>设置<code>favicon</code>： 把favicon.ico放在<code>source/</code>目录下即可。</p><p>设置作者头像：<br>修改<code>主题配置文件</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: /uploads/avatar.png</span><br></pre></td></tr></table></figure><p>然后把你的头像(avatar.png)放在<code>themes/next/source/uploads/</code>目录下，没有uploads目录的话可以自己创建一个。</p><p>重启后查看效果如下：</p><p><img src="/uploads/hexo-04.png" alt="hexo-04"></p><blockquote><p>头像可以设置成gif动态图！</p></blockquote><h3 id="菜单相关设置"><a href="#菜单相关设置" class="headerlink" title="菜单相关设置"></a>菜单相关设置</h3><p>修改<code>主题配置文件</code>，默认菜单相关配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  #categories: /categories</span><br><span class="line">  #about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #sitemap: /sitemap.xml</span><br><span class="line">  #commonweal: /404.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  schedule: calendar</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  sitemap: sitemap</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><p>本人配置后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  sitemap: /sitemap.xml</span><br><span class="line">  commonweal: /404.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  schedule: calendar</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  sitemap: sitemap</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure><p>图标我没换变，用的默认的，只是多显示了几个菜单而已，当然，现在的菜单是不能正常使用的，还需要再做一些操作。</p><p>效果如下:</p><p><img src="/uploads/hexo-05.png" alt="hexo-05"></p><p>现在看起来好像该有的都有了，但是点击之后会报错，比如点击“关于”菜单：</p><p><img src="/uploads/hexo-06.png" alt="hexo-06"></p><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p>发现缺少“关于”页面，下面就来添加关于页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# hexo new page about</span><br><span class="line">INFO  Created: ~/blog/source/about/index.md</span><br><span class="line">root@iZ23ldh8kudZ:~/blog# ll source/</span><br><span class="line">total 36</span><br><span class="line">drwxr-xr-x 4 root root  4096 Mar 28 21:18 ./</span><br><span class="line">drwxr-xr-x 6 root root  4096 Mar 28 20:24 ../</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 28 21:18 about/</span><br><span class="line">-rw-r--r-- 1 root root 16958 Mar 28 20:58 favicon.ico</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 28 17:26 _posts/</span><br></pre></td></tr></table></figure><p>发现在source目录下了生成一个about文件夹，about里面是一个md文件， 内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# cat source/about/index.md </span><br><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2017-03-28 21:18:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>本人编辑后内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 关于作者</span><br><span class="line">date: 2017-03-25 14:15:25</span><br><span class="line">comments: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 基础信息</span><br><span class="line">- 姓名：康永敢</span><br><span class="line">- 性别：男</span><br><span class="line">- 职业：Java开发</span><br><span class="line"></span><br><span class="line">### 联系方式</span><br><span class="line">- 手机：18221372104</span><br><span class="line">- 邮箱：kangyonggan@gmail.com</span><br><span class="line">- QQ：2825176081</span><br><span class="line">- 现住址：上海市松江区九亭镇</span><br><span class="line">- 工作地址：上海市南京西路399号明天广场21楼（华信证券）</span><br></pre></td></tr></table></figure><p>其中<code>comments</code>表示此页面不需要评论，关于评论的问题下面会讨论。<br>刷新后界面如下：</p><p><img src="/uploads/hexo-07.png" alt="hexo-07"></p><h4 id="404"><a href="#404" class="headerlink" title="404"></a>404</h4><p>404页面我用的是公益404，在source目录下创建404.html, 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>刷新后效果如下：</p><p><img src="/uploads/hexo-08.png" alt="hexo-08"></p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# hexo new page tags</span><br><span class="line">INFO  Created: ~/blog/source/tags/index.md</span><br><span class="line">root@iZ23ldh8kudZ:~/blog# cat source/tags/index.md </span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-03-28 21:33:05</span><br><span class="line">---</span><br><span class="line">root@iZ23ldh8kudZ:~/blog#</span><br></pre></td></tr></table></figure><p>经过我的修改后内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 全部标签</span><br><span class="line">date: 2017-03-25 14:13:35</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>刷新后看效果：</p><p><img src="/uploads/hexo-09.png" alt="hexo-09"></p><p>刷新后看不到什么效果，因为你还没有“标签”，怎么才能有标签呢？不急，下面会说的。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# hexo new page categories</span><br><span class="line">INFO  Created: ~/blog/source/categories/index.md</span><br><span class="line">root@iZ23ldh8kudZ:~/blog# cat source/categories/index.md </span><br><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-03-28 21:37:42</span><br><span class="line">---</span><br><span class="line">root@iZ23ldh8kudZ:~/blog#</span><br></pre></td></tr></table></figure><p>经过我的修改后内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 全部分类</span><br><span class="line">date: 2017-03-25 14:15:11</span><br><span class="line">type: categories</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>刷新后看效果：</p><p><img src="/uploads/hexo-10.png" alt="hexo-10"></p><p>刷新后看不到什么效果，原因同上。</p><h1 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h1><p>其他的配置现在不好说，因为没有文章！所以接下来我会先创建一些文章。</p><h3 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h3><p>在scaffolds目录下是创建新文章时的模板:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# ll scaffolds/</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 28 17:26 ./</span><br><span class="line">drwxr-xr-x 6 root root 4096 Mar 28 20:24 ../</span><br><span class="line">-rw-r--r-- 1 root root   33 Mar 28 17:26 draft.md</span><br><span class="line">-rw-r--r-- 1 root root   44 Mar 28 17:26 page.md</span><br><span class="line">-rw-r--r-- 1 root root   50 Mar 28 17:26 post.md</span><br></pre></td></tr></table></figure><p>默认使用的是post.md这个模板，你也可以在站点文件中配置其他模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_layout: post</span><br></pre></td></tr></table></figure><p>不过一般也不需要改，我是直接改的post.md，改后内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>使用模板创建一篇文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# hexo new SSH免密登录</span><br><span class="line">INFO  Created: ~/blog/source/_posts/SSH免密登录.md</span><br><span class="line">root@iZ23ldh8kudZ:~/blog#</span><br></pre></td></tr></table></figure><p><code>hexo new &lt;title&gt;</code>命令会使用默认模板创建一篇文章，文章在source/_post/文件夹下。</p><p>为了观察实际效果，我在这篇文章中添加一些真实的内容</p><p>刷新后效果如下：</p><p><img src="/uploads/hexo-11.png" alt="hexo-11"></p><p>这时候你再去查看“标签”页和“分类”页，应该就能看见有内容了。</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>为了看出分页效果，我先把hexo例子中的Hello World干掉，另外把我的博客搬进_post中。<br>修改<code>站点配置文件</code>中的<code>per_page</code>配置，默认是10，我改为5:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 5</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/uploads/hexo-12.png" alt="hexo-12"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>至此，博客就已经有型了，但是还得经典细琢。</p><h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><p>当我们看到一篇好文章时想分享给其他人看怎么办？复制url?太low了！</p><p>修改<code>主题配置文件</code>的<code>jiathis</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Share</span><br><span class="line">jiathis: true</span><br><span class="line"># Warning: JiaThis does not support https.</span><br><span class="line">#add_this_id:</span><br></pre></td></tr></table></figure><p>刷新文章详情页面,可以在底部看到分享按钮：</p><p><img src="/uploads/hexo-13.png" alt="hexo-13"></p><h3 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h3><p>修改<code>主题配置文件</code>的<code>Social</code>相关配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span><br><span class="line">social:</span><br><span class="line">  Github: https://github.com/kangyonggan/</span><br><span class="line">  Book: http://kangyonggan.com:6666/</span><br><span class="line"></span><br><span class="line"># Social Links Icons</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of the item and value is the name of FontAwesome icon. Key is case-senstive.</span><br><span class="line">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocialItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Weibo: weibo</span><br><span class="line">  Book: book</span><br></pre></td></tr></table></figure><p>刷新后效果如下：</p><p><img src="/uploads/hexo-14.png" alt="hexo-14"></p><p>发现进入详情界面后，自动弹出右边目录结构（如果文章有目录的时候），设置<code>主题配置文件</code>，让进入详情界面的时候不要自动弹目录结构：<br>修改sidebar:display的值： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available value:</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  Totally remove sidebar including sidebar toggle.</span><br><span class="line">  #display: post</span><br><span class="line">  #display: always</span><br><span class="line">  display: hide</span><br><span class="line">  #display: remove</span><br><span class="line"></span><br><span class="line">  # Sidebar offset from top menubar in pixels.</span><br><span class="line">  offset: 12</span><br><span class="line">  offset_float: 0</span><br><span class="line"></span><br><span class="line">  # Back to top in sidebar</span><br><span class="line">  b2t: false</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: false</span><br></pre></td></tr></table></figure><h3 id="生成RSS"><a href="#生成RSS" class="headerlink" title="生成RSS"></a>生成RSS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/blog# npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>修改<code>主题配置文件</code>的rss配置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: </span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br></pre></td></tr></table></figure><p>rss配置没变，feed相关的为新增的, 刷新后就可以在sidebar中看见rss链接了。 </p><p><img src="/uploads/hexo-15.png" alt="hexo-15"></p><p>可以使用<code>rss阅读器</code>订阅这个rss地址的文章。</p><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>修改<code>主题配置文件</code>中的<code>alipay</code>的值(如果没有alipay就新增):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pay</span><br><span class="line">alipay: /uploads/ipay.png</span><br></pre></td></tr></table></figure><p>然后把支付宝的收款二维码放到<code>themes/next/source/uploads/</code>目录下。</p><p>文章详情界面的效果如图：</p><p><img src="/uploads/hexo-16.png" alt="hexo-16"></p><h3 id="代码高亮风格"><a href="#代码高亮风格" class="headerlink" title="代码高亮风格"></a>代码高亮风格</h3><p>修改<code>主题配置文件</code>的<code>highlight_theme</code>的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available value:</span><br><span class="line">#    normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night</span><br></pre></td></tr></table></figure><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>修改<code>站点配置文件</code>，在最后添加(可以不加，因为有缺省值)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Sitemap Setting</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>重启后访问<code>http://localhost:4000/sitemap.xml</code>，就可以看到内容了。 </p><p><img src="/uploads/hexo-18.png" alt="hexo-18"></p><p>但是连接地址是错的，所以我们需要在<code>站点配置文件</code>中修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://kangyonggan.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>下面是提交<code>站点地图</code>到百度站长工具中的过程, 不搞SEO的可以略过</p><p><img src="/uploads/hexo-17.png" alt="hexo-17"></p><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>在<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">http://tongji.baidu.com/</a>注册账号，并创建应用，然后在“代码获取”界面获取<code>baidu_analytics</code>，如下图：</p><p><img src="/uploads/hexo-19.png" alt="hexo-19"></p><p>修改<code>主题配置文件</code>的<code>baidu_analytics</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Baidu Analytics ID</span><br><span class="line">baidu_analytics: 9a7a48ed52f9726****8a0955ae72adf</span><br></pre></td></tr></table></figure><p>为了个人id不被盗用，我隐藏了四位。一段时间之后查看访问量：</p><p><img src="/uploads/hexo-20.png" alt="hexo-20"></p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>之前的hexo用户使用<code>多说</code>评论插件的比较多，但是现在多说即将关闭，新用户已经不能使用了，所有我使用<code>畅言</code>。</p><p>注册畅言<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">http://changyan.kuaizhan.com/</a>并创建站点，获取<code>APP ID</code>和<code>APP KEY</code>。</p><p><img src="/uploads/hexo-21.png" alt="hexo-21"></p><p>把这两个的值写入<code>主题配置文件</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># changyan</span><br><span class="line">changyan:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: cy****H1C</span><br><span class="line">  appkey: 5bc9ff33a197******b38cc87994bf4f</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/uploads/hexo-22.png" alt="hexo-22"></p><p>我这里的评论框是黑色的，你可以在“畅言”网站上修改评论框的样式。</p><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>这是个很好用的功能，就是反应有点慢。修改<code>主题配置文件</code>的<code>local_search</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>修改这个配置可以在界面上看到“搜索”按钮。但点击无效。</p><p>修改<code>站点配置文件</code>，在最后新增：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 搜索</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>安装搜索插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>重启后搜索效果如下：</p><p><img src="/uploads/hexo-23.png" alt="hexo-23"></p><h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h1><h3 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="生成站点"><a href="#生成站点" class="headerlink" title="生成站点"></a>生成站点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo gengrate</span><br></pre></td></tr></table></figure><p>可以简写为<code>hexo g</code></p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>可以简写为<code>hexo s</code></p><p>还可以带参数，比如<code>hexo s --debug</code>会在命令窗口打印日志以供调试。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>简写为<code>hexo d</code></p><p>需要在<code>站点配置文件</code>中配置<code>deploy</code>相关参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/kangyonggan/kangyonggan.github.io.git</span><br></pre></td></tr></table></figure><p>此外还需要安装deploy相关插件，并且配置git全局用户相关变量，不然没权限推送到github上。</p><p>如果没云空间的可以在deploy到github上托管，但github最近比较慢，所以我是放在云服务器上的。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Log4j2省略输出SQL语句SELECT和FROM中间的字段</title>
      <link href="/2017/03/28/Log4j2%E7%9C%81%E7%95%A5%E8%BE%93%E5%87%BASQL%E8%AF%AD%E5%8F%A5SELECT%E5%92%8CFROM%E4%B8%AD%E9%97%B4%E7%9A%84%E5%AD%97%E6%AE%B5/"/>
      <url>/2017/03/28/Log4j2%E7%9C%81%E7%95%A5%E8%BE%93%E5%87%BASQL%E8%AF%AD%E5%8F%A5SELECT%E5%92%8CFROM%E4%B8%AD%E9%97%B4%E7%9A%84%E5%AD%97%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p>在项目中，起初我们是不打印SQL语句的，后来为了查问题更方便，就打印了SQL。<br>但是也带来了一些问题，比如查询的字段太多，造成满屏SQL，给查日志造成了一定的影响。<br>所以我就在想，能不能把<code>SELECT</code>和<code>FROM</code>中间的字段省略输出呢？</p><a id="more"></a><h2 id="线上日志中的SQL"><a href="#线上日志中的SQL" class="headerlink" title="线上日志中的SQL"></a>线上日志中的SQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG : ==&gt;  Preparing: SELECT serial_no as serialNo,bnk_no as bnkNo ,mer_org_serial_no as merOrgSerialNo,bnk_org_serial_no as bnkOrgSerialNo, mer_date as merDate,mer_time as merTime, mer_org_date as merOrgDate,mer_org_time as merOrgTime ,bnk_org_date as bnkOrgDate,bnk_org_time as bnkOrgTime, last_try_date as lastTryDate,last_try_time as lastTryTime ,last_snd_date as lastSndDate,last_snd_time as lastSndTime, last_qry_serial_no as lastQrySerialNo,last_qry_date as lastQryDate,last_qry_time as lastQryTime, input_date as inputDate,input_time as inputTime,mer_tran_co as merTranCo,bnk_tran_co as bnkTranCo, mer_org_tran_co as merOrgTranCo,bnk_org_tran_co as bankOrgTranCo ,tran_tp as tranTy,syn_flg as synFlg,bat_flg as batFlg, acount as acount,retry_flg as retryFlg,retry_max_time as retryMaxTime ,retry_interval as retryInterval, retry_counter as retryCounter,resnd_flg as resndFlg ,resnd_max_time as resndMaxTime,resnd_interval as resndInterval,resnd_counter as resndCounter, qry_flg as qryFlg,qry_tran_co as qryTranCo,qry_max_time as qryMaxTime,qry_interval as qryInterval, qry_counter as qryCounter,priority as priority,model as model ,product_id as productId,product_tp as productTp,cur_co as currencyCode, amount as amount,fee_amt as feeAmt,tran_purpose as tranPurpose ,tran_remark as tranRemark,ref_app_no as refAppNo, ref_app_kind as refAppKind,rcvr_bnk_no as rcvrBnkNo ,rcvr_acct_no as rcvrAcctNo,rcvr_acct_nm as rcvrAcctNm,rcvr_id_tp as rcvrIdTp,rcvr_id_no as rcvrIdNo, rcvr_province as rcvrProvince,rcvr_city as rcvrCity,rcvr_area_co as rcvrAreaCo,rcvr_area_nm as rcvrAreaNm, rcvr_mer_id as rcvrMerId,rcvr_mer_cert_id as rcvrMerCertId,rcvr_post_id as rcvrPostId ,rcvr_contract_no as rcvrContractNo,rcvr_contract_dt as rcvrContractDt, rcvr_proto_no as rcvrProtoNo,rcvr_mer_user_tp as rcvrMerUserTp,rcvr_mer_user_id as rcvrMerUserId, rcvr_bnk_user_tp as rcvrBnkUserTp,rcvr_bnk_user_id as rcvrBnkUserId,rcvr_resv1 as rcvrResv1, rcvr_resv2 as rcvrResv2,sndr_bnk_no as sndrBankNo,sndr_name as sndrName, sndr_acct_no as sndrAcctNo,sndr_acct_nm as sndrAcctName, sndr_id_tp as sndrIdType,sndr_id_no as sndrIdNo,sndr_province as sndrProvince,sndr_city as sndrCity, sndr_area_co as sndrAreaCode,sndr_area_nm as sndrAreaName,sndr_mer_id as sndrMerId ,sndr_mer_cert_id as sndrMerCertId,sndr_post_id as sndrPostId, sndr_contract_no as sndrContractNo,sndr_contract_dt as sndrContractDate,sndr_proto_no as sndrProtoNo, sndr_mer_user_tp as sndrMerUserType,sndr_mer_user_id as sndrMerUserId ,sndr_bnk_user_tp as sndrBnkUserType,sndr_bnk_user_id as sndrBankUserId, sndr_resv1 as sndrResv1,sndr_resv2 as sndrResv2,lock_st as lockSt,tran_st as tranSt,business_type as businessType, rvrs_st as rvrsSt,product_nm as productName, APP_VERSION as appVersion,APP_SOURCE as appSource, RCVR_BNK_BRANCH_NAME as rcvrBnkBranchName,SNDR_BNK_BRANCH_NAME as sndrBnkBranchName, created_at as insertTimestamp, updated_at as updateTimestamp FROM be_command T WHERE T.REF_APP_NO = ?</span><br></pre></td></tr></table></figure><p>一大坨SQL占满了整个屏幕，并且日志文件也会变得很大，其实这句SQL有用信息很少:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG : ==&gt;  Preparing: SELECT xxx FROM be_command T WHERE T.REF_APP_NO = ?</span><br></pre></td></tr></table></figure><p>所以我就想能不能像上面这样输出呢？看下面的demo</p><h2 id="使用Log4j2的Replace功能"><a href="#使用Log4j2的Replace功能" class="headerlink" title="使用Log4j2的Replace功能"></a>使用Log4j2的Replace功能</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;log4j2.api.version&gt;2.5&lt;/log4j2.api.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!--Log4j2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a>log4j2.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;LOG_HOME&quot;&gt;/Users/kyg/logs/book&lt;/property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;%replace&#123;%msg&#125;&#123;Preparing: SELECT [\w ,]+ FROM be_command&#125;&#123;Preparing: SELECT xxx FROM be_command&#125;%n&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;/&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a>Test.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.logging.log4j.LogManager;</span><br><span class="line">import org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/28</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger log = LogManager.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        log.info(&quot;DEBUG : ==&gt;  Preparing: SELECT serial_no as serialNo,bnk_no as bnkNo ,mer_org_serial_no as merOrgSerialNo,bnk_org_serial_no as bnkOrgSerialNo, mer_date as merDate,mer_time as merTime, mer_org_date as merOrgDate,mer_org_time as merOrgTime ,bnk_org_date as bnkOrgDate,bnk_org_time as bnkOrgTime, last_try_date as lastTryDate,last_try_time as lastTryTime ,last_snd_date as lastSndDate,last_snd_time as lastSndTime, last_qry_serial_no as lastQrySerialNo,last_qry_date as lastQryDate,last_qry_time as lastQryTime, input_date as inputDate,input_time as inputTime,mer_tran_co as merTranCo,bnk_tran_co as bnkTranCo, mer_org_tran_co as merOrgTranCo,bnk_org_tran_co as bankOrgTranCo ,tran_tp as tranTy,syn_flg as synFlg,bat_flg as batFlg, acount as acount,retry_flg as retryFlg,retry_max_time as retryMaxTime ,retry_interval as retryInterval, retry_counter as retryCounter,resnd_flg as resndFlg ,resnd_max_time as resndMaxTime,resnd_interval as resndInterval,resnd_counter as resndCounter, qry_flg as qryFlg,qry_tran_co as qryTranCo,qry_max_time as qryMaxTime,qry_interval as qryInterval, qry_counter as qryCounter,priority as priority,model as model ,product_id as productId,product_tp as productTp,cur_co as currencyCode, amount as amount,fee_amt as feeAmt,tran_purpose as tranPurpose ,tran_remark as tranRemark,ref_app_no as refAppNo, ref_app_kind as refAppKind,rcvr_bnk_no as rcvrBnkNo ,rcvr_acct_no as rcvrAcctNo,rcvr_acct_nm as rcvrAcctNm,rcvr_id_tp as rcvrIdTp,rcvr_id_no as rcvrIdNo, rcvr_province as rcvrProvince,rcvr_city as rcvrCity,rcvr_area_co as rcvrAreaCo,rcvr_area_nm as rcvrAreaNm, rcvr_mer_id as rcvrMerId,rcvr_mer_cert_id as rcvrMerCertId,rcvr_post_id as rcvrPostId ,rcvr_contract_no as rcvrContractNo,rcvr_contract_dt as rcvrContractDt, rcvr_proto_no as rcvrProtoNo,rcvr_mer_user_tp as rcvrMerUserTp,rcvr_mer_user_id as rcvrMerUserId, rcvr_bnk_user_tp as rcvrBnkUserTp,rcvr_bnk_user_id as rcvrBnkUserId,rcvr_resv1 as rcvrResv1, rcvr_resv2 as rcvrResv2,sndr_bnk_no as sndrBankNo,sndr_name as sndrName, sndr_acct_no as sndrAcctNo,sndr_acct_nm as sndrAcctName, sndr_id_tp as sndrIdType,sndr_id_no as sndrIdNo,sndr_province as sndrProvince,sndr_city as sndrCity, sndr_area_co as sndrAreaCode,sndr_area_nm as sndrAreaName,sndr_mer_id as sndrMerId ,sndr_mer_cert_id as sndrMerCertId,sndr_post_id as sndrPostId, sndr_contract_no as sndrContractNo,sndr_contract_dt as sndrContractDate,sndr_proto_no as sndrProtoNo, sndr_mer_user_tp as sndrMerUserType,sndr_mer_user_id as sndrMerUserId ,sndr_bnk_user_tp as sndrBnkUserType,sndr_bnk_user_id as sndrBankUserId, sndr_resv1 as sndrResv1,sndr_resv2 as sndrResv2,lock_st as lockSt,tran_st as tranSt,business_type as businessType, rvrs_st as rvrsSt,product_nm as productName, APP_VERSION as appVersion,APP_SOURCE as appSource, RCVR_BNK_BRANCH_NAME as rcvrBnkBranchName,SNDR_BNK_BRANCH_NAME as sndrBnkBranchName, created_at as insertTimestamp, updated_at as updateTimestamp FROM be_command T WHERE T.REF_APP_NO = ?&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG : ==&gt;  Preparing: SELECT xxx FROM be_command T WHERE T.REF_APP_NO = ?</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL报错：数据库结构错误</title>
      <link href="/2017/03/28/MySQL%E6%8A%A5%E9%94%99%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E9%94%99%E8%AF%AF/"/>
      <url>/2017/03/28/MySQL%E6%8A%A5%E9%94%99%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<blockquote><p>ERROR 1682 (HY000): Native table ‘performance_schema’.’session_variables’ has the wrong structure</p></blockquote><h2 id="重启MySQL"><a href="#重启MySQL" class="headerlink" title="重启MySQL"></a>重启MySQL</h2><p>重启MySQL后还是报同样的错。</p><h2 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h2><p>重启电脑后还是报同样的错。</p><h2 id="谷歌搜一下"><a href="#谷歌搜一下" class="headerlink" title="谷歌搜一下"></a>谷歌搜一下</h2><p>需要更新MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_upgrade -u root -p</span><br></pre></td></tr></table></figure><a id="more"></a><p>输出信息如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">kangyonggandeMacBook-Pro:~ kyg$ mysql_upgrade -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Checking if update is needed.</span><br><span class="line">Checking server version.</span><br><span class="line">Running queries to upgrade MySQL server.</span><br><span class="line">Checking system database.</span><br><span class="line">mysql.columns_priv                                 OK</span><br><span class="line">mysql.db                                           OK</span><br><span class="line">mysql.engine_cost                                  OK</span><br><span class="line">mysql.event                                        OK</span><br><span class="line">mysql.func                                         OK</span><br><span class="line">mysql.general_log                                  OK</span><br><span class="line">mysql.gtid_executed                                OK</span><br><span class="line">mysql.help_category                                OK</span><br><span class="line">mysql.help_keyword                                 OK</span><br><span class="line">mysql.help_relation                                OK</span><br><span class="line">mysql.help_topic                                   OK</span><br><span class="line">mysql.innodb_index_stats                           OK</span><br><span class="line">mysql.innodb_table_stats                           OK</span><br><span class="line">mysql.ndb_binlog_index                             OK</span><br><span class="line">mysql.plugin                                       OK</span><br><span class="line">mysql.proc                                         OK</span><br><span class="line">mysql.procs_priv                                   OK</span><br><span class="line">mysql.proxies_priv                                 OK</span><br><span class="line">mysql.server_cost                                  OK</span><br><span class="line">mysql.servers                                      OK</span><br><span class="line">mysql.slave_master_info                            OK</span><br><span class="line">mysql.slave_relay_log_info                         OK</span><br><span class="line">mysql.slave_worker_info                            OK</span><br><span class="line">mysql.slow_log                                     OK</span><br><span class="line">mysql.tables_priv                                  OK</span><br><span class="line">mysql.time_zone                                    OK</span><br><span class="line">mysql.time_zone_leap_second                        OK</span><br><span class="line">mysql.time_zone_name                               OK</span><br><span class="line">mysql.time_zone_transition                         OK</span><br><span class="line">mysql.time_zone_transition_type                    OK</span><br><span class="line">mysql.user                                         OK</span><br><span class="line">The sys schema is already up to date (version 1.5.1).</span><br><span class="line">Checking databases.</span><br><span class="line">simconf.user_role                                  OK</span><br><span class="line">simulator.bank_channel                             OK</span><br><span class="line">simulator.bank_command                             OK</span><br><span class="line">simulator.bank_command_log                         OK</span><br><span class="line">simulator.bank_resp                                OK</span><br><span class="line">simulator.bank_tran                                OK</span><br><span class="line">simulator.dz_file                                  OK</span><br><span class="line">simulator.menu                                     OK</span><br><span class="line">simulator.role                                     OK</span><br><span class="line">simulator.role_menu                                OK</span><br><span class="line">simulator.sim_order                                OK</span><br><span class="line">simulator.user                                     OK</span><br><span class="line">simulator.user_role                                OK</span><br><span class="line">sys.sys_config                                     OK</span><br><span class="line">Upgrade process completed successfully.</span><br><span class="line">Could not create the upgrade info file &apos;/usr/local/mysql/data/mysql_upgrade_info&apos; in the MySQL Servers datadir, errno: 13</span><br><span class="line">kangyonggandeMacBook-Pro:~ kyg$</span><br></pre></td></tr></table></figure><p>报错说是不能创建文件，可能是权限不足吧，于是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_upgrade -u root -p</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...省略...</span><br><span class="line">Upgrade process completed successfully.</span><br><span class="line">Checking if update is needed.</span><br></pre></td></tr></table></figure><p>这次没报错以为成功了，然后就测试了一把，发现还是报同样的错。</p><h2 id="再次重启MySQL"><a href="#再次重启MySQL" class="headerlink" title="再次重启MySQL"></a>再次重启MySQL</h2><p>测试后发现不报错了。</p><div class="note success"><p>问题是小问题，如果之前遇到过此类问题可以一步解决，但是如果没遇到过，就需要按部就班的去解决了。 </p></div>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7下安装Nodejs</title>
      <link href="/2017/03/25/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Nodejs/"/>
      <url>/2017/03/25/CentOS7%E4%B8%8B%E5%AE%89%E8%A3%85Nodejs/</url>
      <content type="html"><![CDATA[<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>下载最新的Nodejs版本，本文以v0.10.24为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压源码"><a href="#解压源码" class="headerlink" title="解压源码"></a>解压源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf node-v0.10.24.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd node-v0.10.24</span><br><span class="line">./configure --prefix=/usr/local/node/0.10.24</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置NODE-HOME，进入profile编辑环境变量"><a href="#配置NODE-HOME，进入profile编辑环境变量" class="headerlink" title="配置NODE_HOME，进入profile编辑环境变量"></a>配置NODE_HOME，进入profile编辑环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set for nodejs</span><br><span class="line">export NODE_HOME=/usr/local/node/0.10.24</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="编译-etc-profile-使配置生效"><a href="#编译-etc-profile-使配置生效" class="headerlink" title="编译/etc/profile 使配置生效"></a>编译/etc/profile 使配置生效</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="验证是否安装配置成功"><a href="#验证是否安装配置成功" class="headerlink" title="验证是否安装配置成功"></a>验证是否安装配置成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>输出 v0.10.24 表示配置成功<br>npm模块安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/node/0.10.24/lib/node_modules/</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手写前端单页面路由SimPage</title>
      <link href="/2017/03/25/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1SimPage/"/>
      <url>/2017/03/25/%E6%89%8B%E5%86%99%E5%89%8D%E7%AB%AF%E5%8D%95%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1SimPage/</url>
      <content type="html"><![CDATA[<p>前端我一直在用ace admin，在16年底把ace admin ajax（单页面）用在了我的博客中。<br>现在我想把博客重构一遍，不准备用ace了，可是又想用它的单页面，所以就动手自己写了一个。</p><a id="more"></a><h2 id="simpage-js"><a href="#simpage-js" class="headerlink" title="simpage.js"></a>simpage.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 单页面路由</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/21</span><br><span class="line"> */</span><br><span class="line">(function ($) &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取内容的url</span><br><span class="line">     *</span><br><span class="line">     * @param hash</span><br><span class="line">     * @returns &#123;string&#125;</span><br><span class="line">     */</span><br><span class="line">    function getContentUrl(hash) &#123;</span><br><span class="line">        return window.location.origin + window.location.pathname + hash</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载成功</span><br><span class="line">     */</span><br><span class="line">    function onSuccess() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载失败</span><br><span class="line">     */</span><br><span class="line">    function onError() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 总入口</span><br><span class="line">     *</span><br><span class="line">     * @param contentArea</span><br><span class="line">     * @param settings</span><br><span class="line">     */</span><br><span class="line">    function simPage(contentArea, settings) &#123;</span><br><span class="line">        var $contentArea = $(contentArea);</span><br><span class="line">        var $overlay = $();//empty set</span><br><span class="line">        var loadingTimer;</span><br><span class="line"></span><br><span class="line">        // 把settings的属性合并到defaults，并且不改变defaults</span><br><span class="line">        settings = $.extend(true, $.fn.simPage.defaults, settings);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 开始加载</span><br><span class="line">         */</span><br><span class="line">        function startLoading() &#123;</span><br><span class="line">            // 清除定时器</span><br><span class="line">            clearInterval(loadingTimer);</span><br><span class="line"></span><br><span class="line">            $overlay.remove();</span><br><span class="line">            $overlay = $(&apos;&lt;div&gt;&apos; + settings.loadingText + &apos;&lt;/div&gt;&apos;).css(&#123;</span><br><span class="line">                position: &quot;absolute&quot;,</span><br><span class="line">                left: 0,</span><br><span class="line">                top: 0,</span><br><span class="line">                bottom: 0,</span><br><span class="line">                right: 0,</span><br><span class="line">                zIndex: 9999,</span><br><span class="line">                textAlign: &quot;center&quot;,</span><br><span class="line">                marginTop: &quot;100px&quot;</span><br><span class="line">            &#125;).addClass(&quot;sim-page-loading&quot;);</span><br><span class="line"></span><br><span class="line">            $contentArea.append($overlay);</span><br><span class="line">            var text = $overlay.html();</span><br><span class="line">            var count = 0;</span><br><span class="line"></span><br><span class="line">            // 定时输出正在加载...</span><br><span class="line">            loadingTimer = setInterval(function () &#123;</span><br><span class="line">                var temp = &quot;.&quot;;</span><br><span class="line">                for (var i = 0; i &lt; count; i++) &#123;</span><br><span class="line">                    temp += &quot;.&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                $overlay.html(text + temp);</span><br><span class="line"></span><br><span class="line">                count++;</span><br><span class="line">                count %= 3;</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 停止加载</span><br><span class="line">         *</span><br><span class="line">         * @param isSuccess</span><br><span class="line">         */</span><br><span class="line">        function stopLoading(isSuccess) &#123;</span><br><span class="line">            // 清除定时器</span><br><span class="line">            clearInterval(loadingTimer);</span><br><span class="line">            $overlay.remove();</span><br><span class="line"></span><br><span class="line">            if (isSuccess) &#123;</span><br><span class="line">                onSuccess();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                onError();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 加载url</span><br><span class="line">         *</span><br><span class="line">         * @param url</span><br><span class="line">         */</span><br><span class="line">        function getUrl(url) &#123;</span><br><span class="line">            // 开始加载</span><br><span class="line">            startLoading();</span><br><span class="line"></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                &apos;url&apos;: url,</span><br><span class="line">                &apos;cache&apos;: false</span><br><span class="line">            &#125;).error(function () &#123;</span><br><span class="line">                // 停止加载</span><br><span class="line">                stopLoading(false);</span><br><span class="line">            &#125;).done(function (result) &#123;</span><br><span class="line">                // 停止加载</span><br><span class="line">                stopLoading(true);</span><br><span class="line">                // 内容替换</span><br><span class="line">                $contentArea.empty().html(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 异步加载url</span><br><span class="line">         *</span><br><span class="line">         * @param hash</span><br><span class="line">         * @param cache</span><br><span class="line">         */</span><br><span class="line">        function loadUrl(hash) &#123;</span><br><span class="line">            hash = hash.replace(/^(\#\!)?\#/, &apos;&apos;);</span><br><span class="line">            var url = settings.contentUrl(hash);</span><br><span class="line"></span><br><span class="line">            if (typeof url === &apos;string&apos;) &#123;</span><br><span class="line">                getUrl(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // 监听hash改变</span><br><span class="line">        $(window).off(&apos;hashchange&apos;).on(&apos;hashchange&apos;, function (e, manual_trigger) &#123;</span><br><span class="line">            var hash = $.trim(window.location.hash);</span><br><span class="line"></span><br><span class="line">            if (!hash || hash.length == 0) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 异步加载url</span><br><span class="line">            loadUrl(hash);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 是否使用默认URL</span><br><span class="line">        var hash = $.trim(window.location.hash);</span><br><span class="line">        if (!hash &amp;&amp; settings.defaultUrl) &#123;</span><br><span class="line">            window.location.hash = settings.defaultUrl;</span><br><span class="line">        &#125;</span><br><span class="line">        loadUrl(hash);</span><br><span class="line"></span><br><span class="line">        // 相对定位，给【加载中...】使用</span><br><span class="line">        $contentArea.css(&quot;position&quot;, &quot;relative&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 单页面路由</span><br><span class="line">     *</span><br><span class="line">     * @param option</span><br><span class="line">     * @returns &#123;*&#125;</span><br><span class="line">     */</span><br><span class="line">    $.fn.simPage = function (option) &#123;</span><br><span class="line">        return this.each(function () &#123;</span><br><span class="line">            $(this).data(&apos;simPage&apos;, new simPage(this, option));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认配置</span><br><span class="line">     *</span><br><span class="line">     * @type &#123;&#123;defaultUrl: string, contentUrl: getContentUrl, loadingText: string, success: onSuccess, error: onError&#125;&#125;</span><br><span class="line">     */</span><br><span class="line">    $.fn.simPage.defaults = &#123;</span><br><span class="line">        // 默认URL（默认index）</span><br><span class="line">        defaultUrl: &apos;#index&apos;,</span><br><span class="line">        // 内容URL（一般默认即可）</span><br><span class="line">        contentUrl: getContentUrl,</span><br><span class="line">        // 加载中的文字</span><br><span class="line">        loadingText: &apos;正在加载&apos;,</span><br><span class="line">        // success回调方法</span><br><span class="line">        success: onSuccess,</span><br><span class="line">        // error回调方法</span><br><span class="line">        error: onError</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window.jQuery);</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">&lt;div class=&quot;sim-page&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">js</span><br><span class="line">$(&quot;.sim-page&quot;).simPage();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习java8中java.time包下的几个类-LocalDateTime</title>
      <link href="/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalDateTime/"/>
      <url>/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalDateTime/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api/index.html</a></p></blockquote><p>前两篇文章中学习了<code>LocalDate</code>和<code>LocalTime</code>类，学到了一些关于日期和时间的一些用法，这一章中学习一下<code>LocalDateTime</code>的用法。</p><a id="more"></a><h2 id="LocalDateTime类"><a href="#LocalDateTime类" class="headerlink" title="LocalDateTime类"></a>LocalDateTime类</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final class LocalDateTime extends Object implements </span><br><span class="line">Temporal, TemporalAdjuster, ChronoLocalDateTime&lt;LocalDate&gt;, Serializable</span><br></pre></td></tr></table></figure><h3 id="类的描述"><a href="#类的描述" class="headerlink" title="类的描述"></a>类的描述</h3><p>这是一个<code>不可变</code>、<code>线程安全</code>的时间类，它可以存储年月日时分秒（毫秒）。</p><h2 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime now();</span><br></pre></td></tr></table></figure><h3 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h3><p>获取系统当前日期时间。</p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalDateTime today = LocalDateTime.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22T16:10:02.586</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="日期时间格式化"><a href="#日期时间格式化" class="headerlink" title="日期时间格式化"></a>日期时间格式化</h2><h3 id="方法定义-1"><a href="#方法定义-1" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String format(DateTimeFormatter formatter);</span><br></pre></td></tr></table></figure><h3 id="方法描述-1"><a href="#方法描述-1" class="headerlink" title="方法描述"></a>方法描述</h3><p>把日期时间格式化指定的格式。</p><h3 id="抛异常"><a href="#抛异常" class="headerlink" title="抛异常"></a>抛异常</h3><p>可能会抛运行时异常DateTimeException</p><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalDateTime today = LocalDateTime.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)));</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22T16:12:51.661</span><br><span class="line">2017-03-22 16:12:51.661</span><br><span class="line">2017-03-22T16:12:51.661</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>其中，<code>DateTimeFormatter</code>类中一些预定义的格式器，请参考之前的一篇文章:<br><a href="http://kangyonggan.com/#article/91">学习java8中java.time包下的几个类 - LocalDate</a></p><h2 id="日期时间解析"><a href="#日期时间解析" class="headerlink" title="日期时间解析"></a>日期时间解析</h2><h3 id="方法定义-2"><a href="#方法定义-2" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDateTime parse(CharSequence text);</span><br></pre></td></tr></table></figure><h3 id="方法描述-2"><a href="#方法描述-2" class="headerlink" title="方法描述"></a>方法描述</h3><p>把固定格式的字符串解析成日期时间，字符串格式必须为<code>2017-03-22T15:57:04</code>。</p><h3 id="抛异常-1"><a href="#抛异常-1" class="headerlink" title="抛异常"></a>抛异常</h3><p>如果字符串不能被解析就会抛异常DateTimeParseException</p><h3 id="例子4："><a href="#例子4：" class="headerlink" title="例子4："></a>例子4：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;2017-03-22T15:57:04&quot;;</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.parse(dateStr);</span><br><span class="line">    System.out.println(localDateTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22T15:57:04</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="例子5："><a href="#例子5：" class="headerlink" title="例子5："></a>例子5：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;2017-03-22 15:57:04&quot;;</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.parse(dateStr, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span><br><span class="line">    System.out.println(localDateTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22T15:57:04</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><p>请参考<a href="http://kangyonggan.com/学习java8中java-time包下的几个类-LocalDate/">学习java8中java.time包下的几个类-LocalDate</a>或者官方文档。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习java8中java.time包下的几个类-LocalTime</title>
      <link href="/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalTime/"/>
      <url>/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalTime/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api/index.html</a></p></blockquote><p>上一篇文章中学习了<code>LocalDate</code>类，学到了一些关于日期的一些用法，这一章中学习一下<code>LocalTime</code>的用法。</p><a id="more"></a><h2 id="LocalTime类"><a href="#LocalTime类" class="headerlink" title="LocalTime类"></a>LocalTime类</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final class LocalTime extends Object implements </span><br><span class="line">      Temporal, TemporalAdjuster, Comparable&lt;LocalTime&gt;, Serializable</span><br></pre></td></tr></table></figure><h3 id="类的描述"><a href="#类的描述" class="headerlink" title="类的描述"></a>类的描述</h3><p>这是一个<code>不可变</code>、<code>线程安全</code>的时间类，它可以存储时分秒（毫秒），但是不能存储年月日。</p><h2 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalTime now();</span><br></pre></td></tr></table></figure><h3 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h3><p>获取系统当前时间。</p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalDate today = LocalDate.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">15:44:38.220</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h2><h3 id="方法定义-1"><a href="#方法定义-1" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String format(DateTimeFormatter formatter);</span><br></pre></td></tr></table></figure><h3 id="方法描述-1"><a href="#方法描述-1" class="headerlink" title="方法描述"></a>方法描述</h3><p>把时间格式化指定的格式。</p><h3 id="抛异常"><a href="#抛异常" class="headerlink" title="抛异常"></a>抛异常</h3><p>可能会抛运行时异常DateTimeException</p><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalTime today = LocalTime.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.ofPattern(&quot;HHmmss&quot;)));</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.ISO_LOCAL_TIME));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">15:51:29.885</span><br><span class="line">155129</span><br><span class="line">15:51:29.885</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>其中，<code>DateTimeFormatter</code>类中一些预定义的格式器，请参考上一篇文章:<br><a href="http://kangyonggan.com/2017/03/25/学习java8中java-time包下的几个类-LocalDate/">学习java8中java.time包下的几个类-LocalDate</a></p><h2 id="时间解析"><a href="#时间解析" class="headerlink" title="时间解析"></a>时间解析</h2><h3 id="方法定义-2"><a href="#方法定义-2" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalTime parse(CharSequence text);</span><br></pre></td></tr></table></figure><h3 id="方法描述-2"><a href="#方法描述-2" class="headerlink" title="方法描述"></a>方法描述</h3><p>把固定格式的字符串解析成时间，字符串格式必须为一下几种之一（亲测）:</p><ul><li>HH:mm</li><li>HH:mm:ss</li><li>HH:mm:ss.S</li><li>HH:mm:ss.SS</li><li>HH:mm:ss.SSS</li></ul><p>不能为：</p><ul><li>HH</li><li>HH:m:ss</li></ul><h3 id="抛异常-1"><a href="#抛异常-1" class="headerlink" title="抛异常"></a>抛异常</h3><p>如果字符串不能被解析就会抛异常DateTimeParseException</p><h3 id="例子4："><a href="#例子4：" class="headerlink" title="例子4："></a>例子4：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;15:57:04&quot;;</span><br><span class="line">    LocalTime localTime = LocalTime.parse(dateStr);</span><br><span class="line">    System.out.println(localTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">15:57:04</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="例子5："><a href="#例子5：" class="headerlink" title="例子5："></a>例子5：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;155704&quot;;</span><br><span class="line">    LocalTime localTime = LocalTime.parse(dateStr, DateTimeFormatter.ofPattern(&quot;HHmmss&quot;));</span><br><span class="line">    System.out.println(localTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">15:57:04</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><p>请参考上一篇文章或者官方文档。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习java8中java.time包下的几个类-LocalDate</title>
      <link href="/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalDate/"/>
      <url>/2017/03/25/%E5%AD%A6%E4%B9%A0java8%E4%B8%ADjava-time%E5%8C%85%E4%B8%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB-LocalDate/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api/index.html</a></p></blockquote><p>在我之前的一篇文章中提到<a href="http://kangyonggan.com/#article/84">SimpleDateFormat日期格式化线程安全问题</a>，尽管有了解决方案，但依然不是很爽，接下来我就来学习一下java8中提供的新的日期时间类<code>java.time</code>，重新写一个合手的日期时间工具类，不！这些类本身就可以作为工具类了。</p><a id="more"></a><h2 id="LocalDate类"><a href="#LocalDate类" class="headerlink" title="LocalDate类"></a>LocalDate类</h2><h3 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final class LocalDate extends Object implements </span><br><span class="line">    Temporal, TemporalAdjuster, ChronoLocalDate, Serializable</span><br></pre></td></tr></table></figure><h3 id="类的描述"><a href="#类的描述" class="headerlink" title="类的描述"></a>类的描述</h3><p>这是一个<code>不可变</code>、<code>线程安全</code>的日期类，它可以存储年月日，但是不能存储时分秒。</p><blockquote><p>常用术语: 日期-年月日，时间-时分秒，日期时间-年月日时分秒</p></blockquote><h2 id="获取当前日期"><a href="#获取当前日期" class="headerlink" title="获取当前日期"></a>获取当前日期</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDate now();</span><br></pre></td></tr></table></figure><h3 id="方法描述"><a href="#方法描述" class="headerlink" title="方法描述"></a>方法描述</h3><p>获取系统当前日期。</p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><p>在<code>pom.xml</code>中指定使用jdk1.8编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--compiler plugin --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p><code>LocalDateNowDemo.java</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.time;</span><br><span class="line"></span><br><span class="line">import java.time.LocalDate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/22</span><br><span class="line"> */</span><br><span class="line">public class LocalDateNowDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(today);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>可以看出它不像java.util.Date那样输出一串乱七八糟的时间，如果我们仅仅使用日期，那会非常爽。<br>但是，有时候我们需要<code>yyyyMMdd</code>格式的日期。</p><h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><h3 id="方法定义-1"><a href="#方法定义-1" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String format(DateTimeFormatter formatter);</span><br></pre></td></tr></table></figure><h3 id="方法描述-1"><a href="#方法描述-1" class="headerlink" title="方法描述"></a>方法描述</h3><p>把日期格式化指定的格式。</p><h3 id="抛异常"><a href="#抛异常" class="headerlink" title="抛异常"></a>抛异常</h3><p>可能会抛运行时异常<code>DateTimeException</code></p><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalDate today = LocalDate.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.ofPattern(&quot;yyyyMMdd&quot;)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22</span><br><span class="line">20170322</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>每次都写<code>yyyyMMdd</code>感觉很麻烦，而且容易错容易忘，再看下面的写法：</p><h3 id="例子3："><a href="#例子3：" class="headerlink" title="例子3："></a>例子3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    LocalDate today = LocalDate.now();</span><br><span class="line">    System.out.println(today);</span><br><span class="line">    System.out.println(today.format(DateTimeFormatter.BASIC_ISO_DATE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22</span><br><span class="line">20170322</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>输出结果是一样的，这是使用了DateTimeFormatter类中预定义的一些格式器，更多预定义格式器如下：</p><table><thead><tr><th>Formatter</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>ofLocalizedDate(dateStyle)</td><td>Formatter with date style from the locale</td><td>‘2011-12-03’</td></tr><tr><td>ofLocalizedTime(timeStyle)</td><td>Formatter with time style from the locale</td><td>‘10:15:30’</td></tr><tr><td>ofLocalizedDateTime(dateTimeStyle)</td><td>Formatter with a style for date and time from the locale</td><td>‘3 Jun 2008 11:05:30’</td></tr><tr><td>ofLocalizedDateTime(dateStyle,timeStyle)</td><td>Formatter with date and time styles from the locale</td><td>‘3 Jun 2008 11:05’</td></tr><tr><td>BASIC_ISO_DATE</td><td>Basic ISO date</td><td>‘20111203’</td></tr><tr><td>ISO_LOCAL_DATE</td><td>ISO Local Date</td><td>‘2011-12-03’</td></tr><tr><td>ISO_OFFSET_DATE</td><td>ISO Date with offset</td><td>‘2011-12-03+01:00’</td></tr><tr><td>ISO_DATE</td><td>ISO Date with or without offset</td><td>‘2011-12-03+01:00’; ‘2011-12-03’</td></tr><tr><td>ISO_LOCAL_TIME</td><td>Time without offset</td><td>‘10:15:30’</td></tr><tr><td>ISO_OFFSET_TIME</td><td>Time with offset</td><td>‘10:15:30+01:00’</td></tr><tr><td>ISO_TIME</td><td>Time with or without offset</td><td>‘10:15:30+01:00’; ‘10:15:30’</td></tr><tr><td>ISO_LOCAL_DATE_TIME</td><td>ISO Local Date and Time</td><td>‘2011-12-03T10:15:30’</td></tr><tr><td>ISO_OFFSET_DATE_TIME</td><td>Date Time with Offset</td><td>‘2011-12-03T10:15:30+01:00’</td></tr><tr><td>ISO_ZONED_DATE_TIME</td><td>Zoned Date Time</td><td>‘2011-12-03T10:15:30+01:00[Europe/Paris]’</td></tr><tr><td>ISO_DATE_TIME</td><td>Date and time with ZoneId</td><td>‘2011-12-03T10:15:30+01:00[Europe/Paris]’</td></tr><tr><td>ISO_ORDINAL_DATE</td><td>Year and day of year</td><td>‘2012-337’</td></tr><tr><td>ISO_WEEK_DATE</td><td>Year and Week</td><td>2012-W48-6’</td></tr><tr><td>ISO_INSTANT</td><td>Date and Time of an Instant</td><td>‘2011-12-03T10:15:30Z’</td></tr><tr><td>RFC_1123_DATE_TIME</td><td>RFC 1123 / RFC 822</td><td>‘Tue, 3 Jun 2008 11:05:30 GMT’</td></tr></tbody></table><p>刚刚是把日期格式化，下面方法是相反的操作，即把指定格式的字符串解析成日期。</p><h2 id="日期解析"><a href="#日期解析" class="headerlink" title="日期解析"></a>日期解析</h2><h3 id="方法定义-2"><a href="#方法定义-2" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDate parse(CharSequence text);</span><br></pre></td></tr></table></figure><h3 id="方法描述-2"><a href="#方法描述-2" class="headerlink" title="方法描述"></a>方法描述</h3><p>把<code>固定格式</code>的字符串解析成日期，字符串格式必须为:<code>yyyy-MM-dd</code></p><h3 id="抛异常-1"><a href="#抛异常-1" class="headerlink" title="抛异常"></a>抛异常</h3><p>如果字符串不能被解析就会抛异常<code>DateTimeParseException</code></p><h3 id="例子4："><a href="#例子4：" class="headerlink" title="例子4："></a>例子4：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;2017-03-22&quot;;</span><br><span class="line">    LocalDate localDate = LocalDate.parse(dateStr);</span><br><span class="line">    System.out.println(localDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="例子5："><a href="#例子5：" class="headerlink" title="例子5："></a>例子5：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;2017-3-22&quot;;</span><br><span class="line">    LocalDate localDate = LocalDate.parse(dateStr);</span><br><span class="line">    System.out.println(localDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.time.format.DateTimeParseException: Text &apos;2017-3-22&apos; could not be parsed at index 5</span><br><span class="line">at java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:1949)</span><br><span class="line">at java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1851)</span><br><span class="line">at java.time.LocalDate.parse(LocalDate.java:400)</span><br><span class="line">at java.time.LocalDate.parse(LocalDate.java:385)</span><br><span class="line">at com.kangyonggan.demo.time.LocalDateParseDemo.main(LocalDateParseDemo.java:14)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>比较例4和例5，发现parse方法对字符串的要求还是比较严格的，一旦解析不了就会抛异常。<br>在实际开发中，我们的字符串不可能都是yyyy-MM-dd型的，LocalDate还提供了另外一个同名方法。</p><h2 id="日期解析（指定格式）"><a href="#日期解析（指定格式）" class="headerlink" title="日期解析（指定格式）"></a>日期解析（指定格式）</h2><h3 id="方法定义-3"><a href="#方法定义-3" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static LocalDate parse(CharSequence text, DateTimeFormatter formatter);</span><br></pre></td></tr></table></figure><h3 id="方法描述-3"><a href="#方法描述-3" class="headerlink" title="方法描述"></a>方法描述</h3><p>把指定格式的字符串解析成日期。</p><h3 id="抛异常-2"><a href="#抛异常-2" class="headerlink" title="抛异常"></a>抛异常</h3><p>如果字符串不能被解析就会抛异常<code>DateTimeParseException</code></p><h3 id="例子6："><a href="#例子6：" class="headerlink" title="例子6："></a>例子6：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String dateStr = &quot;20170322&quot;;</span><br><span class="line">    LocalDate localDate = LocalDate.parse(dateStr, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">    System.out.println(localDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-22</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>这个例子中我使用的是预定义的格式器，当然你也可以自己定义格式。<br>相比SimpleDateFormat，这个方法是线程安全的，且提供了一大批预定义的格式器。</p><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><p>LocalDate类中还提供了一些其他方法，比如：</p><table><thead><tr><th>方法定义</th><th>描述</th></tr></thead><tbody><tr><td>public int getYear()</td><td>获取年</td></tr><tr><td>public int getMonthValue()</td><td>获取月</td></tr><tr><td>public int getDayOfMonth()</td><td>获取日</td></tr><tr><td>public boolean isAfter(ChronoLocalDate other)</td><td>判断是否在other日期之后</td></tr><tr><td>public boolean isBefore(ChronoLocalDate other)</td><td>判断是否在other日期之前</td></tr><tr><td>public boolean isEqual(ChronoLocalDate other)</td><td>判断和other日期是否相等</td></tr><tr><td>public boolean isLeapYear()</td><td>判断是否是闰年</td></tr><tr><td>public int lengthOfMonth()</td><td>返回一个月有多少天</td></tr><tr><td>public int lengthOfYear()</td><td>返回一年有多少天</td></tr><tr><td>public static LocalDate of(int year, int month, int dayOfMonth)</td><td>返回一个日期</td></tr><tr><td>public LocalDate minusDays(long daysToSubtract)</td><td>减去n天，返回一个新的LocalDate</td></tr><tr><td>public LocalDate minusWeeks(long weeksToSubtract)</td><td>减去n周，返回一个新的LocalDate</td></tr><tr><td>public LocalDate minusMonths(long monthsToSubtract)</td><td>减去n月，返回一个新的LocalDate</td></tr><tr><td>public LocalDate minusYears(long yearsToSubtract)</td><td>减去n年，返回一个新的LocalDate</td></tr><tr><td>public LocalDate plusDays(long daysToSubtract)</td><td>加上n天，返回一个新的LocalDate</td></tr><tr><td>public LocalDate plusWeeks(long weeksToSubtract)</td><td>加上n周，返回一个新的LocalDate</td></tr><tr><td>public LocalDate plusMonths(long monthsToSubtract)</td><td>加上n月，返回一个新的LocalDate</td></tr><tr><td>public LocalDate plusYears(long yearsToSubtract)</td><td>加上n年，返回一个新的LocalDate</td></tr></tbody></table><blockquote><p>LocalDate类中远不止这些方法，具体请查看官方文档。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Log4j正则替换功能隐藏敏感信息</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8Log4j%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2%E5%8A%9F%E8%83%BD%E9%9A%90%E8%97%8F%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8Log4j%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2%E5%8A%9F%E8%83%BD%E9%9A%90%E8%97%8F%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>今天工作中遇到一个问题，需要把一些Log4j日志中的敏感信息给隐藏了，比如：手机号，身份证号等。</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a><code>pom.xml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="log4j-xml"><a href="#log4j-xml" class="headerlink" title="log4j.xml"></a><code>log4j.xml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;</span><br><span class="line">&lt;log4j:configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name=&quot;console&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!--&lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;param name=&quot;ConversionPattern&quot; value=&quot;%d %t [%F:%L] %-5p : %m%n&quot; /&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/layout&gt;--&gt;</span><br><span class="line">        &lt;layout class=&quot;com.kangyonggan.demo.MyPatternLayout&quot;&gt;</span><br><span class="line">            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d %t [%F:%L] %-5p : %m%n&quot;/&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root&gt;</span><br><span class="line">        &lt;level value=&quot;debug&quot;&gt;&lt;/level&gt;</span><br><span class="line">        &lt;appender-ref ref=&quot;console&quot;&gt;&lt;/appender&gt;</span><br><span class="line">    &lt;/root&gt;</span><br><span class="line">&lt;/log4j:configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="MyPatternLayout-java"><a href="#MyPatternLayout-java" class="headerlink" title="MyPatternLayout.java"></a><code>MyPatternLayout.java</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.apache.log4j.PatternLayout;</span><br><span class="line">import org.apache.log4j.spi.LoggingEvent;</span><br><span class="line"></span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/20</span><br><span class="line"> */</span><br><span class="line">public class MyPatternLayout extends PatternLayout &#123;</span><br><span class="line"></span><br><span class="line">    private static final String HIDDEN = &quot;$1$2$3****$5$6&quot;;</span><br><span class="line">    private static final Pattern MOBILE_PATTERN = Pattern.compile(&quot;(\\D|^)(1)(3\\d|4[57]|5[^4]|7[0137]|8\\d)(\\d&#123;4&#125;)(\\d&#123;4&#125;)(\\D|$)&quot;);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String format(LoggingEvent event) &#123;</span><br><span class="line">        if (event.getMessage() instanceof String) &#123;</span><br><span class="line">            String message = event.getRenderedMessage();</span><br><span class="line"></span><br><span class="line">            Matcher matcher = MOBILE_PATTERN.matcher(message);</span><br><span class="line"></span><br><span class="line">            if (matcher.find()) &#123;</span><br><span class="line">                String maskedMessage = matcher.replaceAll(HIDDEN);</span><br><span class="line"></span><br><span class="line">                Throwable throwable = event.getThrowableInformation() != null ? event.getThrowableInformation().getThrowable() : null;</span><br><span class="line"></span><br><span class="line">                LoggingEvent maskedEvent = new LoggingEvent(</span><br><span class="line">                        event.fqnOfCategoryClass,</span><br><span class="line">                        Logger.getLogger(event.getLoggerName()),</span><br><span class="line">                        event.timeStamp,</span><br><span class="line">                        event.getLevel(),</span><br><span class="line">                        maskedMessage,</span><br><span class="line">                        throwable);</span><br><span class="line"></span><br><span class="line">                return super.format(maskedEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return super.format(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-java"><a href="#Test-java" class="headerlink" title="Test.java"></a><code>Test.java</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/20</span><br><span class="line"> */</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger = Logger.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        logger.info(&quot;手机号1: 13911119999，姓名：qweqe&quot;);</span><br><span class="line">        logger.info(&quot;手机号2: asd13911119999asd&quot;);</span><br><span class="line">        logger.info(&quot;假手机号1: 139a11119999&quot;);</span><br><span class="line">        logger.info(&quot;假手机号2: 139111199991&quot;);</span><br><span class="line">        logger.info(&quot;假手机号3: 139111199991&quot;);</span><br><span class="line">        logger.info(&quot;假手机号4: 444139111199991&quot;);</span><br><span class="line">        logger.info(&quot;假手机号5: 44413911119999&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            int a = 1 / 0;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;13911110000&quot;, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2017-03-21 15:32:50,163 main [Test.java:14] INFO  : 手机号1: 139****9999，姓名：qweqe</span><br><span class="line">2017-03-21 15:32:50,166 main [Test.java:15] INFO  : 手机号2: asd139****9999asd</span><br><span class="line">2017-03-21 15:32:50,166 main [Test.java:16] INFO  : 假手机号1: 139a11119999</span><br><span class="line">2017-03-21 15:32:50,166 main [Test.java:17] INFO  : 假手机号2: 139111199991</span><br><span class="line">2017-03-21 15:32:50,166 main [Test.java:18] INFO  : 假手机号3: 139111199991</span><br><span class="line">2017-03-21 15:32:50,167 main [Test.java:19] INFO  : 假手机号4: 444139111199991</span><br><span class="line">2017-03-21 15:32:50,167 main [Test.java:20] INFO  : 假手机号5: 44413911119999</span><br><span class="line">2017-03-21 15:32:50,167 main [Test.java:25] ERROR : 13911110000</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.kangyonggan.demo.Test.main(Test.java:23)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><blockquote><p>例子中的正则表达式写的比较弱，请根据实际情况自己写。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>查询引擎优化方案</title>
      <link href="/2017/03/25/%E6%9F%A5%E8%AF%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2017/03/25/%E6%9F%A5%E8%AF%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><ul><li>每分钟去查N次数据库，每一次都会扫描几千行，其中N=通道的数量。</li><li>查的非常频繁，但线上状态为I或E的交易很少很少，有一种杀鸡用牛刀的感觉。</li><li>第一次查询时间区间太大（30s~90s之间）。</li><li>查询高峰堆在一个时间点上，不均衡。</li><li>每分钟启动一个线程，但一此只能启动一个线程。</li></ul><a id="more"></a><h2 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h2><ul><li>不用查数据库。</li><li>只处理状态为I或E的交易。</li><li>每次查询时间的区间可以精确到秒, 粒度可自由调控。</li><li>均衡分布。</li><li>可以使用线程池，可以N个线程协同处理。</li></ul><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>创建一个数组<code>task[List]</code>，一个时钟线程Thread-timer，长度为12，每5秒走一步，如下图：</p><p><img src="/uploads/20170315215531865.png" alt="task-arr.png"></p><p>如果有状态为I或E的交易，就把BankCommand放入task[current_index + 6]的list中【此处有并发问题，加锁即可解决，后面讨论】，并把他的<code>loop_count</code>标记为0。</p><p>6 * 5s=30s之后，时钟走到刚刚上面那个交易存放的位置，另起线程取出List中loop_count等于0的交易之后去查询，再更新beCommand表，并把此list中所有交易的loop_count减1，然后清除list中loop_count小于0的交易。【另起线程时可以使用线程池】</p><p>如果某银行通道的查询需要延迟3分钟后才查询，只需要在放入task中的时候，让loop_count等于3。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用U盘安装CentOS7最小安装版</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8U%E7%9B%98%E5%AE%89%E8%A3%85CentOS7%E6%9C%80%E5%B0%8F%E5%AE%89%E8%A3%85%E7%89%88/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8U%E7%9B%98%E5%AE%89%E8%A3%85CentOS7%E6%9C%80%E5%B0%8F%E5%AE%89%E8%A3%85%E7%89%88/</url>
      <content type="html"><![CDATA[<h2 id="下载镜像文件和刻录工具"><a href="#下载镜像文件和刻录工具" class="headerlink" title="下载镜像文件和刻录工具"></a>下载镜像文件和刻录工具</h2><ol><li><p>CentOS7最小安装版镜像文件下载地址：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1611.iso</a></p></li><li><p>刻录工具下载地址：<a href="https://cn.ultraiso.net/uiso9_cn.exe" target="_blank" rel="noopener">https://cn.ultraiso.net/uiso9_cn.exe</a></p></li></ol><a id="more"></a><h2 id="把系统镜像刻录到U盘"><a href="#把系统镜像刻录到U盘" class="headerlink" title="把系统镜像刻录到U盘"></a>把系统镜像刻录到U盘</h2><p>打开刻录工具<code>UltraISO</code>，【文件】–&gt;【打开】–&gt;【选择下载好的镜像CentOS-7-x86_64-Minimal-1611.iso】</p><p><img src="/uploads/centos-001.png" alt="打开镜像"></p><p>【启动】–&gt;【写入硬盘映像…】</p><p><img src="/uploads/centos-002.png" alt="写入硬盘映像"></p><p>这个过程会格式化U盘，请先备份U盘内的数据，然后点击【写入】，写入过程需要一些时间。</p><p><img src="/uploads/centos-003.png" alt="写入"></p><p>一会之后，写入完成！至此，你就完成了准备工作“把系统镜像刻录到U盘”，接下来就是要用U盘安装系统了。</p><p><img src="/uploads/centos-004.png" alt="写入成功"></p><h2 id="使用U盘启动"><a href="#使用U盘启动" class="headerlink" title="使用U盘启动"></a>使用U盘启动</h2><p>在按开机按钮后，点按F12（大多数品牌的电脑都是按F12进入一次性启动项），进入启动项后，选择带USB字样的那一项进入</p><p><img src="/uploads/centos-005.jpg" alt="bios-usb"></p><p>进入CentOS7的安装界面，选择第一行<code>Install CentOS Linux 7</code></p><p><img src="/uploads/centos-006.jpg" alt="安装CentOS7"></p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>选择系统语言，这里我选择的是英语（推荐使用英语）。</p><p><img src="/uploads/centos-015.jpg" alt="选择语言"></p><p>选择磁盘，点击【SYSTEM】–&gt;【INSTALLION DESTINATION】</p><p><img src="/uploads/centos-007.jpg" alt="选择磁盘"></p><p>选中自己电脑的硬盘，点击【Done】</p><p><img src="/uploads/centos-008.jpg" alt="选中自己电脑的硬盘"></p><p>释放磁盘空间，点击【Reclaim space】</p><p><img src="/uploads/centos-009.jpg" alt="释放磁盘空间"></p><p>删除老系统占用的空间，点击【Delete】</p><p><img src="/uploads/centos-010.jpg" alt="删除老系统占用的空间"></p><p>删除后点击【Reclaim space】完成。</p><p><img src="/uploads/centos-011.jpg" alt="删除老系统占用的空间完成"></p><p>开始安装，点击【Begin Installation】</p><p><img src="/uploads/centos-012.jpg" alt="开始安装"></p><p>此时会进入漫长的安装过程（机器配置好的话会很快），点击【ROOT PASSWORD】设置root的密码。</p><p><img src="/uploads/centos-013.jpg" alt="设置root的密码"></p><p>root密码设置完成后点击【DONE】</p><p><img src="/uploads/centos-014.jpg" alt="设置root的密码完成"></p><p>然后就等吧，直到右下角出现【Reboot】，说明安装完毕！</p><p><img src="/uploads/centos-016.jpg" alt="安装完毕"></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring使用注解方式进行事务管理</title>
      <link href="/2017/03/25/Spring%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>/2017/03/25/Spring%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>参考:<a href="http://www.cnblogs.com/younggun/archive/2013/07/16/3193800.html" target="_blank" rel="noopener">http://www.cnblogs.com/younggun/archive/2013/07/16/3193800.html</a></p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="在spring配置文件中引入tx-命名空间"><a href="#在spring配置文件中引入tx-命名空间" class="headerlink" title="在spring配置文件中引入tx:命名空间"></a>在spring配置文件中引入<a href="tx:" target="_blank" rel="noopener">tx:</a>命名空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</span><br><span class="line">         http://www.springframework.org/schema/tx</span><br><span class="line">         http://www.springframework.org/schema/tx/spring-tx-2.0.xsd&quot;&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="具有-Transactional注解的bean自动配置为声明式事务支持"><a href="#具有-Transactional注解的bean自动配置为声明式事务支持" class="headerlink" title="具有@Transactional注解的bean自动配置为声明式事务支持"></a>具有@Transactional注解的bean自动配置为声明式事务支持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用JDBC事务 --&gt;</span><br><span class="line">&lt;bean id=&quot;transactionManager&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用annotation注解方式配置事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation&gt;</span><br></pre></td></tr></table></figure><h3 id="在接口或类的声明处-写一个-Transactional"><a href="#在接口或类的声明处-写一个-Transactional" class="headerlink" title="在接口或类的声明处,写一个@Transactional"></a>在接口或类的声明处,写一个@Transactional</h3><ol><li>只在接口上写，接口的实现上不写，实现类会继承下来，也可以覆写注解。</li><li>如果注解在类上，适用于类中所有的<code>public</code>的方法。</li></ol><h2 id="事务的传播特性和隔离级别"><a href="#事务的传播特性和隔离级别" class="headerlink" title="事务的传播特性和隔离级别"></a>事务的传播特性和隔离级别</h2><h3 id="事务注解方式-Transactional"><a href="#事务注解方式-Transactional" class="headerlink" title="事务注解方式: @Transactional"></a>事务注解方式: @Transactional</h3><p>当标于类前时, 标示类中所有方法都进行事务处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">public class UserServiceImpl implements UserService &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="当类中某些方法不需要事务时"><a href="#当类中某些方法不需要事务时" class="headerlink" title="当类中某些方法不需要事务时"></a>当类中某些方法不需要事务时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">public class UserServiceImpl extends BaseService&lt;User&gt; implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Transactional(propagation = Propagation.NOT_SUPPORTED)</span><br><span class="line">    public List&lt;Object&gt; getAll() &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务传播特性"><a href="#事务传播特性" class="headerlink" title="事务传播特性"></a>事务传播特性</h3><ol><li>@Transactional(propagation = Propagation.REQUIRED) 如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)</li><li>@Transactional(propagation = Propagation.NOT_SUPPORTED) 容器不为这个方法开启事务</li><li>@Transactional(propagation = Propagation.REQUIRES_NEW) 不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</li><li>@Transactional(propagation = Propagation.MANDATORY) 必须在一个已有的事务中执行,否则抛出异常</li><li>@Transactional(propagation = Propagation.NEVER) 必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</li><li>@Transactional(propagation = Propagation.SUPPORTS) 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务</li></ol><h3 id="事务超时设置"><a href="#事务超时设置" class="headerlink" title="事务超时设置"></a>事务超时设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(timeout = 30) //默认是30秒</span><br></pre></td></tr></table></figure><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><ol><li>@Transactional(isolation = Isolation.READ_UNCOMMITTED) 读取未提交数据(会出现脏读, 不可重复读) 基本不使用</li><li>@Transactional(isolation = Isolation.READ_COMMITTED) 读取已提交数据(会出现不可重复读和幻读)</li><li>@Transactional(isolation = Isolation.REPEATABLE_READ) 可重复读(会出现幻读)</li><li>@Transactional(isolation = Isolation.SERIALIZABLE) 串行化</li></ol><blockquote><p>MySQL: 默认为REPEATABLE_READ级别<br>SQLServer: 默认为READ_COMMITTED</p></blockquote><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>一个事务读取到另一事务未提交的更新数据。</p><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 后续读取可以读到另一事务已提交的更新数据. 相反, “可重复读”在同一事务中多次读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p>一个事务读到另一个事务已提交的insert数据。</p><h2 id="Transactional注解中常用参数说明"><a href="#Transactional注解中常用参数说明" class="headerlink" title="@Transactional注解中常用参数说明"></a>@Transactional注解中常用参数说明</h2><table><thead><tr><th>参数名称</th><th>功能描述</th></tr></thead><tbody><tr><td>readOnly</td><td>该属性用于设置当前事务是否为只读事务</td></tr><tr><td>rollbackFor</td><td>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>rollbackForClassName</td><td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称：@Transactional(rollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,”Exception”})</td></tr><tr><td>noRollbackFor</td><td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>noRollbackForClassName</td><td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：@Transactional(noRollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(noRollbackForClassName={“RuntimeException”,”Exception”})</td></tr><tr><td>propagation</td><td>该属性用于设置事务的传播行为，例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</td></tr><tr><td>isolation</td><td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td></tr><tr><td>timeout</td><td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="Transactional只能被应用到public方法上"><a href="#Transactional只能被应用到public方法上" class="headerlink" title="@Transactional只能被应用到public方法上"></a>@Transactional只能被应用到public方法上</h3><p>对于其它非public的方法,如果标记了@Transactional也不会报错,但方法没有事务功能.</p><h3 id="关于异常回滚"><a href="#关于异常回滚" class="headerlink" title="关于异常回滚"></a>关于异常回滚</h3><p>用spring事务管理器来管理数据库的打开、提交、回滚。默认遇到运行期例外(throw new RuntimeException(“异常了”);)会回滚，即遇到不受检查（unchecked）的例外时回滚。<br>而遇到需要捕获的例外(throw new Exception(“注释”);)不会回滚,即遇到受检查的例外（就是非运行时抛出的异常，编译器会检查到的异常叫受检查例外或说受检查异常）时，需我们指定方式来让事务回滚 要想所有异常都回滚,要加上 @Transactional( rollbackFor={Exception.class,其它异常})。<br>如果让unchecked例外不回滚： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(notRollbackFor = RunTimeException.class)</span><br><span class="line">@Transactional(rollbackFor = Exception.class) //指定回滚,遇到异常Exception时回滚</span><br><span class="line">public void methodName() &#123;</span><br><span class="line">throw new Exception(&quot;异常了&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指定不回滚,遇到运行期例外(throw new RuntimeException(&quot;异常了&quot;);)会回滚</span><br><span class="line">@Transactional(noRollbackFor = Exception.class)</span><br><span class="line">public ItimDaoImpl getItemDaoImpl() &#123;</span><br><span class="line">throw new RuntimeException(&quot;异常了&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Transactional和tx-annotation-driven-lt-tx-annotation-gt"><a href="#Transactional和tx-annotation-driven-lt-tx-annotation-gt" class="headerlink" title="@Transactional和tx:annotation-driven&lt;/tx:annotation&gt;"></a>@Transactional和<a href="tx:annotation-driven" target="_blank" rel="noopener">tx:annotation-driven</a>&lt;/tx:annotation&gt;</h3><p>@Transactional注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而，请注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据，能够被可以识别 @Transactional 注解和上述的配置适当的具有事务行为的beans所使用。上面的例子中，其实正是<code>&lt;tx:annotation-driven&gt;&lt;/tx:annotation&gt;</code>元素的出现开启了事务行为。</p><h3 id="请在实现类上使用-Transactional"><a href="#请在实现类上使用-Transactional" class="headerlink" title="请在实现类上使用@Transactional"></a>请在实现类上使用@Transactional</h3><p>Spring团队的建议是你在具体的类（或类的方法）上使用 @Transactional 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 @Transactional 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是 不能继承 的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因 此，请接受Spring团队的建议并且在具体的类上使用 @Transactional 注解。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SimpleDateFormat日期格式化线程安全问题</title>
      <link href="/2017/03/25/SimpleDateFormat%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2017/03/25/SimpleDateFormat%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="常用的日期工具类"><a href="#常用的日期工具类" class="headerlink" title="常用的日期工具类"></a>常用的日期工具类</h2><p>我们在开发中通常需要对日期进行格式化，就想到了写一个工具类，如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.util;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 日期工具类</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/10</span><br><span class="line"> */</span><br><span class="line">public class DateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DATE_TIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化成日期时间型字符串</span><br><span class="line">     *</span><br><span class="line">     * @param date 日期</span><br><span class="line">     * @return 返回日期时间型字符串</span><br><span class="line">     */</span><br><span class="line">    public static String format2DateTime(Date date) &#123;</span><br><span class="line">        return new SimpleDateFormat(DATE_TIME).format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把字符串成解析日期</span><br><span class="line">     *</span><br><span class="line">     * @param source 日期字符串</span><br><span class="line">     * @return 解析后的日期</span><br><span class="line">     * @throws ParseException 解析异常【字符串的格式不正确】</span><br><span class="line">     */</span><br><span class="line">    public static Date parse(String source) throws ParseException &#123;</span><br><span class="line">        return new SimpleDateFormat(DATE_TIME).parse(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="追求性能的日期工具类"><a href="#追求性能的日期工具类" class="headerlink" title="追求性能的日期工具类"></a>追求性能的日期工具类</h2><p>追求性能的同学可能会说：每次都new一个SimpleDateFormat太浪费了，于是有了下面一版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.util;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 日期工具类</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/10</span><br><span class="line"> */</span><br><span class="line">public class DateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DATE_TIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">    private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DATE_TIME);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化成日期时间型字符串</span><br><span class="line">     *</span><br><span class="line">     * @param date 日期</span><br><span class="line">     * @return 返回日期时间型字符串</span><br><span class="line">     */</span><br><span class="line">    public static String format2DateTime(Date date) &#123;</span><br><span class="line">        return simpleDateFormat.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把字符串成解析日期</span><br><span class="line">     *</span><br><span class="line">     * @param source 日期字符串</span><br><span class="line">     * @return 解析后的日期</span><br><span class="line">     * @throws ParseException 解析异常【字符串的格式不正确或多线程临界资源问题】</span><br><span class="line">     */</span><br><span class="line">    public static Date parse(String source) throws ParseException &#123;</span><br><span class="line">        return simpleDateFormat.parse(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试临界资源问题"><a href="#测试临界资源问题" class="headerlink" title="测试临界资源问题"></a>测试临界资源问题</h2><p>这个工具类在大多数的时候都是ok的，但是在高并发的时候就不是那么好使了，看看测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.util;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 测试DateUtil高并发</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/10</span><br><span class="line"> */</span><br><span class="line">public class TestDateUtil &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">            new Thread() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    while (true) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            sleep(1000);</span><br><span class="line">                            System.out.println(DateUtil.parse(&quot;2017-03-10 11:24:35&quot;));</span><br><span class="line">                        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125; catch (ParseException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            return;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-0&quot; Exception in thread &quot;Thread-1&quot; java.lang.NumberFormatException: For input string: &quot;101.E1012E&quot;</span><br><span class="line">at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)</span><br><span class="line">at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)</span><br><span class="line">at java.lang.Double.parseDouble(Double.java:538)</span><br><span class="line">at java.text.DigitList.getDouble(DigitList.java:169)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:2056)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:364)</span><br><span class="line">at com.kangyonggan.demo.util.DateUtil.parse(DateUtil.java:36)</span><br><span class="line">at com.kangyonggan.demo.util.TestDateUtil$1.run(TestDateUtil.java:20)</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;101.E1012E2&quot;</span><br><span class="line">at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043)</span><br><span class="line">at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)</span><br><span class="line">at java.lang.Double.parseDouble(Double.java:538)</span><br><span class="line">at java.text.DigitList.getDouble(DigitList.java:169)</span><br><span class="line">at java.text.DecimalFormat.parse(DecimalFormat.java:2056)</span><br><span class="line">at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:2162)</span><br><span class="line">at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514)</span><br><span class="line">at java.text.DateFormat.parse(DateFormat.java:364)</span><br><span class="line">at com.kangyonggan.demo.util.DateUtil.parse(DateUtil.java:36)</span><br><span class="line">at com.kangyonggan.demo.util.TestDateUtil$1.run(TestDateUtil.java:20)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>从错误信息来看是字符串的格式有误，但我们的入参时没错的，于是我稍微修改代码:<code>i &lt; 1</code>，即只有一个线程，这时候是不会报错的。<br>报错显然是多线程中临界资源<code>simpleDateFormat</code>引起的，说明<code>parse</code>方法不是线程安全的。查看SimpleDateFormat源码可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Date parsedDate;</span><br><span class="line">try &#123;</span><br><span class="line">    parsedDate = calb.establish(calendar).getTime();</span><br><span class="line">    // If the year value is ambiguous,</span><br><span class="line">    // then the two-digit year == the default start year</span><br><span class="line">    if (ambiguousYear[0]) &#123;</span><br><span class="line">        if (parsedDate.before(defaultCenturyStart)) &#123;</span><br><span class="line">            parsedDate = calb.addYear(100).establish(calendar).getTime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// An IllegalArgumentException will be thrown by Calendar.getTime()</span><br><span class="line">// if any fields are out of range, e.g., MONTH == 17.</span><br><span class="line">catch (IllegalArgumentException e) &#123;</span><br><span class="line">    pos.errorIndex = start;</span><br><span class="line">    pos.index = oldStart;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>calendar</code>是成员变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected Calendar calendar;</span><br></pre></td></tr></table></figure><p>也就是说在多线程并发时，这个临界资源是可能被多个线程同时使用的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-在每次调用的时候去new一个"><a href="#1-在每次调用的时候去new一个" class="headerlink" title="1. 在每次调用的时候去new一个"></a>1. 在每次调用的时候去new一个</h3><p>虽然可能会占用一些内存（一般不是很明显，忽略不计），但比较安全。</p><h3 id="2-访问临界资源时，使用同步"><a href="#2-访问临界资源时，使用同步" class="headerlink" title="2. 访问临界资源时，使用同步"></a>2. 访问临界资源时，使用同步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.util;</span><br><span class="line"></span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 日期工具类</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/10</span><br><span class="line"> */</span><br><span class="line">public class DateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DATE_TIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">    private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DATE_TIME);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化成日期时间型字符串</span><br><span class="line">     *</span><br><span class="line">     * @param date 日期</span><br><span class="line">     * @return 返回日期时间型字符串</span><br><span class="line">     */</span><br><span class="line">    public static String format2DateTime(Date date) &#123;</span><br><span class="line">        synchronized (simpleDateFormat) &#123;</span><br><span class="line">            return simpleDateFormat.format(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把字符串成解析日期</span><br><span class="line">     *</span><br><span class="line">     * @param source 日期字符串</span><br><span class="line">     * @return 解析后的日期</span><br><span class="line">     * @throws ParseException 解析异常【字符串的格式不正确】</span><br><span class="line">     */</span><br><span class="line">    public static Date parse(String source) throws ParseException &#123;</span><br><span class="line">        synchronized (simpleDateFormat) &#123;</span><br><span class="line">            return simpleDateFormat.parse(source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当调用太过频繁时，会有阻塞，对性能有一定的影响。</p><h3 id="3-使用ThreadLocal"><a href="#3-使用ThreadLocal" class="headerlink" title="3. 使用ThreadLocal"></a>3. 使用ThreadLocal</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.demo.util;</span><br><span class="line"></span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.ParseException;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 日期工具类</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/3/10</span><br><span class="line"> */</span><br><span class="line">public class DateUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String DATE_TIME = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line">    private static final ThreadLocal&lt;DateFormat&gt; threadLocal = new ThreadLocal&lt;DateFormat&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 格式化成日期时间型字符串</span><br><span class="line">     *</span><br><span class="line">     * @param date 日期</span><br><span class="line">     * @return 返回日期时间型字符串</span><br><span class="line">     */</span><br><span class="line">    public static String format2DateTime(Date date) &#123;</span><br><span class="line">        return getDateFormat().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 把字符串成解析日期</span><br><span class="line">     *</span><br><span class="line">     * @param source 日期字符串</span><br><span class="line">     * @return 解析后的日期</span><br><span class="line">     * @throws ParseException 解析异常【字符串的格式不正确】</span><br><span class="line">     */</span><br><span class="line">    public static Date parse(String source) throws ParseException &#123;</span><br><span class="line">        return getDateFormat().parse(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取一个线程独享的dateFormat，如果没有则创建一个</span><br><span class="line">     *</span><br><span class="line">     * @return 返回一个线程独享的dateFormat</span><br><span class="line">     */</span><br><span class="line">    private static DateFormat getDateFormat() &#123;</span><br><span class="line">        DateFormat dateFormat = threadLocal.get();</span><br><span class="line">        if (dateFormat == null) &#123;</span><br><span class="line">            dateFormat = new SimpleDateFormat(DATE_TIME);</span><br><span class="line">            threadLocal.set(dateFormat);</span><br><span class="line">        &#125;</span><br><span class="line">        return dateFormat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ThreadLocal有些情况下并不能减少对象的创建（如果一个线程只调用一次DateUtil），但是有些时候还是有效果的（一个线程多次调用DateUtil）。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HashMap实现原理分析</title>
      <link href="/2017/03/25/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2017/03/25/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="HashMap实现原理分析"><a href="#HashMap实现原理分析" class="headerlink" title="HashMap实现原理分析"></a>HashMap实现原理分析</h1><blockquote><p>参考：<a href="http://blog.csdn.net/vking_wang/article/details/14166593" target="_blank" rel="noopener">http://blog.csdn.net/vking_wang/article/details/14166593</a></p></blockquote><h2 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h2><p>在数据结构中，有<code>数组</code>和<code>链表</code>来实现对数据的存储，但这两者是两个极端。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的存储区间是连续的，空间复杂度大，时间复杂度小。特点是：<code>查找容易，插入和删除困难</code>。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表的存储区间是离散的，空间复杂度小，时间复杂度大。特点是：<code>查找困难，插入和删除容易</code>。</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希表是综合了数组和链表的优点，既满足了查找方便，同时也不占用太多空间，使用也很方便。</p><a id="more"></a><p>哈希表有很多实现方式，下面讲解最常用的拉链发，可以理解为链表的数组：</p><p><img src="/uploads/20170309210540154.jpeg" alt="la"></p><p>从上图中总可以看出，哈希表是由<code>数组+链表</code>组成的，HashMap里面实现了一个静态内部类<code>Entity</code>,其重要属性有<code>key</code>、<code>value</code>和<code>next</code>，从属性可以看出Entity是HashMap键值对实现的一个基础Bean，上面我们说到HashMap的基础就是一个线性数组，即Entity[],Map里面的内容都保存在数组Entity[]中, 下面是个demo：</p><p><img src="/uploads/20170309210548825.png" alt="lan"></p><p>这个链表是一个长度为16的数组，左边数字是数组的下标，右边的数字是key的hash值，数组中的每一个元素都是一个链表的头节点，那么这些元素是按照什么规则存储的呢？又是按照什么规则查找的呢？</p><h4 id="存取规则hash-key-len"><a href="#存取规则hash-key-len" class="headerlink" title="存取规则hash(key)%len"></a>存取规则<code>hash(key)%len</code></h4><p>比如上图中，key的hash值为31的元素，模上数组长度16，结果是15，那么它就存储在arr[15]所在的链表中。查找时就是先计算hash(key)%len，找出元素所在的链表位于数组的位置，然后遍历链表即可。</p><h4 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h4><ol><li>不同的Hash可能有相同的index，相同的index不一定有相同的Hash。</li><li>对于<code>hash(key)%len</code>计算得到相同index的元素，采用<code>头插法</code>，即后来的插到链表的头部，也就是说数组中存储的那个头元素是最后插进来的。</li><li>HashMap允许key为null的元素存入，key为null的元素永远存储在链表头部，即数组中。</li><li>Entity[]的长度固定后，随着元素的增加，链表会越来越长，这时候HashMap中的一个因子就会起到作用，随着map的size越来越大，Entity[]的length会以一定的规则增加。</li></ol>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM结构和GC的工作机制</title>
      <link href="/2017/03/25/JVM%E7%BB%93%E6%9E%84%E5%92%8CGC%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/03/25/JVM%E7%BB%93%E6%9E%84%E5%92%8CGC%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote><p>参考：<a href="http://blog.csdn.net/moneyshi/article/details/53033577" target="_blank" rel="noopener">http://blog.csdn.net/moneyshi/article/details/53033577</a></p></blockquote><h2 id="JVM结构"><a href="#JVM结构" class="headerlink" title="JVM结构"></a>JVM结构</h2><p><img src="/uploads/20170309052107625.jpeg" alt="jvm"></p><a id="more"></a><p><img src="/uploads/20170309052117048.jpeg" alt="jvm2"></p><p>从图一可知，jvm主要包括四个部分：</p><ol><li><code>类加载器</code>（ClassLoader）<ul><li>在jvm启动时或类运行时将需要的class加载到jvm中。</li></ul></li><li><code>执行引擎</code><ul><li>负责执行class文件中的字节码指令。</li></ul></li><li><code>本地方法接口</code><ul><li>主要是调用C或者C++实现的本地方法及返回结果。</li></ul></li><li><code>内存区</code><ul><li>jvm在运行时操作系统所分配的内存区，主要分为5个区。</li><li><img src="/uploads/20170309052142757.jpeg" alt="mem"></li><li><code>方法区</code>（Methor Area）<ul><li>用于存储类结构信息的地方，包括常量池、静态变量、构造函数等。被所有java线程共享。</li></ul></li><li><code>java堆</code>（Heap）<ul><li>存储java对象或实例的地方。这块是GC的主要区域， 被所有java线程共享。</li></ul></li><li><code>java栈</code>（Stack）<ul><li>java栈总是和线程关联在一起，每当创建一个线程时，jvm就会为这个线程创建一个栈。栈中会包含很多栈帧，没运行一个方法就会创建一个栈帧，用于存储局部变量返回值等。每一个方法从调用到结束，就是一个栈帧从入栈到出栈的过程。java栈是线程私有的。</li></ul></li><li><code>程序计数器</code>（PC Register）<ul><li>用于保存当前线程的内存地址。由于jvm是多线程的，线程轮流切换，为了保证线程切换回来后还能恢复原先状态，就需要一个独立的计数器，记录之前中断的地方。程序计数器也是线程私有的。</li></ul></li><li><code>本地方法栈</code>（Native Method Stack）<ul><li>和java栈作用差不多，只不过是为native方法服务的。java线程私有的。     </li></ul></li></ul></li></ol><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>在了解GC之前，需要先了解一下jvm是怎么分配内存的，然后识别哪些垃圾需要回收，以及用什么方式去回收。</p><p>java内存分配和C/C++不同，C每次申请内存都是手动的进行系统调用，这需要一定的开销，而jvm是一次性分配一大块内存，然后每次new的时候都在这块空间上分配和释放。减少系统调用次数，节省了一定的开销，有点类似于线程池的概念。</p><p>有了这块空间之后，如何进行分配和回收就和GC有关了。</p><p>java的内存申请一般有两种：<code>静态内存和动态内存</code>。编译时就能确定大小的就是静态内容，比如int类型变量。动态内存是指在运行期间才能知道大小的，比如java对象。</p><p>由于java栈、程序计数器、本地方法栈都是线程私有的，线程生则生，线程灭则灭，这几个区域的内存回收是确定的。但是java堆和方法区则不一样，只有在运行期间才知道创建哪些对象，这部分的内存回收是动态的，一般GC主要是针对这一块。</p><p>总之，栈的内存管理是顺序的，而且定长，不存在内存回收问题，堆则是为java动态分配内存，不定长度，所以存在内存分配和回收的问题。</p><h2 id="垃圾检测、回收算法"><a href="#垃圾检测、回收算法" class="headerlink" title="垃圾检测、回收算法"></a>垃圾检测、回收算法</h2><p>GC一般要做两件事，一是检测出垃圾，二是回收垃圾。</p><h3 id="检测垃圾一般有下面这些方法："><a href="#检测垃圾一般有下面这些方法：" class="headerlink" title="检测垃圾一般有下面这些方法："></a>检测垃圾一般有下面这些方法：</h3><h4 id="引用计数器"><a href="#引用计数器" class="headerlink" title="引用计数器"></a>引用计数器</h4><p>给对象添加一个计数器，每当有人引用他，计数器就加1，引用失效就减1，计数为0时被回收。</p><p>不足：当A和B互相引用时，可能会导致无法回收。</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>以根集对象为起点进行搜索，如果对象不可达则回收，跟集一般包括java栈中的引用对象，还有方法区、常量池以及本地方法区中引用的对象。</p><p>总之，垃圾回收的时候，会检测所有堆中的对象，没用被引用的对象就会被回收。</p><h3 id="一般回收算法有如下几种"><a href="#一般回收算法有如下几种" class="headerlink" title="一般回收算法有如下几种"></a>一般回收算法有如下几种</h3><h4 id="标记-清除（make-sweep）"><a href="#标记-清除（make-sweep）" class="headerlink" title="标记-清除（make-sweep）"></a>标记-清除（make-sweep）</h4><p>算法如名，分为两个阶段：标记 清除。标记所有需要回收的对象，然后统一回收。这是最基础的算法，后续的算法都是基于这个算法扩展的。</p><p>不足：效率低，标记清除之后会产生大量碎片，如下图：</p><p><img src="/uploads/20170309052126121.png" alt="make_sweep"></p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>此算法是把内存空间划分为两个相等的区域，每次只使用其中一个区域，当垃圾回收时，遍历当前使用的区域，把正在使用汇总的对象复制到另外一个区域，此算法每次只需要处理正在使用中的对象，<br>因此复制成本较小，同时，复制过去时还能进行内存整理，不会出现碎片，缺点也很明显，就是需要两倍空间。</p><p><img src="/uploads/20170309052055174.png" alt="copy"></p><h3 id="标记-整理（make-compact）"><a href="#标记-整理（make-compact）" class="headerlink" title="标记-整理（make-compact）"></a>标记-整理（make-compact）</h3><p>此算法结合了标记清除和复制算法的优点，也是分为两个阶段，第一阶段从跟节点开始标记所有被引用的对象，第二阶段遍历整个堆，清除未标记的对象，并且把存活的对象“压缩”到一块，按顺序排放，此算法避免了碎片问题，同时也避免了两倍空间问题。</p><p><img src="/uploads/20170309052134020.png" alt="mark_compact"></p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>这是一个商用的垃圾收集算法，不同的对象有不同的生命周期，不同的生命周期采用不同的回收算法，分而治之，因地制宜。比较复杂，这里不多讨论。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH登录时指定密码</title>
      <link href="/2017/03/25/SSH%E7%99%BB%E5%BD%95%E6%97%B6%E6%8C%87%E5%AE%9A%E5%AF%86%E7%A0%81/"/>
      <url>/2017/03/25/SSH%E7%99%BB%E5%BD%95%E6%97%B6%E6%8C%87%E5%AE%9A%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="下载sshpass"><a href="#下载sshpass" class="headerlink" title="下载sshpass"></a>下载<code>sshpass</code></h2><p><a href="http://sourceforge.net/projects/sshpass/" target="_blank" rel="noopener">http://sourceforge.net/projects/sshpass/</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tar -zxvf sshpass-1.06.tar.gz -C /root/install/</span><br><span class="line">[root@localhost ~]# cd /root/install/sshpass-1.06</span><br><span class="line">[root@localhost sshpass-1.06]# ./configure </span><br><span class="line">[root@localhost sshpass-1.06]# make</span><br><span class="line">[root@localhost sshpass-1.06]# make install</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sshpass -p 123456 ssh root@121.40.66.176</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java手札-基础部分</title>
      <link href="/2017/03/25/java%E6%89%8B%E6%9C%AD-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2017/03/25/java%E6%89%8B%E6%9C%AD-%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<ol><li>一个java源文件中是否可以包含多个类（不含内部类）？可以，但只能有一个public，且必须和文件名一致。</li><li>goto？goto是保留字。</li><li>&amp;和&amp;&amp;？&amp;是按位与，&amp;&amp;是逻辑与，&amp;&amp;会短路。</li><li>跳出多重循环？可以用标志但不推荐，推荐使用变量来标识。<a id="more"></a></li><li>switch表达式可以有哪些类型？String呢？数字+枚举。jdk1.7之后可以有String，但底层没变，只是在编译时把String转hash</li><li>short s1=1;s1+=1;s1=s1+1;哪错？前对后错，类型转换错误，丢失精度，编译不过。</li><li>char能存储汉字？可以，char是Unicode编码，占2字节。</li><li>快速乘8？左移3位。</li><li>final修饰一个变量时，是引用不能变?还是对象不能变？引用不能变，对象内容可以变。</li><li>==和equals区别？equals不能用于比较8大基本数据类型, 如果比较的是基本类型的封装类型，会转化为==来比较他们的值，如果是String，会逐个比较char，如果是其他引用对象，会转化为==来比较他们的引用地址，但是你可以覆写equals来给两个对象是否一样来定指标。==如果比较的是基本数据类型或他们的封装类，是比较他们的值，如果比较的是引用对象，比较的是他们的引用地址。</li><li>static？类属性，类方法。</li><li>int和Integer？默认值不一样，vo层最后使用封装类，比如MBG逆向生成的model就是用的封装类型。<ul><li>原因一：在展现层，int显示是0，Integer显示空串。</li><li>原因二：在tk.mybatis中，updateSelectiveByPrimaryKey(T t)，会更新不为null的字段，如果使用Integer，就不会更新，如果使用int，可能会误更新为0。</li></ul></li><li>Math.round(-11.5)=-11，加0.5向下取整。</li><li>private、friendly、protected、public，当前类，同包，子孙类，所有类。</li><li>override和overload？overload重载，比如Math.abs()。override覆写，修饰符范围可小不可大，异常可少可子不可扩。</li><li>构造方法可被覆写？不可。覆写要求方法名一样，但子类和父类的构造方法的方法名显然不一样。</li><li>面向对象特征？封装、继承、多态、抽象。<ul><li>封装（高内聚，低耦合）：比如冰箱，按开关即可，内部封装，暴露接口即可。</li><li>继承（复用性，扩展性）：比如，BaseService中提供了基础的curd。</li><li>多态：编译期间不知道要掉哪个方法，运行期间才知道，比如：UserDao接口，有两个实现，UserMyBatisDao和UserHibernateDao这两个实现。</li><li>抽象：抓住主要矛盾，忽略次要矛盾。</li></ul></li><li>抽象类abstract和接口interface？抽象方法所在的类必须是抽象类，抽象方法不能有方法体，抽象类的子类必须实现抽象方法，抽象类中可以有普通的方法,抽象类中可以有static方法，但是抽象方法不能同时是static,抽象方法不能有synchronized，可以在子类中覆写后加synchronized关键字。接口中所有的方法都是public，所有的属性都是public static final,所有的方法不能有方法体，子类必须实现所有方法(抽象类实现接口后可以不去覆写，但继承此抽象类的子类还是需要去实现的), 抽象类中不能有static方法。</li><li>逗号分隔字符串，如果最后一个符号是逗号，数组长度是不对的。</li><li>String str=”a”+”b”+”c”+”d”;值创建了一个对象，javac编译时，对它进行了优化，+号两边的字符串直接合并。</li><li>一般异常必须捕获或抛出，运行时异常不必须，比如：空指针异常，数组越界异常，类型转换异常。</li><li>sleep不释放锁，wait会释放锁。</li><li>临界资源需要同步处理（原子化操作）。</li><li>ArrayList和Vector？都实现了List接口，List继承Collection，有序，允许重复，底层是数组。Vector线程安全，ArrayList不是线程安全，效率高。扩增时，Vector增2倍，ArrayList增1.5倍。</li><li>HashMap和HashTable？都实现了Map接口，都能存储名值对，HashMap允许null键值，干掉了contains()方法，改成了containsKey()和containsValue()。HashTable线程安全，并继承了Dictionary。</li><li>ArrayList和LinkedList？都是集合，前者读快写慢，后者读慢写快。前者是数组，后者是链表。</li><li>Collection和Collections？前者是集合的顶级接口，后者是集合的帮助类。</li></ol>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH登录控制,登录失败5次禁IP</title>
      <link href="/2017/03/25/SSH%E7%99%BB%E5%BD%95%E6%8E%A7%E5%88%B6-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A55%E6%AC%A1%E7%A6%81IP/"/>
      <url>/2017/03/25/SSH%E7%99%BB%E5%BD%95%E6%8E%A7%E5%88%B6-%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A55%E6%AC%A1%E7%A6%81IP/</url>
      <content type="html"><![CDATA[<p>今天在登录我服务器的时候，发现了下面这段话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kangyonggandeMacBook-Pro:~ kyg$ ./.login.sh </span><br><span class="line">Last failed login: Sun Mar  5 13:27:21 EST 2017 from 42.196.186.61 on ssh:notty</span><br><span class="line">There were 721 failed login attempts since the last successful login.</span><br><span class="line">Last login: Sat Mar  4 07:33:47 2017 from 192.168.2.222</span><br></pre></td></tr></table></figure><a id="more"></a><p>发现是有人尝试爆破我的服务器，我的服务器是CentOS7,于是我查看日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost log]# pwd</span><br><span class="line">/var/log</span><br><span class="line">[root@localhost log]# ll</span><br><span class="line">总用量 10044</span><br><span class="line">drwxr-xr-x. 2 root   root       176 2月  26 08:37 anaconda</span><br><span class="line">drwx------. 2 root   root        99 3月   5 07:30 audit</span><br><span class="line">-rw-r--r--. 1 root   root      9671 3月   1 08:05 boot.log</span><br><span class="line">-rw-------. 1 root   utmp    473856 3月   5 13:27 btmp</span><br><span class="line">-rw-------. 1 root   utmp    462720 2月  28 12:15 btmp-20170301</span><br><span class="line">drwxr-xr-x. 2 chrony chrony       6 12月  6 17:42 chrony</span><br><span class="line">-rw-------. 1 root   root     51771 3月   6 02:01 cron</span><br><span class="line">-rw-r--r--. 1 root   root     59619 3月   1 08:05 dmesg</span><br><span class="line">-rw-r--r--. 1 root   root     59102 2月  28 06:39 dmesg.old</span><br><span class="line">-rw-r--r--. 1 root   root      2873 2月  27 07:19 firewalld</span><br><span class="line">-rw-------. 1 root   root      1280 2月  26 08:42 grubby</span><br><span class="line">-rw-r--r--. 1 root   root    291708 3月   6 02:06 lastlog</span><br><span class="line">-rw-------. 1 root   root      3805 3月   5 03:00 maillog</span><br><span class="line">-rw-------. 1 root   root   3661588 3月   6 02:20 messages</span><br><span class="line">-rw-r--r--. 1 mysql  mysql    65242 3月   2 02:48 mysqld.log</span><br><span class="line">drwx------. 2 root   root         6 6月  10 2014 ppp</span><br><span class="line">drwxr-xr-x. 2 root   root         6 2月  26 08:37 rhsm</span><br><span class="line">-rw-------. 1 root   root   3081270 3月   6 02:20 secure</span><br><span class="line">-rw-------. 1 root   root         0 2月  26 08:35 spooler</span><br><span class="line">-rw-------. 1 root   root         0 2月  26 08:34 tallylog</span><br><span class="line">drwxr-xr-x. 2 root   root        23 12月  6 17:26 tuned</span><br><span class="line">-rw-------. 1 root   root     29494 3月   6 02:17 wpa_supplicant.log</span><br><span class="line">-rw-r--r--. 1 root   root     51059 2月  27 06:32 wpa_supplicant.log-20170227</span><br><span class="line">-rw-rw-r--. 1 root   utmp     44160 3月   6 02:06 wtmp</span><br><span class="line">-rw-------. 1 root   root      7438 2月  27 07:03 yum.log</span><br><span class="line"></span><br><span class="line">[root@localhost log]# grep &quot;Failed password for&quot; secure </span><br><span class="line">...太多就不贴出来了</span><br><span class="line">Mar  4 21:34:02 localhost sshd[24674]: Failed password for root from 42.196.186.61 port 56860 ssh2</span><br><span class="line">Mar  4 21:34:05 localhost sshd[24674]: Failed password for root from 42.196.186.61 port 56860 ssh2</span><br><span class="line">Mar  4 21:34:07 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2</span><br><span class="line">Mar  4 21:34:09 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2</span><br><span class="line">Mar  4 21:34:12 localhost sshd[24679]: Failed password for root from 42.196.186.61 port 56862 ssh2</span><br><span class="line">Mar  4 21:34:14 localhost sshd[24684]: Failed password for root from 42.196.186.61 port 56962 ssh2</span><br><span class="line">Mar  4 21:34:17 localhost sshd[24684]: Failed password for root from 42.196.186.61 port 56962 ssh2</span><br><span class="line">Mar  5 04:37:23 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 04:37:25 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 04:37:26 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 04:37:28 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 04:37:30 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 04:37:32 localhost sshd[26486]: Failed password for root from 42.196.186.61 port 57172 ssh2</span><br><span class="line">Mar  5 05:06:04 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 05:06:07 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 05:06:09 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 05:06:12 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 05:06:14 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 05:06:17 localhost sshd[26627]: Failed password for root from 42.196.186.61 port 60976 ssh2</span><br><span class="line">Mar  5 10:05:12 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 10:05:15 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 10:05:17 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 10:05:19 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 10:05:21 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 10:05:24 localhost sshd[27881]: Failed password for root from 123.207.23.34 port 38482 ssh2</span><br><span class="line">Mar  5 13:27:07 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br><span class="line">Mar  5 13:27:10 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br><span class="line">Mar  5 13:27:13 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br><span class="line">Mar  5 13:27:16 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br><span class="line">Mar  5 13:27:18 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br><span class="line">Mar  5 13:27:21 localhost sshd[28721]: Failed password for root from 42.196.186.61 port 43224 ssh2</span><br></pre></td></tr></table></figure><p>看到这么多的登录失败，我觉得我需要做些什么才行，比如：禁止用户名密码登录，只允许秘钥登录，但是有时候用别人的电脑没秘钥会不方便，所以，我决定<code>登录失败超过5次禁IP</code></p><p>下面是脚本<code>.ip-deny.sh</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">cat /var/log/secure | awk &apos;/Failed/&#123;print $(NF-3)&#125;&apos; | sort | uniq -c | awk &apos;&#123;print $2&quot;=&quot;$1;&#125;&apos; &gt; /root/ip-black.txt</span><br><span class="line"></span><br><span class="line">MAX=5</span><br><span class="line"></span><br><span class="line">for i in `cat  /root/ip-black.txt`</span><br><span class="line">do</span><br><span class="line">ip=`echo $i |awk -F= &apos;&#123;print $1&#125;&apos;`</span><br><span class="line">cnt=`echo $i |awk -F= &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">if [ $cnt -gt $MAX ] </span><br><span class="line">then</span><br><span class="line">grep $ip /etc/hosts.deny &gt; /dev/null</span><br><span class="line">if [ $? -gt 0 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;sshd:$ip:deny&quot; &gt;&gt; /etc/hosts.deny</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">cat /etc/hosts.deny</span><br></pre></td></tr></table></figure><p>最后在定时任务中，每隔1分钟执行一次脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# crontab -e</span><br></pre></td></tr></table></figure><p>查看所有定时任务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line"># m h  dom mon dow   command</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 每天凌晨三点备份数据</span><br><span class="line">0 3 * * * sh /root/.back.sh</span><br><span class="line"></span><br><span class="line"># 每隔1分钟执行一次，登录失败超过5次禁IP</span><br><span class="line">*/1 * * * *  sh /root/.ip-deny.sh</span><br></pre></td></tr></table></figure><p>经试验，登录失败五次，然后再经过1分钟之后（之内），试验生效！</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库缓存架构的设计</title>
      <link href="/2017/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2017/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>缓存是一种提高<code>读性能</code>的常见技术。对于读多写少的应用，就可以使用缓存进行优化。</p><p>例如，网关中各个银行通道配置bank_channel_conf(bnk_no, bnk_nm)，业务需求是：</p><ul><li>查询通道信息,select bnk_no, bnk_nm from bank_channel_conf where bnk_no = ?,占请求总数的99%</li><li>修改通道信息,update bank_channel_conf set bnk_nm = ? where bnk_no = ?,占请求总数的1%</li></ul><a id="more"></a><p>由于大部分的请求是查询，我们在缓存中建立bnk_no到bnk_nm的键值对，或者bnk_no到BankChannelConf实体的键值对，可以很大程度的减少数据库的压力。</p><h2 id="读操作流程"><a href="#读操作流程" class="headerlink" title="读操作流程"></a>读操作流程</h2><p>现在有两个地方存放银行通道的数据，一个是<code>db</code>,一个是<code>cache</code>。每当需要读一个数据时，流程是这样的:</p><ol><li>读取缓存是否有相关的数据。bnkNo-&gt;bnkNm</li><li>如果缓存中有数据，则返回缓存中的数据，这就是所谓的<code>数据命中[hit]</code></li><li>如果缓存中没有数据，就会去查询数据库，这就是所谓的<code>数据未命中[miss]</code>，最后把数据放入缓存，再返回。</li></ol><blockquote><p>缓存命中率[HitRate] = 命中[Hit] / (命中[hit] + 未命中[miss]) * 100% </p></blockquote><p>像上面这个例子，目测缓存命中率会在95%以上！</p><h2 id="写操作流程"><a href="#写操作流程" class="headerlink" title="写操作流程"></a>写操作流程</h2><p>上面读操作流程很简单，没有什么例外，但是写操作就很麻烦了，比如下面的问题：</p><ul><li>是更新cache中的数据？还是淘汰cache中的数据？</li><li>是先操作db中的数据？还是先操作cache中的数据？</li></ul><h3 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h3><p>什么是更新缓存呢？就是写操作时，不但会把数据写入db中，还会把数据写入cache中（key相同就会替换，相当于更新了）。</p><p>优点：紧随写操作之后的那一次查询，不会miss，命中率稍有提高（也不算优点吧，提高的命中率忽略不计）。</p><h3 id="淘汰缓存"><a href="#淘汰缓存" class="headerlink" title="淘汰缓存"></a>淘汰缓存</h3><p>什么是淘汰缓存？就是写操作时，只写入db，不会写入cache，不但不写入，还要删除。</p><p>优点：简单（也不算优点吧，更新也不难）<br>缺点：命中率稍有下降（也是忽略不计）。</p><p>如果仅仅从上面的例子中看，貌似更新缓存和淘汰缓存旗鼓相当，甚至更倾向于更新缓存。</p><p>但是，如果缓存中的value需要经过一系列的查询才能得到，那么，为了增加一次命中，可能就不值得了（毕竟代码中还要额外的写逻辑，可能还是在中间件中，我们都知道的中间件是不能带有业务逻辑的），这么来看的话，更新缓存的代价可能就更大了一些。</p><p>个人观点：淘汰缓存操作简单，缺点仅仅只是多一次miss，处理方式全世界统一，所以个人建议使用。</p><h3 id="先操作db还是先操作cache"><a href="#先操作db还是先操作cache" class="headerlink" title="先操作db还是先操作cache"></a>先操作db还是先操作cache</h3><p>现在假设使用淘汰缓存作为对缓存的通用处理，现在又有下面两个问题：</p><ol><li>先写数据库，再淘汰缓存</li><li>先淘汰缓存，再写数据库</li></ol><p>正常不出意外的情况下，两种方案都可以，没有谁好谁坏，但是在一些极端的情况下就不好说了。</p><p>比如方案1，假如写数据库成功了，但是淘汰数据时失败了，这时候又没有事务能保证两步操作的原子性，那么就可能造成缓存中有脏数据，数据的不一致就这么产生了。</p><p>但是反过来，采用方案2，先淘汰缓存数据成功了，再写数据库时失败了，顶多就是缓存中的数据丢了，增加一次miss，不会产生脏数据，对业务的影响较小。</p><p>结论：db和cache的操作顺序是，先淘汰cache，再写db。</p><h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h2><p>上述缓存框架有一个缺点，业务方不但需要关注cache和db，还需要对cache进行管理，如果多人团队开发，完全不知道在什么时机淘汰什么cache，因此，这里需要一个数据服务层，向上游提供一个优雅的接口，屏蔽缓存管理的细节，这样的话上游业务方就不需要关注这些根本没法关注的细节了。</p><h2 id="遗留难点"><a href="#遗留难点" class="headerlink" title="遗留难点"></a>遗留难点</h2><p>当采用淘汰缓存方案时，在高并发的情况下，如果线程1已经淘汰了缓存，准备写数据时，恰好在这时，线程2过来读数据，发现缓存中没数据，然后就去请求数据库，再把数据库中的数据放入缓存，最后线程1才磨磨唧唧的把数据写入库中，结果就造成了cache与db不一致的问题。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库设计基本概念和思路</title>
      <link href="/2017/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%80%9D%E8%B7%AF/"/>
      <url>/2017/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%80%9D%E8%B7%AF/</url>
      <content type="html"><![CDATA[<h1 id="数据库设计基本概念和思路"><a href="#数据库设计基本概念和思路" class="headerlink" title="数据库设计基本概念和思路"></a>数据库设计基本概念和思路</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="单库"><a href="#单库" class="headerlink" title="单库"></a>单库</h3><p><img src="/uploads/20170301082926454.png" alt="db-0"></p><a id="more"></a><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><img src="/uploads/20170301082133451.png" alt="db-1"></p><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p><img src="/uploads/20170301082937059.png" alt="db-2"></p><h3 id="分组-分片"><a href="#分组-分片" class="headerlink" title="分组+分片"></a>分组+分片</h3><p><img src="/uploads/20170301082946454.png" alt="db-3"></p><h3 id="各自优缺点"><a href="#各自优缺点" class="headerlink" title="各自优缺点"></a>各自优缺点</h3><h4 id="单库-1"><a href="#单库-1" class="headerlink" title="单库"></a>单库</h4><ul><li>主要优点：简单。</li><li>主要缺点：可用性不高、并发不大、数据量不能太大。</li></ul><h4 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h4><ul><li>主要优点：可用性强。</li><li>主要缺点：一致性差、从库越多，同步越慢，越容易不一致。</li><li>必要条件：中间件。用来维护主从一致性（门槛高，一般只有大公司才有）。</li></ul><h4 id="分片-1"><a href="#分片-1" class="headerlink" title="分片"></a>分片</h4><ul><li>主要优点：能存储大量数据。</li><li>主要缺点：主键生成麻烦、扩展性差。</li><li>必要条件：数据路由。</li></ul><p>数据路由常用的三种方法：</p><ol><li>范围：range<ul><li>优点：简单、易扩展</li><li>缺点：各库压力不均</li></ul></li><li>哈希：hash<ul><li>优点：简单、数据均衡、负载均衡</li><li>缺点：扩展麻烦（2库扩3库需要迁移数据，2库扩4库稍简单）</li></ul></li><li>路由服务：route-config-server<ul><li>优点：灵活、业务与路由解耦和</li><li>缺点：每次访问数据库前多一次查询</li></ul></li></ol><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><ul><li>可用性</li><li>读性能</li><li>一致性</li><li>扩展性</li></ul><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p><code>提高可用性的思路是冗余</code>！ 如果要提高数据的可用性，可以采用<code>分组</code>的数据库架构。</p><h3 id="读性能"><a href="#读性能" class="headerlink" title="读性能"></a>读性能</h3><ol><li>读写分离<ul><li>采用<code>分组</code>的数据库架构</li><li>写操作使用主库，读操作使用从库，减小等锁的时间</li></ul></li><li>使用缓存</li><li>不同的库建立不同的索引<ul><li>写库不建索引</li><li>线上读库建线上常用的索引</li><li>线下读库建线下常用的索引</li></ul></li></ol><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><ol><li>主从不一致<ul><li>解决方案：数据库中间件（门槛高）</li></ul></li><li>db和cache不一致<ul><li>缓存管理：在写库时，要先更新或淘汰cache</li><li>超时时间：建议给每个cache都设置超时时间</li></ul></li></ol><h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h3><p>采用哈希路由时，想要平滑的扩展数据库，就只能翻倍，2库变4库，4库变8库，否则需要数据迁移。下面是平滑的把2个库扩展成4个库的步骤：</p><p>原库的数据：</p><ul><li>库1的id：Mod2==0</li><li>库2的id：Mod2==1</li></ul><p>增加2个新库：库3、库4</p><p>把库1数据同步到库3，库2同步到库4</p><p>修改数据路由的hash算法，以前Mod2、现在Mod4</p><p>新库的数据： </p><ul><li>库1的id：Mod2==0 + Mod4==0</li><li>库2的id：Mod2==1 + Mod4==1</li><li>库3的id：Mod2==0 + Mod4==2</li><li>库4的id：Mod2==1 + Mod4==3</li></ul><p>需去重的数据：</p><ul><li>干掉库1中的：Mod4==2</li><li>干掉库2中的：Mod4==3</li><li>干掉库3中的：Mod4==0</li><li>干掉库4中的：Mod4==1</li></ul><p>最终的数据：</p><ul><li>库1的id：Mod4==0</li><li>库2的id：Mod4==1</li><li>库3的id：Mod4==2</li><li>库4的id：Mod4==3</li></ul>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高并发架构的优化方案</title>
      <link href="/2017/03/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2017/03/25/%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>应用情景：12306抢票，春运期间，一票难求！票的数量是有限的，但也罩不住中国出门打工的人多啊，如果放任所有请求去读库，哪个数据库能扛得住？</p><h2 id="优化草案"><a href="#优化草案" class="headerlink" title="优化草案"></a>优化草案</h2><h3 id="将请求尽量拦截在上游"><a href="#将请求尽量拦截在上游" class="headerlink" title="将请求尽量拦截在上游"></a>将请求尽量拦截在上游</h3><p>如果将所有的请求都落到数据层，数据读写时锁冲突严重，并发响应就会很慢，用户体验就会很差。所以可以让系统中的每一层都做些事情，不要只做一个<code>过渡者</code>，尽量拦截下一些无效的请求，给数据库减压。</p><a id="more"></a><h3 id="利用缓存"><a href="#利用缓存" class="headerlink" title="利用缓存"></a>利用缓存</h3><p>12306抢票是一个典型的<code>读多写少</code>的应用场景，比如一个班次的票有2000张，有200w人抢票，刷票时就是读，抢到票就要写，读写比是1000:1, 是非常适合用缓存的，其实大多数企业应用都是读多写少，都可以用缓存。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>下面是一个常见的站点架构图，高并发的优化就从这张图说起。</p><p><img src="/uploads/20170227213203585.png" alt="frame.png"></p><ul><li>浏览器: 与用户交互，会执行js</li><li>站点层: 会访问服务层，返给浏览器界面</li><li>服务层: 复杂的业务</li><li>数据层: 封装访问数据的复杂，访问数据库</li></ul><h2 id="各层优化"><a href="#各层优化" class="headerlink" title="各层优化"></a>各层优化</h2><h3 id="客户端优化（浏览器、App）"><a href="#客户端优化（浏览器、App）" class="headerlink" title="客户端优化（浏览器、App）"></a>客户端优化（浏览器、App）</h3><ul><li>可以做防重复提交，按钮点击后置灰</li><li>可以用js限制x秒内只能提交一次请求</li></ul><p>这样可以挡住普通用户，但是挡不住一些黄牛的for循环，好的是99%的都是普通用户，最起码能拦截下80%的无效请求。</p><h3 id="站点层优化"><a href="#站点层优化" class="headerlink" title="站点层优化"></a>站点层优化</h3><p>客户端防重复提交也只能拦住普通用户，在黄牛盛行的今天，我们是很有必要连黄牛的请求也一并拦截！那么怎么样来拦截黄牛的for循环呢？其实也是类似客户端的防重复提交，对于每次请求，我们都能拿到用户ID，结合业务我们可以对请求进行计数，判断x秒内只能透过一次请求，这个计数可以放在session中，这样就能裆下黄牛99%的for循环请求。</p><p>但是有些黄牛手里有N(=10w)个肉鸡，N个账户，同时请求。站点层的拦截就挡不住了！</p><h3 id="服务层优化"><a href="#服务层优化" class="headerlink" title="服务层优化"></a>服务层优化</h3><p>不管怎么样，搞死不让请求落到数据库，那么我怎么拦截肉鸡的高并发请求呢？利用队列！<br>比如，有2000张票，有20w用户想要下单购买，请求已经到了服务层，这时候可以把请求加入队列，如果队列长度大于2000（或者大于余票）就把其他请求拦截下来。</p><h3 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h3><p>客户端拦截了80%，站点层拦截了99%，服务层又有队列控制，数据库基本无压。</p><h3 id="业务优化"><a href="#业务优化" class="headerlink" title="业务优化"></a>业务优化</h3><p><code>一切脱离业务的架构都是耍流氓</code>！比如，抢票时间可以调整一下，<code>分时分次抢票</code>，8点卖一批次，9点卖一批次,…。将流量均摊。其次，粒度的优化，我们有时候只关心有票和无票，二不关心具体还剩多少票，所以只需要做一个粗粒度的缓存即可。</p><h3 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h3><p>如果并发量实在太大，可以对站点层的机器进行扩充，通过增加机器来分担压力。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高并发架构优化的基本思路：</p><ul><li>尽量将请求拦截在上游</li><li>读多写少多用缓存</li><li>结合业务来优化</li></ul>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-06推送push和拉取pull镜像</title>
      <link href="/2017/03/25/Docker-06%E6%8E%A8%E9%80%81push%E5%92%8C%E6%8B%89%E5%8F%96pull%E9%95%9C%E5%83%8F/"/>
      <url>/2017/03/25/Docker-06%E6%8E%A8%E9%80%81push%E5%92%8C%E6%8B%89%E5%8F%96pull%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="https://docs.docker.com/engine/getstarted/step_six/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/step_six/</a></p></blockquote><p>推送本地镜像到Docker Hub上你的镜像库中，然后再镜像从镜像库中拉取到本地，并运行它。</p><h2 id="推送镜像到镜像库"><a href="#推送镜像到镜像库" class="headerlink" title="推送镜像到镜像库"></a>推送镜像到镜像库</h2><h3 id="查看本地所有镜像"><a href="#查看本地所有镜像" class="headerlink" title="查看本地所有镜像"></a>查看本地所有镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker images </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-whale        latest              efb18db73358        About an hour ago   275 MB</span><br><span class="line">hello-world         latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay     latest              6b362a9f73eb        21 months ago       247 MB</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="找到镜像ID"><a href="#找到镜像ID" class="headerlink" title="找到镜像ID"></a>找到镜像ID</h3><p>以<code>docker-whale</code>镜像为例，它的镜像ID是<code>efb18db73358</code></p><blockquote><p>现在, docker-whale镜像还没有命名空间， 你需要关联一个命名空间， 命名空间就是你的Docker Hub账户名（我的是kangyonggan, 然后给镜像名添加命名空间，比如: kangyonggan/docker-whale</p></blockquote><h3 id="用docker-tag命令给镜像添加标签（命名空间）"><a href="#用docker-tag命令给镜像添加标签（命名空间）" class="headerlink" title="用docker tag命令给镜像添加标签（命名空间）"></a>用<code>docker tag</code>命令给镜像添加标签（命名空间）</h3><p><img src="/uploads/20170223153853566.png" alt="tagger"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker tag efb18db73358 kangyonggan/docker-whale:latest</span><br></pre></td></tr></table></figure><h4 id="4-再次运行docker-images会发现镜像已经有了标签"><a href="#4-再次运行docker-images会发现镜像已经有了标签" class="headerlink" title="4. 再次运行docker images会发现镜像已经有了标签"></a>4. 再次运行<code>docker images</code>会发现镜像已经有了标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker images </span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-whale               latest              efb18db73358        About an hour ago   275 MB</span><br><span class="line">kangyonggan/docker-whale   latest              efb18db73358        About an hour ago   275 MB</span><br><span class="line">hello-world                latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay            latest              6b362a9f73eb        21 months ago       247 MB</span><br></pre></td></tr></table></figure><p>还会发现，相同的镜像ID存在于两个不同的镜像库。</p><h3 id="登录Docker-Hub"><a href="#登录Docker-Hub" class="headerlink" title="登录Docker Hub"></a>登录Docker Hub</h3><p>在最终把镜像推送到Docker Hub上之前，你需要登录Docker Hub。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker login </span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: kangyonggan</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h3 id="把镜像推送到自己的Docker-Hub上"><a href="#把镜像推送到自己的Docker-Hub上" class="headerlink" title="把镜像推送到自己的Docker Hub上"></a>把镜像推送到自己的Docker Hub上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker push kangyonggan/docker-whale</span><br><span class="line">The push refers to a repository [docker.io/kangyonggan/docker-whale]</span><br><span class="line">4d8b662d1a5a: Pushing [========&gt;                                          ] 5.001 MB/28.13 MB</span><br><span class="line">5f70bf18a086: Mounted from docker/whalesay </span><br><span class="line">d061ee1340ec: Mounted from docker/whalesay </span><br><span class="line">d511ed9e12e1: Mounted from docker/whalesay </span><br><span class="line">091abc5148e4: Mounted from docker/whalesay </span><br><span class="line">b26122d57afa: Mounted from docker/whalesay </span><br><span class="line">37ee47034d9b: Mounted from docker/whalesay </span><br><span class="line">528c8710fd95: Mounted from docker/whalesay </span><br><span class="line">1154ba695078: Mounted from docker/whalesay</span><br></pre></td></tr></table></figure><p>网速有点慢(目测要翻墙才能快)，才推送了5/28M。</p><h3 id="登录Docker-Hub查看新推送的镜像"><a href="#登录Docker-Hub查看新推送的镜像" class="headerlink" title="登录Docker Hub查看新推送的镜像"></a>登录Docker Hub查看新推送的镜像</h3><p><img src="/uploads/20170223154255805.png" alt="resp_list.png"></p><p>由于网速太慢（怀疑是官网太慢），截图的时候还没推送完成。</p><h2 id="从镜像库拉取镜像"><a href="#从镜像库拉取镜像" class="headerlink" title="从镜像库拉取镜像"></a>从镜像库拉取镜像</h2><p><code>docker pull</code>是用来拉取镜像的，如果本地已经有最新版的镜像，<code>docker pull</code>命令将什么也不做，为了验证是真正的从镜像库中拉取下来的，你可以先删除本地镜像<code>docker image remove</code>。</p><h3 id="用docker-image-remove删除本地镜像"><a href="#用docker-image-remove删除本地镜像" class="headerlink" title="用docker image remove删除本地镜像"></a>用<code>docker image remove</code>删除本地镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker images </span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-whale2              latest              efb18db73358        2 hours ago         275 MB</span><br><span class="line">docker-whale               latest              efb18db73358        2 hours ago         275 MB</span><br><span class="line">kangyonggan/docker-whale   latest              efb18db73358        2 hours ago         275 MB</span><br><span class="line">hello-world                latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay            latest              6b362a9f73eb        21 months ago       247 MB</span><br><span class="line"></span><br><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker image remove efb18db73358</span><br><span class="line">Error response from daemon: conflict: unable to delete efb18db73358 (must be forced) - image is referenced in multiple repositories</span><br></pre></td></tr></table></figure><p>通过镜像ID删除一个本地镜像，可能会报错，如果此时你又两个ID一样的镜像，另外也可以通过镜像标签删除镜像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker image remove docker-whale2</span><br><span class="line">Untagged: docker-whale2:latest</span><br><span class="line"></span><br><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker images </span><br><span class="line">REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-whale               latest              efb18db73358        2 hours ago         275 MB</span><br><span class="line">kangyonggan/docker-whale   latest              efb18db73358        2 hours ago         275 MB</span><br><span class="line">hello-world                latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay            latest              6b362a9f73eb        21 months ago       247 MB</span><br></pre></td></tr></table></figure><h3 id="用docker-run命令从Docker-Hub拉取镜像，当你本地没这个镜像的时候。"><a href="#用docker-run命令从Docker-Hub拉取镜像，当你本地没这个镜像的时候。" class="headerlink" title="用docker run命令从Docker Hub拉取镜像，当你本地没这个镜像的时候。"></a>用<code>docker run</code>命令从Docker Hub拉取镜像，当你本地没这个镜像的时候。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker run kangyonggan/docker-whale</span><br></pre></td></tr></table></figure><hr><p>更多用法请移步:<a href="https://docs.docker.com/engine/getstarted/last_page/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/last_page/</a></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-05创建一个DockerHub账号和镜像库repository</title>
      <link href="/2017/03/25/Docker-05%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADockerHub%E8%B4%A6%E5%8F%B7%E5%92%8C%E9%95%9C%E5%83%8F%E5%BA%93repository/"/>
      <url>/2017/03/25/Docker-05%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADockerHub%E8%B4%A6%E5%8F%B7%E5%92%8C%E9%95%9C%E5%83%8F%E5%BA%93repository/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="https://docs.docker.com/engine/getstarted/step_five/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/step_five/</a></p></blockquote><p>如果你想把你的镜像分享给世界各地的其他人使用，那么你需要在Docker Hub注册一个账号。</p><a id="more"></a><h2 id="注册一个账号"><a href="#注册一个账号" class="headerlink" title="注册一个账号"></a>注册一个账号</h2><h3 id="在浏览器中打开Docker-Hub的注册界面"><a href="#在浏览器中打开Docker-Hub的注册界面" class="headerlink" title="在浏览器中打开Docker Hub的注册界面"></a>在浏览器中打开Docker Hub的<a href="https://hub.docker.com/register/" target="_blank" rel="noopener">注册界面</a></h3><p><img src="/uploads/20170223142740524.png" alt="hub_signup"></p><h3 id="输入用户名、邮箱和密码即可注册"><a href="#输入用户名、邮箱和密码即可注册" class="headerlink" title="输入用户名、邮箱和密码即可注册"></a>输入用户名、邮箱和密码即可注册</h3><h2 id="校验邮箱并创建镜像"><a href="#校验邮箱并创建镜像" class="headerlink" title="校验邮箱并创建镜像"></a>校验邮箱并创建镜像</h2><p><img src="/uploads/20170223142740523.png" alt="email_verify.png"><br><img src="/uploads/20170223142740524.png" alt="new_resp.png"></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-04构建一个自己的镜像</title>
      <link href="/2017/03/25/Docker-04%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>/2017/03/25/Docker-04%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="https://docs.docker.com/engine/getstarted/step_four/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/step_four/</a></p></blockquote><h2 id="编写一个Dockerfile"><a href="#编写一个Dockerfile" class="headerlink" title="编写一个Dockerfile"></a>编写一个Dockerfile</h2><p>你可以使用你喜欢的编辑器写一个简单的<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile</a>, Dockerfile就是用来描述构建镜像的文件、环境和命令的清单，Dockerfile越小越好。</p><h3 id="创建一个新的目录"><a href="#创建一个新的目录" class="headerlink" title="创建一个新的目录"></a>创建一个新的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code# mkdir mydockerbuild</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="进入这个新的目录"><a href="#进入这个新的目录" class="headerlink" title="进入这个新的目录"></a>进入这个新的目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code# cd mydockerbuild</span><br><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# pwd</span><br><span class="line">/root/code/mydockerbuild</span><br></pre></td></tr></table></figure><h3 id="在当前目录创建文件Dockerfile"><a href="#在当前目录创建文件Dockerfile" class="headerlink" title="在当前目录创建文件Dockerfile"></a>在当前目录创建文件<code>Dockerfile</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# vi Dockerfile</span><br></pre></td></tr></table></figure><h3 id="把FROM代码段写入文件"><a href="#把FROM代码段写入文件" class="headerlink" title="把FROM代码段写入文件"></a>把<code>FROM</code>代码段写入文件</h3><p>查看写入后的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# cat Dockerfile </span><br><span class="line">FROM docker/whalesay:latest</span><br></pre></td></tr></table></figure><p><code>FROM</code>关键字告诉Docker我将以哪个镜像为基础。Whalesay是完美的，它已经有了cowsay程序，所以我们从它开始。</p><h3 id="把RUN代码段写入镜像"><a href="#把RUN代码段写入镜像" class="headerlink" title="把RUN代码段写入镜像"></a>把<code>RUN</code>代码段写入镜像</h3><p>查看写入后的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# cat Dockerfile </span><br><span class="line">FROM docker/whalesay:latest</span><br><span class="line">RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</span><br></pre></td></tr></table></figure><p><code>RUN</code>关键字会安装镜像所需要的程序。whalesay镜像是基于Ubuntu的，所以它使用<code>apt-get</code>去安装所需要的包，这两个命令是请求此镜像可用的包，并且把fortunes程序安装到镜像，fortunes程序会打印出屋面所说的内容。</p><h3 id="把CMD代码段写入镜像"><a href="#把CMD代码段写入镜像" class="headerlink" title="把CMD代码段写入镜像"></a>把<code>CMD</code>代码段写入镜像</h3><p>查看写入后的文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# cat Dockerfile </span><br><span class="line">FROM docker/whalesay:latest</span><br><span class="line">RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</span><br><span class="line">CMD /usr/games/fortune -a | cowsay</span><br></pre></td></tr></table></figure><p><code>CMD</code>关键字告诉镜像当环境设置完成后运行最后的命令，这个命令是<code>fortune -a</code>，并且输出到<code>cowsay</code>命令。</p><h2 id="从Dockerfile构建镜像"><a href="#从Dockerfile构建镜像" class="headerlink" title="从Dockerfile构建镜像"></a>从Dockerfile构建镜像</h2><p>编译镜像使用的命令是<code>docker build</code>，参数<code>-t</code>是给镜像一个标签, 不要忽略了<code>.</code>，它会告诉<code>docker build</code>命令去当前目录下查找<code>Dockerfile</code>文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker build -t docker-whale .</span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1/3 : FROM docker/whalesay:latest</span><br><span class="line"> ---&gt; 6b362a9f73eb</span><br><span class="line">Step 2/3 : RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</span><br><span class="line"> ---&gt; Running in e7673f725ff2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Successfully built efb18db73358</span><br></pre></td></tr></table></figure><p>第一次运行时有点慢，大概一分钟左右，此间它会去下载所需要的包，会输出很多看不懂的信息。</p><h2 id="学习构建的过程"><a href="#学习构建的过程" class="headerlink" title="学习构建的过程"></a>学习构建的过程</h2><p>构建镜像的命令<code>docker build -t docker-whale .</code>，会在当前目录下读取<code>Dockerfile</code>文件，并在本地机器上一步一步的按照指令构建一个叫作<code>docker-whale</code>的镜像，构建需要一些时间，也会输出很多信息，下面来解析输出信息的意思。</p><h3 id="Docker检测以确保所有需要构建的都准备好了"><a href="#Docker检测以确保所有需要构建的都准备好了" class="headerlink" title="Docker检测以确保所有需要构建的都准备好了"></a>Docker检测以确保所有需要构建的都准备好了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon 2.048 kB</span><br></pre></td></tr></table></figure><h3 id="检测依赖的基础镜像"><a href="#检测依赖的基础镜像" class="headerlink" title="检测依赖的基础镜像"></a>检测依赖的基础镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Step 1/3 : FROM docker/whalesay:latest</span><br><span class="line"> ---&gt; 6b362a9f73eb</span><br></pre></td></tr></table></figure><p>上面的输出信息对应的代码块是<code>FROM</code>, 如果本地没有whalesay镜像，则去Docker Hub下载，如果有，那就使用本地的whalesay镜像。</p><h3 id="Docker启动一个临时的容器去运行whalesay"><a href="#Docker启动一个临时的容器去运行whalesay" class="headerlink" title="Docker启动一个临时的容器去运行whalesay"></a>Docker启动一个临时的容器去运行<code>whalesay</code></h3><p>在这个临时的容器中，Docker会运行Dockerfile中的下一行命令，即<code>RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</code>, 这个命令是去安装<code>fortunes</code>命令，此过程中输出了大量的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">Step 2/3 : RUN apt-get -y update &amp;&amp; apt-get install -y fortunes</span><br><span class="line"> ---&gt; Running in e7673f725ff2</span><br><span class="line">Ign http://archive.ubuntu.com trusty InRelease</span><br><span class="line">Get:1 http://archive.ubuntu.com trusty-updates InRelease [65.9 kB]</span><br><span class="line">Get:2 http://archive.ubuntu.com trusty-security InRelease [65.9 kB]</span><br><span class="line">Hit http://archive.ubuntu.com trusty Release.gpg</span><br><span class="line">Get:3 http://archive.ubuntu.com trusty-updates/main Sources [485 kB]</span><br><span class="line">Get:4 http://archive.ubuntu.com trusty-updates/restricted Sources [5957 B]</span><br><span class="line">Get:5 http://archive.ubuntu.com trusty-updates/universe Sources [220 kB]</span><br><span class="line">Get:6 http://archive.ubuntu.com trusty-updates/main amd64 Packages [1197 kB]</span><br><span class="line">Get:7 http://archive.ubuntu.com trusty-updates/restricted amd64 Packages [20.4 kB]</span><br><span class="line">Get:8 http://archive.ubuntu.com trusty-updates/universe amd64 Packages [516 kB]</span><br><span class="line">Get:9 http://archive.ubuntu.com trusty-security/main Sources [160 kB]</span><br><span class="line">Get:10 http://archive.ubuntu.com trusty-security/restricted Sources [4667 B]</span><br><span class="line">Get:11 http://archive.ubuntu.com trusty-security/universe Sources [59.4 kB]</span><br><span class="line">Get:12 http://archive.ubuntu.com trusty-security/main amd64 Packages [730 kB]</span><br><span class="line">Get:13 http://archive.ubuntu.com trusty-security/restricted amd64 Packages [17.0 kB]</span><br><span class="line">Get:14 http://archive.ubuntu.com trusty-security/universe amd64 Packages [199 kB]</span><br><span class="line">Hit http://archive.ubuntu.com trusty Release</span><br><span class="line">Hit http://archive.ubuntu.com trusty/main Sources</span><br><span class="line">Hit http://archive.ubuntu.com trusty/restricted Sources</span><br><span class="line">Hit http://archive.ubuntu.com trusty/universe Sources</span><br><span class="line">Hit http://archive.ubuntu.com trusty/main amd64 Packages</span><br><span class="line">Hit http://archive.ubuntu.com trusty/restricted amd64 Packages</span><br><span class="line">Hit http://archive.ubuntu.com trusty/universe amd64 Packages</span><br><span class="line">Fetched 3745 kB in 43s (87.0 kB/s)</span><br><span class="line">Reading package lists...</span><br><span class="line">Reading package lists...</span><br><span class="line">Building dependency tree...</span><br><span class="line">Reading state information...</span><br><span class="line">The following extra packages will be installed:</span><br><span class="line">  fortune-mod fortunes-min librecode0</span><br><span class="line">Suggested packages:</span><br><span class="line">  x11-utils bsdmainutils</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  fortune-mod fortunes fortunes-min librecode0</span><br><span class="line">0 upgraded, 4 newly installed, 0 to remove and 92 not upgraded.</span><br><span class="line">Need to get 1961 kB of archives.</span><br><span class="line">After this operation, 4817 kB of additional disk space will be used.</span><br><span class="line">Get:1 http://archive.ubuntu.com/ubuntu/ trusty/main librecode0 amd64 3.6-21 [771 kB]</span><br><span class="line">Get:2 http://archive.ubuntu.com/ubuntu/ trusty/universe fortune-mod amd64 1:1.99.1-7 [39.5 kB]</span><br><span class="line">Get:3 http://archive.ubuntu.com/ubuntu/ trusty/universe fortunes-min all 1:1.99.1-7 [61.8 kB]</span><br><span class="line">Get:4 http://archive.ubuntu.com/ubuntu/ trusty/universe fortunes all 1:1.99.1-7 [1089 kB]</span><br><span class="line">debconf: unable to initialize frontend: Dialog</span><br><span class="line">debconf: (TERM is not set, so the dialog frontend is not usable.)</span><br><span class="line">debconf: falling back to frontend: Readline</span><br><span class="line">debconf: unable to initialize frontend: Readline</span><br><span class="line">debconf: (This frontend requires a controlling tty.)</span><br><span class="line">debconf: falling back to frontend: Teletype</span><br><span class="line">dpkg-preconfigure: unable to re-open stdin: </span><br><span class="line">Fetched 1961 kB in 4s (466 kB/s)</span><br><span class="line">Selecting previously unselected package librecode0:amd64.</span><br><span class="line">(Reading database ... 13116 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../librecode0_3.6-21_amd64.deb ...</span><br><span class="line">Unpacking librecode0:amd64 (3.6-21) ...</span><br><span class="line">Selecting previously unselected package fortune-mod.</span><br><span class="line">Preparing to unpack .../fortune-mod_1%3a1.99.1-7_amd64.deb ...</span><br><span class="line">Unpacking fortune-mod (1:1.99.1-7) ...</span><br><span class="line">Selecting previously unselected package fortunes-min.</span><br><span class="line">Preparing to unpack .../fortunes-min_1%3a1.99.1-7_all.deb ...</span><br><span class="line">Unpacking fortunes-min (1:1.99.1-7) ...</span><br><span class="line">Selecting previously unselected package fortunes.</span><br><span class="line">Preparing to unpack .../fortunes_1%3a1.99.1-7_all.deb ...</span><br><span class="line">Unpacking fortunes (1:1.99.1-7) ...</span><br><span class="line">Setting up librecode0:amd64 (3.6-21) ...</span><br><span class="line">Setting up fortune-mod (1:1.99.1-7) ...</span><br><span class="line">Setting up fortunes-min (1:1.99.1-7) ...</span><br><span class="line">Setting up fortunes (1:1.99.1-7) ...</span><br><span class="line">Processing triggers for libc-bin (2.19-0ubuntu6.6) ...</span><br><span class="line"> ---&gt; 785085e9a520</span><br><span class="line">Removing intermediate container e7673f725ff2</span><br></pre></td></tr></table></figure><p>当<code>RUN</code>命令运行结束后，一个新的<code>layer</code>就会立即产生，并且销毁临时容器。</p><h3 id="一个新的临时容器产生，并且Docker会添加layer，对应于Dockerfile中的CMD命令-最后再销毁临时容器。"><a href="#一个新的临时容器产生，并且Docker会添加layer，对应于Dockerfile中的CMD命令-最后再销毁临时容器。" class="headerlink" title="一个新的临时容器产生，并且Docker会添加layer，对应于Dockerfile中的CMD命令, 最后再销毁临时容器。"></a>一个新的临时容器产生，并且Docker会添加<code>layer</code>，对应于Dockerfile中的<code>CMD</code>命令, 最后再销毁临时容器。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Step 3/3 : CMD /usr/games/fortune -a | cowsay</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; efb18db73358</span><br><span class="line">Successfully built efb18db73358</span><br></pre></td></tr></table></figure><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><p>现在，校验这个新镜像是否在本地存在，并且去运行它。</p><h3 id="用docker-images命令查看本地镜像"><a href="#用docker-images命令查看本地镜像" class="headerlink" title="用docker images命令查看本地镜像"></a>用<code>docker images</code>命令查看本地镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-whale        latest              efb18db73358        31 minutes ago      275 MB</span><br><span class="line">hello-world         latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay     latest              6b362a9f73eb        21 months ago       247 MB</span><br></pre></td></tr></table></figure><h3 id="运行新镜像docker-run-docker-whale"><a href="#运行新镜像docker-run-docker-whale" class="headerlink" title="运行新镜像docker run docker-whale"></a>运行新镜像<code>docker run docker-whale</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker run docker-whale</span><br><span class="line"> _________________________ </span><br><span class="line">/ manic-depressive, adj.: \</span><br><span class="line">|                         |</span><br><span class="line">\ Easy glum, easy glow.   /</span><br><span class="line"> ------------------------- </span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \     </span><br><span class="line">                    ##        .            </span><br><span class="line">              ## ## ##       ==            </span><br><span class="line">           ## ## ## ##      ===            </span><br><span class="line">       /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===        </span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   </span><br><span class="line">       \______ o          __/            </span><br><span class="line">        \    \        __/             </span><br><span class="line">          \____\______/</span><br></pre></td></tr></table></figure><p>运行时，你会发现Docker并没有去再下载任何东西，因为镜像已经在本地构建了。</p><h3 id="好不容易构建好了，再运行一次"><a href="#好不容易构建好了，再运行一次" class="headerlink" title="好不容易构建好了，再运行一次"></a>好不容易构建好了，再运行一次</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/code/mydockerbuild# docker run docker-whale</span><br><span class="line"> ________________________________________ </span><br><span class="line">/ Power, n.:                             \</span><br><span class="line">|                                        |</span><br><span class="line">| The only narcotic regulated by the SEC |</span><br><span class="line">\ instead of the FDA.                    /</span><br><span class="line"> ---------------------------------------- </span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \     </span><br><span class="line">                    ##        .            </span><br><span class="line">              ## ## ##       ==            </span><br><span class="line">           ## ## ## ##      ===            </span><br><span class="line">       /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===        </span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   </span><br><span class="line">       \______ o          __/            </span><br><span class="line">        \    \        __/             </span><br><span class="line">          \____\______/</span><br></pre></td></tr></table></figure><p>你会发现，输出竟然不一样了，好像它有自己的思维，那你就多运行几次看看吧。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-03查找并运行镜像image</title>
      <link href="/2017/03/25/Docker-03%E6%9F%A5%E6%89%BE%E5%B9%B6%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8Fimage/"/>
      <url>/2017/03/25/Docker-03%E6%9F%A5%E6%89%BE%E5%B9%B6%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8Fimage/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="https://docs.docker.com/engine/getstarted/step_three/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/step_three/</a></p></blockquote><p>Docker Hub上存放着全世界的docker镜像，我们可以浏览、下载并运行镜像。</p><h2 id="定位whalesay镜像"><a href="#定位whalesay镜像" class="headerlink" title="定位whalesay镜像"></a>定位whalesay镜像</h2><h3 id="打开浏览器，浏览Docker-Hub"><a href="#打开浏览器，浏览Docker-Hub" class="headerlink" title="打开浏览器，浏览Docker Hub"></a>打开浏览器，浏览<a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></h3><p><img src="/uploads/20170223110047136.png" alt="browse_and_search"></p><p>Docker Hub上的镜像包含了个人（比如我）、官方和一些组织的，比如：RedHat, IBM, Google等。</p><a id="more"></a><h3 id="搜索关键词whalesay"><a href="#搜索关键词whalesay" class="headerlink" title="搜索关键词whalesay"></a>搜索关键词<code>whalesay</code></h3><p><img src="/uploads/20170223110047137.png" alt="image_found"></p><h3 id="在结果页点击docker-whalesay镜像"><a href="#在结果页点击docker-whalesay镜像" class="headerlink" title="在结果页点击docker/whalesay镜像"></a>在结果页点击<code>docker/whalesay</code>镜像</h3><p>浏览器会跳转到whalesay镜像库界面。</p><p><img src="/uploads/20170223110047137.png" alt="whale_repo"></p><p>每个镜像库都包含镜像的信息，比如：镜像的分类是什么？怎么使用镜像？  </p><h3 id="运行whalesay镜像"><a href="#运行whalesay镜像" class="headerlink" title="运行whalesay镜像"></a>运行<code>whalesay</code>镜像</h3><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# docker run docker/whalesay cowsay boo</span><br><span class="line">Unable to find image &apos;docker/whalesay:latest&apos; locally</span><br><span class="line">latest: Pulling from docker/whalesay</span><br><span class="line">e190868d63f8: Pull complete </span><br><span class="line">909cd34c6fd7: Pull complete </span><br><span class="line">0b9bfabab7c1: Pull complete </span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">00bf65475aba: Pull complete </span><br><span class="line">c57b6bcc83e3: Pull complete </span><br><span class="line">8978f6879e2f: Pull complete </span><br><span class="line">8eed3712d2cf: Pull complete </span><br><span class="line">Digest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b</span><br><span class="line">Status: Downloaded newer image for docker/whalesay:latest</span><br><span class="line"> _____ </span><br><span class="line">&lt; boo &gt;</span><br><span class="line"> ----- </span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \     </span><br><span class="line">                    ##        .            </span><br><span class="line">              ## ## ##       ==            </span><br><span class="line">           ## ## ## ##      ===            </span><br><span class="line">       /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===        </span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   </span><br><span class="line">       \______ o          __/            </span><br><span class="line">        \    \        __/             </span><br><span class="line">          \____\______/</span><br></pre></td></tr></table></figure><p>第一次运行可能会比较慢，大概需要一分钟左右，需耐心等待，之所以第一次运行较慢，是因为本地仓库没有此镜像，需要去Docker Hub下载。</p><h4 id="运行docker-images命令，查看本地仓库的所有镜像-就会发现whalesay镜像已经被下载到本地了。"><a href="#运行docker-images命令，查看本地仓库的所有镜像-就会发现whalesay镜像已经被下载到本地了。" class="headerlink" title="运行docker images命令，查看本地仓库的所有镜像,就会发现whalesay镜像已经被下载到本地了。"></a>运行<code>docker images</code>命令，查看本地仓库的所有镜像,就会发现<code>whalesay</code>镜像已经被下载到本地了。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              48b5124b2768        5 weeks ago         1.84 kB</span><br><span class="line">docker/whalesay     latest              6b362a9f73eb        21 months ago       247 MB</span><br></pre></td></tr></table></figure><p>当你在容器中运行一个镜像，Docker会把镜像下载到你本地，本地的副本会为你下次运行节省时间。当且仅当Docker Hub上的镜像来源发生改变时，Docker才会去重新下载。你也可以手动删除本地镜像。</p><h4 id="再次运行whalesay镜像"><a href="#再次运行whalesay镜像" class="headerlink" title="再次运行whalesay镜像"></a>再次运行<code>whalesay</code>镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# docker run docker/whalesay cowsay boo-boo</span><br><span class="line"> _________ </span><br><span class="line">&lt; boo-boo &gt;</span><br><span class="line"> --------- </span><br><span class="line">    \</span><br><span class="line">     \</span><br><span class="line">      \     </span><br><span class="line">                    ##        .            </span><br><span class="line">              ## ## ##       ==            </span><br><span class="line">           ## ## ## ##      ===            </span><br><span class="line">       /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;___/ ===        </span><br><span class="line">  ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   </span><br><span class="line">       \______ o          __/            </span><br><span class="line">        \    \        __/             </span><br><span class="line">          \____\______</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-02学习docker基础知识</title>
      <link href="/2017/03/25/Docker-02%E5%AD%A6%E4%B9%A0docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2017/03/25/Docker-02%E5%AD%A6%E4%B9%A0docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<blockquote><p>官方文档:<a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="noopener">https://docs.docker.com/engine/getstarted/</a></p></blockquote><h2 id="将会学到"><a href="#将会学到" class="headerlink" title="将会学到"></a>将会学到</h2><ul><li>怎么在docker容器中运行软件镜像</li><li>怎么Docker Hub上浏览软件镜像</li><li>怎么创建自己的镜像并运行在容器中</li><li>怎么创建自己的Docker Hub账户和镜像库</li><li>怎么创建一个镜像</li><li>上传你的镜像到Docker Hub给其他人使用</li></ul><a id="more"></a><h2 id="理解镜像和容器"><a href="#理解镜像和容器" class="headerlink" title="理解镜像和容器"></a>理解镜像和容器</h2><p>Docker引擎提供的核心技术是镜像和容器。<br><code>docker run hello-world</code>这条命令由下面三部分组成:</p><p><img src="/uploads/20170223100628926.png" alt="container_explainer.png"><br>镜像是文件系统和运行时技术。它没有状态也永远不会改变。一个容器就是一个运行中的镜像实例。当你执行hello-world命令，docker引擎：</p><ul><li>校验你是否有hello-world镜像</li><li>从docker hub下载镜像</li><li>把镜像加载进容器中并且运行</li></ul>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker-01在ubuntu上安装docker引擎</title>
      <link href="/2017/03/25/Docker-01%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85docker%E5%BC%95%E6%93%8E/"/>
      <url>/2017/03/25/Docker-01%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85docker%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>docker引擎支持Linux、Cloud、Windows和macOS，由于个人精力有限，我不可能一一实验，我选择在Ubuntu14.04上安装，本系列文章是通过学习官方文档整理而来。</p><blockquote><p>官方文档:<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">https://docs.docker.com/engine/installation/</a></p></blockquote><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><ul><li>Yakkety 16.10</li><li>Xenial 16.04 (LTS)</li><li>Trusty 14.04 (LTS)✔️</li></ul><a id="more"></a><p>我的实验环境是Ubuntu 14.04 LTS, <code>lsb_release -a</code>可以查看版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 14.04.4 LTS</span><br><span class="line">Release:14.04</span><br><span class="line">Codename:trusty</span><br></pre></td></tr></table></figure><h2 id="推荐安装额外包"><a href="#推荐安装额外包" class="headerlink" title="推荐安装额外包"></a>推荐安装额外包</h2><p><code>linux-image-extra-*</code>包，它允许Docker使用存储驱动，一般使用Docker都要安装，除非你有不得不说的理由。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get update</span><br><span class="line"></span><br><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get install -y --no-install-recommends \</span><br><span class="line">    linux-image-extra-$(uname -r) \</span><br><span class="line">    linux-image-extra-virtual</span><br></pre></td></tr></table></figure><h2 id="使用镜像库安装Docker"><a href="#使用镜像库安装Docker" class="headerlink" title="使用镜像库安装Docker"></a>使用镜像库安装Docker</h2><p>安装Docker的方法有很多，选择一个你需要的即可，我是使用镜像库安装的。</p><ul><li>配置镜像库安装Docker(大部分用户的选择）✔️</li><li>下载DEB包安装Docker</li></ul><p>第一次在新机器上安装Docker的时候，需要配置镜像库，然后就可以从镜像库安装、更新或降级Docker</p><h3 id="允许apt通过https使用镜像库"><a href="#允许apt通过https使用镜像库" class="headerlink" title="允许apt通过https使用镜像库"></a>允许apt通过https使用镜像库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get install -y --no-install-recommends \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><h3 id="添加Docker官方公钥"><a href="#添加Docker官方公钥" class="headerlink" title="添加Docker官方公钥"></a>添加Docker官方公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# curl -fsSL https://apt.dockerproject.org/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>校验公钥<code>58118E89F3A912897C070ADBF76221572C52609D</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# apt-key fingerprint 58118E89F3A912897C070ADBF76221572C52609D</span><br><span class="line">/etc/apt/trusted.gpg</span><br><span class="line">--------------------</span><br><span class="line">pub   1024D/437D05B5 2004-09-12</span><br><span class="line">      Key fingerprint = 6302 39CC 130E 1A7F D81A  27B1 4097 6EAF 437D 05B5</span><br><span class="line">uid                  Ubuntu Archive Automatic Signing Key &lt;ftpmaster@ubuntu.com&gt;</span><br><span class="line">sub   2048g/79164387 2004-09-12</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="用下面的命令去稳定你的镜像库"><a href="#用下面的命令去稳定你的镜像库" class="headerlink" title="用下面的命令去稳定你的镜像库"></a>用下面的命令去稳定你的镜像库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo add-apt-repository \</span><br><span class="line">       &quot;deb https://apt.dockerproject.org/repo/ \</span><br><span class="line">       ubuntu-$(lsb_release -cs) \</span><br><span class="line">       main&quot;</span><br></pre></td></tr></table></figure><blockquote><p><code>lsb_release -cs</code>这个子命令返回你的ubuntu系统的代号，如<code>trusty</code></p></blockquote><p>启用测试镜像库。通过编辑<code>/etc/apt/sources.list</code>,并在下面这行的最后添加<code>testing</code>。<br>deb <a href="https://apt.dockerproject.org/repo/" target="_blank" rel="noopener">https://apt.dockerproject.org/repo/</a> ubuntu-trusty main<br>添加后:<br>deb <a href="https://apt.dockerproject.org/repo/" target="_blank" rel="noopener">https://apt.dockerproject.org/repo/</a> ubuntu-trusty main testing</p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="更新apt包"><a href="#更新apt包" class="headerlink" title="更新apt包"></a>更新<code>apt</code>包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="安装最新版docker，或者在下一步安装指定版本的"><a href="#安装最新版docker，或者在下一步安装指定版本的" class="headerlink" title="安装最新版docker，或者在下一步安装指定版本的"></a>安装最新版docker，或者在下一步安装指定版本的</h3><p>用下面的命令安装最新版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get -y install docker-engine</span><br></pre></td></tr></table></figure><h3 id="在生产机器，你需要安装指定版本的docker，不要总是使用最新版，下面的命令列出了所有可用版本"><a href="#在生产机器，你需要安装指定版本的docker，不要总是使用最新版，下面的命令列出了所有可用版本" class="headerlink" title="在生产机器，你需要安装指定版本的docker，不要总是使用最新版，下面的命令列出了所有可用版本"></a>在生产机器，你需要安装指定版本的docker，不要总是使用最新版，下面的命令列出了所有可用版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# apt-cache madison docker-engine</span><br><span class="line">docker-engine | 17.03.0~ce~rc1-0~ubuntu-trusty | https://apt.dockerproject.org/repo/ ubuntu-trusty/testing amd64 Packages</span><br><span class="line">docker-engine | 1.13.1-0~ubuntu-trusty | https://apt.dockerproject.org/repo/ ubuntu-trusty/main amd64 Packages</span><br><span class="line">docker-engine | 1.13.1~rc2-0~ubuntu-trusty | https://apt.dockerproject.org/repo/ ubuntu-trusty/testing amd64 Packages</span><br><span class="line">docker-engine | 1.13.1~rc1-0~ubuntu-trusty | https://apt.dockerproject.org/repo/ ubuntu-trusty/testing amd64 Packages</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>每行的第二列是版本号，第三列是镜像库名，然后选择一个指定的版本进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo apt-get -y install docker-engine=&lt;版本号&gt;</span><br></pre></td></tr></table></figure><h3 id="运行Hello-World来检验是否安装正确"><a href="#运行Hello-World来检验是否安装正确" class="headerlink" title="运行Hello World来检验是否安装正确"></a>运行<code>Hello World</code>来检验是否安装正确</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>运行后报错了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image &apos;hello-world:latest&apos; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">78445dd45222: Pull complete </span><br><span class="line">docker: error pulling image configuration: Get https://registry-1.docker.io/v2/library/hello-world/blobs/sha256:48b5124b2768d2b917edcb640435044a97967015485e812545546cbed5cf0233: net/http: TLS handshake timeout.</span><br><span class="line">See &apos;docker run --help&apos;.</span><br></pre></td></tr></table></figure><p>重启docker服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# service docker restart </span><br><span class="line">docker stop/waiting</span><br><span class="line">docker start/running, process 18050</span><br></pre></td></tr></table></figure><p>再次运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~# docker run hello-world</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Log4j2让项目输出info级别的日志和debug级别的sql</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8Log4j2%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BE%93%E5%87%BAinfo%E7%BA%A7%E5%88%AB%E7%9A%84%E6%97%A5%E5%BF%97%E5%92%8Cdebug%E7%BA%A7%E5%88%AB%E7%9A%84sql/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8Log4j2%E8%AE%A9%E9%A1%B9%E7%9B%AE%E8%BE%93%E5%87%BAinfo%E7%BA%A7%E5%88%AB%E7%9A%84%E6%97%A5%E5%BF%97%E5%92%8Cdebug%E7%BA%A7%E5%88%AB%E7%9A%84sql/</url>
      <content type="html"><![CDATA[<blockquote><p>log4j2的使用方法<a href="http://kangyonggan.com/2017/03/25/log4j2的使用和配置/">http://kangyonggan.com/2017/03/25/log4j2的使用和配置/</a></p></blockquote><p>让项目输出info级别的日志，让项目输出debug级别的日志，<code>log4j2.xml</code>的配置如下:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;LOG_HOME&quot;&gt;/Users/kyg/logs/simconf&lt;/property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;AllFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/all.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/error.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncAll&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AllFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncError&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ErrorFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Logger name=&quot;com.kangyonggan.app.simconf.mapper&quot; level=&quot;debug&quot; additivity=&quot;false&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Logger&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Root level=&quot;info&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>只配置log4j2.xml是不够的，因为Mybatis默认使用的不是log4j2，默认使用的顺序如下:</p><blockquote><p>SLF4J &gt; Apache Commons Logging &gt; Log4j2 &gt; Log4j &gt; JDK logging</p></blockquote><p>所有我们还需要让Mybatis使用log4j2来输出日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    ...    </span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><code>mybatis.xml</code>的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;!--使用log4j2输出日志--&gt;</span><br><span class="line">        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J2&quot;&gt;&lt;/setting&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>小记：本人单线程测试log4j和log4j2的性能，结果如下:<br>输出10000个debug+10000个info+10000个error到日志文件，log4j2是log4j速度的1.8倍左右。<br>输出100000个debug+100000个info+100000个error到日志文件，log4j2是log4j速度的2.6倍左右。</p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu配置DNS服务器</title>
      <link href="/2017/03/25/ubuntu%E9%85%8D%E7%BD%AEDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/03/25/ubuntu%E9%85%8D%E7%BD%AEDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p>在ubuntu 14.04上搭建一个自己的dns服务器，并实现重新解析baidu.com到自定义服务器。</p><h2 id="安装并配置"><a href="#安装并配置" class="headerlink" title="安装并配置"></a>安装并配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:~$ sudo apt-get bind9</span><br></pre></td></tr></table></figure><a id="more"></a><p>检查是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:~$ cd /etc/bind/</span><br><span class="line">kyg@kyg-Latitude-5450:/etc/bind$ ll</span><br><span class="line">total 68</span><br><span class="line">drwxr-sr-x   2 root bind  4096  2月 19 12:25 ./</span><br><span class="line">drwxr-xr-x 129 root root 12288  2月 19 12:25 ../</span><br><span class="line">-rw-r--r--   1 root root  2389  2月 16 00:33 bind.keys</span><br><span class="line">-rw-r--r--   1 root root   237  2月 16 00:33 db.0</span><br><span class="line">-rw-r--r--   1 root root   271  2月 16 00:33 db.127</span><br><span class="line">-rw-r--r--   1 root root   237  2月 16 00:33 db.255</span><br><span class="line">-rw-r--r--   1 root root   353  2月 16 00:33 db.empty</span><br><span class="line">-rw-r--r--   1 root root   270  2月 16 00:33 db.local</span><br><span class="line">-rw-r--r--   1 root root  3048  2月 16 00:33 db.root</span><br><span class="line">-rw-r--r--   1 root bind   463  2月 16 00:33 named.conf</span><br><span class="line">-rw-r--r--   1 root bind   490  2月 16 00:33 named.conf.default-zones</span><br><span class="line">-rw-r--r--   1 root bind   165  2月 16 00:33 named.conf.local</span><br><span class="line">-rw-r--r--   1 root bind   890  2月 19 12:25 named.conf.options</span><br><span class="line">-rw-r-----   1 bind bind    77  2月 19 12:25 rndc.key</span><br><span class="line">-rw-r--r--   1 root root  1317  2月 16 00:33 zones.rfc1918</span><br></pre></td></tr></table></figure><p>在实验之前先ping一下百度，好做个对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:~$ ping baidu.com</span><br><span class="line">PING baidu.com (123.125.114.144) 56(84) bytes of data.</span><br><span class="line">64 bytes from 123.125.114.144: icmp_seq=1 ttl=54 time=33.4 ms</span><br><span class="line">64 bytes from 123.125.114.144: icmp_seq=2 ttl=54 time=42.4 ms</span><br><span class="line">64 bytes from 123.125.114.144: icmp_seq=3 ttl=54 time=37.3 ms</span><br></pre></td></tr></table></figure><p>可以看到dns把baidu.com解析成的ip是123.125.114.144<br>现在我就搭建一个简单的dns，让自己的dns把baidu.com解析成192.168.2.112<br>这是自己的服务器，然后就可以把xxx展现给用户了。</p><p>配置dns：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:~$ sudo vim /etc/bind/named.conf.local</span><br><span class="line">添加如下内容:</span><br><span class="line"></span><br><span class="line">zone &quot;baidu.com&quot; &#123; type master; file &quot;/etc/bind/db.baidu.com&quot;; &#125;;</span><br></pre></td></tr></table></figure><p>修改db的配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:~$ cd /etc/bind/</span><br><span class="line">kyg@kyg-Latitude-5450:/etc/bind# sudo cp db.local db.baidu.com</span><br><span class="line">kyg@kyg-Latitude-5450:/etc/bind# vi db.baidu.com</span><br><span class="line"></span><br><span class="line">内容如下：</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">; BIND data file for local loopback interface</span><br><span class="line">;</span><br><span class="line">$TTL604800</span><br><span class="line">@INSOAlocalhost. root.localhost. (</span><br><span class="line">o      2; Serial</span><br><span class="line">o 604800; Refresh</span><br><span class="line">o  86400; Retry</span><br><span class="line">o2419200; Expire</span><br><span class="line">o 604800 ); Negative Cache TTL</span><br><span class="line">;</span><br><span class="line">@INNSlocalhost.</span><br><span class="line">@INA192.168.2.112</span><br><span class="line">@INAAAA::1</span><br></pre></td></tr></table></figure><p>最后重启服务！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:/etc/bind# sudo /etc/init.d/bind9 restart</span><br><span class="line"> * Stopping domain name service... bind9                                                waiting for pid 5141 to die</span><br><span class="line">                                                                                 [ OK ]</span><br><span class="line"> * Starting domain name service... bind9</span><br></pre></td></tr></table></figure><p>如果启动失败，可以运行<code>named -g</code>查看错误原因.</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kyg@kyg-Latitude-5450:/etc/bind$ ping baidu.com</span><br><span class="line">PING baidu.com (192.168.2.112) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=1 ttl=63 time=4.73 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=2 ttl=63 time=2.12 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=3 ttl=63 time=2.22 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=4 ttl=63 time=5.15 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=5 ttl=63 time=18.8 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=6 ttl=63 time=2.11 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=7 ttl=63 time=2.81 ms</span><br><span class="line">64 bytes from 192.168.2.112: icmp_seq=8 ttl=63 time=2.79 ms</span><br></pre></td></tr></table></figure><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>其实在我们没有安装DNS服务之前，可以将/etc/hosts文件比作一个DNS服务配置文件，因为它实现和DNS类似。</p><p>之所以会独立出DNS服务，是因为因特网主机多，如果每个主机都靠/etc/hosts文件来维护主机名到ip的映射，那么工作量非常大，对本地更新、网络资源占用都很浪费，所以出现了DNS。</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手动安装本地jar包到仓库</title>
      <link href="/2017/03/25/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E5%88%B0%E4%BB%93%E5%BA%93/"/>
      <url>/2017/03/25/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0jar%E5%8C%85%E5%88%B0%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.kangyonggan.app -DartifactId=simclient -Dversion=1.0-SNAPSHOT -Dpackaging=jar -Dfile=/home/kyg/data/jar/simclient-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用openssl生成RSA密钥对</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8openssl%E7%94%9F%E6%88%90RSA%E5%AF%86%E9%92%A5%E5%AF%B9/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8openssl%E7%94%9F%E6%88%90RSA%E5%AF%86%E9%92%A5%E5%AF%B9/</url>
      <content type="html"><![CDATA[<h2 id="生成秘钥对"><a href="#生成秘钥对" class="headerlink" title="生成秘钥对"></a>生成秘钥对</h2><h3 id="生成RSA私钥，以X509编码，指定生成的密钥的位数为2048位，该步生成的私钥只是临时文件，以便第二步将私钥转为PKCS-8编码。"><a href="#生成RSA私钥，以X509编码，指定生成的密钥的位数为2048位，该步生成的私钥只是临时文件，以便第二步将私钥转为PKCS-8编码。" class="headerlink" title="生成RSA私钥，以X509编码，指定生成的密钥的位数为2048位，该步生成的私钥只是临时文件，以便第二步将私钥转为PKCS#8编码。"></a>生成RSA私钥，以X509编码，指定生成的密钥的位数为2048位，该步生成的私钥只是临时文件，以便第二步将私钥转为PKCS#8编码。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rsa_private_key_2048.pem 2048</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="将上一步生成的RSA私钥转换成PKCS-8编码，作为最终使用的私钥。"><a href="#将上一步生成的RSA私钥转换成PKCS-8编码，作为最终使用的私钥。" class="headerlink" title="将上一步生成的RSA私钥转换成PKCS#8编码，作为最终使用的私钥。"></a>将上一步生成的RSA私钥转换成PKCS#8编码，作为最终使用的私钥。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -in rsa_private_key_2048.pem -out pkcs8_rsa_private_key_2048.pem -nocrypt</span><br></pre></td></tr></table></figure><h3 id="导出RSA公钥，以X509编码，作为最终交换的公钥。"><a href="#导出RSA公钥，以X509编码，作为最终交换的公钥。" class="headerlink" title="导出RSA公钥，以X509编码，作为最终交换的公钥。"></a>导出RSA公钥，以X509编码，作为最终交换的公钥。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private_key_2048.pem -out rsa_public_key_2048.pem -pubout</span><br></pre></td></tr></table></figure><blockquote><p>注：一般Linux系统都装有openssl工具，在windows下可以安装OpenSSL工具包。</p></blockquote><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="加密工具"><a href="#加密工具" class="headerlink" title="加密工具"></a>加密工具</h3><p><code>CryptoUtil.java</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.codec.binary.Base64;</span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">import javax.crypto.BadPaddingException;</span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.IllegalBlockSizeException;</span><br><span class="line">import javax.crypto.NoSuchPaddingException;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.security.*;</span><br><span class="line">import java.security.spec.InvalidKeySpecException;</span><br><span class="line">import java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line">import java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/12/27</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">public class CryptoUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取公钥对象</span><br><span class="line">     *</span><br><span class="line">     * @param inputStream  公钥输入流</span><br><span class="line">     * @param keyAlgorithm 密钥算法</span><br><span class="line">     * @return 公钥对象</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static PublicKey getPublicKey(InputStream inputStream, String keyAlgorithm) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String readLine;</span><br><span class="line">            while ((readLine = br.readLine()) != null) &#123;</span><br><span class="line">                if (readLine.charAt(0) == &apos;-&apos;) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(readLine);</span><br><span class="line">                    sb.append(&apos;\r&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            X509EncodedKeySpec pubX509 = new X509EncodedKeySpec(Base64.decodeBase64(sb.toString()));</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(keyAlgorithm);</span><br><span class="line">            PublicKey publicKey = keyFactory.generatePublic(pubX509);</span><br><span class="line"></span><br><span class="line">            return publicKey;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            throw new Exception(&quot;公钥路径文件不存在&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new Exception(&quot;读取公钥异常&quot;);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;生成密钥工厂时没有[%s]此类算法&quot;, keyAlgorithm));</span><br><span class="line">        &#125; catch (InvalidKeySpecException e) &#123;</span><br><span class="line">            throw new Exception(&quot;生成公钥对象异常&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (inputStream != null) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                log.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取私钥对象</span><br><span class="line">     *</span><br><span class="line">     * @param inputStream  私钥输入流</span><br><span class="line">     * @param keyAlgorithm 密钥算法</span><br><span class="line">     * @return 私钥对象</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static PrivateKey getPrivateKey(InputStream inputStream, String keyAlgorithm) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String readLine;</span><br><span class="line">            while ((readLine = br.readLine()) != null) &#123;</span><br><span class="line">                if (readLine.charAt(0) == &apos;-&apos;) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    sb.append(readLine);</span><br><span class="line">                    sb.append(&apos;\r&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(Base64.decodeBase64(sb.toString()));</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(keyAlgorithm);</span><br><span class="line">            PrivateKey privateKey = keyFactory.generatePrivate(priPKCS8);</span><br><span class="line"></span><br><span class="line">            return privateKey;</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            throw new Exception(&quot;私钥路径文件不存在&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new Exception(&quot;读取私钥异常&quot;);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(&quot;生成私钥对象异常&quot;);</span><br><span class="line">        &#125; catch (InvalidKeySpecException e) &#123;</span><br><span class="line">            throw new Exception(&quot;生成私钥对象异常&quot;);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                if (inputStream != null) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                log.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数字签名函数入口</span><br><span class="line">     *</span><br><span class="line">     * @param plainBytes    待签名明文字节数组</span><br><span class="line">     * @param privateKey    签名使用私钥</span><br><span class="line">     * @param signAlgorithm 签名算法</span><br><span class="line">     * @return 签名后的字节数组</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static byte[] digitalSign(byte[] plainBytes, PrivateKey privateKey, String signAlgorithm) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(signAlgorithm);</span><br><span class="line">            signature.initSign(privateKey);</span><br><span class="line">            signature.update(plainBytes);</span><br><span class="line">            byte[] signBytes = signature.sign();</span><br><span class="line"></span><br><span class="line">            return signBytes;</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;数字签名时没有[%s]此类算法&quot;, signAlgorithm));</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            throw new Exception(&quot;数字签名时私钥无效&quot;);</span><br><span class="line">        &#125; catch (SignatureException e) &#123;</span><br><span class="line">            throw new Exception(&quot;数字签名时出现异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证数字签名函数入口</span><br><span class="line">     *</span><br><span class="line">     * @param plainBytes    待验签明文字节数组</span><br><span class="line">     * @param signBytes     待验签签名后字节数组</span><br><span class="line">     * @param publicKey     验签使用公钥</span><br><span class="line">     * @param signAlgorithm 签名算法</span><br><span class="line">     * @return 验签是否通过</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static boolean verifyDigitalSign(byte[] plainBytes, byte[] signBytes, PublicKey publicKey, String signAlgorithm) throws Exception &#123;</span><br><span class="line">        boolean isValid;</span><br><span class="line">        try &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(signAlgorithm);</span><br><span class="line">            signature.initVerify(publicKey);</span><br><span class="line">            signature.update(plainBytes);</span><br><span class="line">            isValid = signature.verify(signBytes);</span><br><span class="line">            return isValid;</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;验证数字签名时没有[%s]此类算法&quot;, signAlgorithm));</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            throw new Exception(&quot;验证数字签名时公钥无效&quot;);</span><br><span class="line">        &#125; catch (SignatureException e) &#123;</span><br><span class="line">            throw new Exception(&quot;验证数字签名时出现异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密</span><br><span class="line">     *</span><br><span class="line">     * @param plainBytes      明文字节数组</span><br><span class="line">     * @param publicKey       公钥</span><br><span class="line">     * @param keyLength       密钥bit长度</span><br><span class="line">     * @param reserveSize     padding填充字节数，预留11字节</span><br><span class="line">     * @param cipherAlgorithm 加解密算法，一般为RSA/ECB/PKCS1Padding</span><br><span class="line">     * @return 加密后字节数组，不经base64编码</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static byte[] encrypt(byte[] plainBytes, PublicKey publicKey, int keyLength, int reserveSize, String cipherAlgorithm) throws Exception &#123;</span><br><span class="line">        int keyByteSize = keyLength / 8; // 密钥字节数</span><br><span class="line">        int encryptBlockSize = keyByteSize - reserveSize; // 加密块大小=密钥字节数-padding填充字节数</span><br><span class="line">        int nBlock = plainBytes.length / encryptBlockSize;// 计算分段加密的block数，向上取整</span><br><span class="line">        if ((plainBytes.length % encryptBlockSize) != 0) &#123; // 余数非0，block数再加1</span><br><span class="line">            nBlock += 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(cipherAlgorithm);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line"></span><br><span class="line">            // 输出buffer，大小为nBlock个keyByteSize</span><br><span class="line">            ByteArrayOutputStream outbuf = new ByteArrayOutputStream(nBlock * keyByteSize);</span><br><span class="line">            // 分段加密</span><br><span class="line">            for (int offset = 0; offset &lt; plainBytes.length; offset += encryptBlockSize) &#123;</span><br><span class="line">                int inputLen = plainBytes.length - offset;</span><br><span class="line">                if (inputLen &gt; encryptBlockSize) &#123;</span><br><span class="line">                    inputLen = encryptBlockSize;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 得到分段加密结果</span><br><span class="line">                byte[] encryptedBlock = cipher.doFinal(plainBytes, offset, inputLen);</span><br><span class="line">                // 追加结果到输出buffer中</span><br><span class="line">                outbuf.write(encryptedBlock);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            outbuf.flush();</span><br><span class="line">            outbuf.close();</span><br><span class="line">            return outbuf.toByteArray();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;没有[%s]此类加密算法&quot;, cipherAlgorithm));</span><br><span class="line">        &#125; catch (NoSuchPaddingException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;没有[%s]此类填充模式&quot;, cipherAlgorithm));</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            throw new Exception(&quot;无效密钥&quot;);</span><br><span class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</span><br><span class="line">            throw new Exception(&quot;加密块大小不合法&quot;);</span><br><span class="line">        &#125; catch (BadPaddingException e) &#123;</span><br><span class="line">            throw new Exception(&quot;错误填充模式&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new Exception(&quot;字节输出流异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RSA解密</span><br><span class="line">     *</span><br><span class="line">     * @param encryptedBytes  加密后字节数组</span><br><span class="line">     * @param privateKey      私钥</span><br><span class="line">     * @param keyLength       密钥bit长度</span><br><span class="line">     * @param reserveSize     padding填充字节数，预留11字节</span><br><span class="line">     * @param cipherAlgorithm 加解密算法，一般为RSA/ECB/PKCS1Padding</span><br><span class="line">     * @return 解密后字节数组，不经base64编码</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static byte[] decrypt(byte[] encryptedBytes, PrivateKey privateKey, int keyLength, int reserveSize, String cipherAlgorithm) throws Exception &#123;</span><br><span class="line">        int keyByteSize = keyLength / 8; // 密钥字节数</span><br><span class="line">        int decryptBlockSize = keyByteSize - reserveSize; // 解密块大小=密钥字节数-padding填充字节数</span><br><span class="line">        int nBlock = encryptedBytes.length / keyByteSize;// 计算分段解密的block数，理论上能整除</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(cipherAlgorithm);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">            // 输出buffer，大小为nBlock个decryptBlockSize</span><br><span class="line">            ByteArrayOutputStream outbuf = new ByteArrayOutputStream(nBlock * decryptBlockSize);</span><br><span class="line">            // 分段解密</span><br><span class="line">            for (int offset = 0; offset &lt; encryptedBytes.length; offset += keyByteSize) &#123;</span><br><span class="line">                // block大小: decryptBlock 或 剩余字节数</span><br><span class="line">                int inputLen = encryptedBytes.length - offset;</span><br><span class="line">                if (inputLen &gt; keyByteSize) &#123;</span><br><span class="line">                    inputLen = keyByteSize;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 得到分段解密结果</span><br><span class="line">                byte[] decryptedBlock = cipher.doFinal(encryptedBytes, offset, inputLen);</span><br><span class="line">                // 追加结果到输出buffer中</span><br><span class="line">                outbuf.write(decryptedBlock);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            outbuf.flush();</span><br><span class="line">            outbuf.close();</span><br><span class="line">            return outbuf.toByteArray();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;没有[%s]此类解密算法&quot;, cipherAlgorithm));</span><br><span class="line">        &#125; catch (NoSuchPaddingException e) &#123;</span><br><span class="line">            throw new Exception(String.format(&quot;没有[%s]此类填充模式&quot;, cipherAlgorithm));</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            throw new Exception(&quot;无效密钥&quot;);</span><br><span class="line">        &#125; catch (IllegalBlockSizeException e) &#123;</span><br><span class="line">            throw new Exception(&quot;解密块大小不合法&quot;);</span><br><span class="line">        &#125; catch (BadPaddingException e) &#123;</span><br><span class="line">            throw new Exception(&quot;错误填充模式&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new Exception(&quot;字节输出流异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 字符数组转16进制字符串</span><br><span class="line">     *</span><br><span class="line">     * @param bytes</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String bytes2string(byte[] bytes, int radix) &#123;</span><br><span class="line">        // 2个16进制字符占用1个字节，8个二进制字符占用1个字节</span><br><span class="line">        int size = 2;</span><br><span class="line">        if (radix == 2) &#123;</span><br><span class="line">            size = 8;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = new StringBuilder(bytes.length * size);</span><br><span class="line">        for (int i = 0; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            int integer = bytes[i];</span><br><span class="line">            while (integer &lt; 0) &#123;</span><br><span class="line">                integer = integer + 256;</span><br><span class="line">            &#125;</span><br><span class="line">            String str = Integer.toString(integer, radix);</span><br><span class="line">            sb.append(StringUtils.leftPad(str.toUpperCase(), size, &quot;0&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte[] signBytes = CryptoUtil.digitalSign(xml.getBytes(&quot;UTF-8&quot;), privateKey, &quot;SHA1WithRSA&quot;);</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte[] encryptedBytes = CryptoUtil.encrypt(xmlBytes, publicKey, 2048, 11, &quot;RSA/ECB/PKCS1Padding&quot;);</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte[] xmlBytes = CryptoUtil.decrypt(encryptedBytes, privateKey, 2048, 11, &quot;RSA/ECB/PKCS1Padding&quot;);</span><br></pre></td></tr></table></figure><h3 id="验签"><a href="#验签" class="headerlink" title="验签"></a>验签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean isValid = CryptoUtil.verifyDigitalSign(xmlBytes, signBytes, publicKey, &quot;SHA1WithRSA&quot;);</span><br></pre></td></tr></table></figure><h3 id="加载私钥"><a href="#加载私钥" class="headerlink" title="加载私钥"></a>加载私钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 加载私钥</span><br><span class="line"> */</span><br><span class="line">private void loadPrivateKey() &#123;</span><br><span class="line">    String privateKeyPath = null;</span><br><span class="line">    InputStream inputStream = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        // TODO</span><br><span class="line">        privateKeyPath = &quot;私钥路径&quot;;</span><br><span class="line">        inputStream = new FileInputStream(privateKeyPath);</span><br><span class="line">        privateKey = CryptoUtil.getPrivateKey(inputStream, &quot;RSA&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;无法加载己方私钥[&#123;&#125;]&quot;, privateKeyPath);</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (inputStream != null) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载公钥"><a href="#加载公钥" class="headerlink" title="加载公钥"></a>加载公钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 加载公钥</span><br><span class="line"> */</span><br><span class="line">private void loadPublicKey() &#123;</span><br><span class="line">    String publicKeyPath = null;</span><br><span class="line">    InputStream inputStream = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        // TODO</span><br><span class="line">        publicKeyPath = &quot;公钥路径&quot;;</span><br><span class="line">        inputStream = new FileInputStream(publicKeyPath);</span><br><span class="line">        publicKey = CryptoUtil.getPublicKey(inputStream, &quot;RSA&quot;);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;无法加载对方公钥[&#123;&#125;]&quot;, publicKeyPath);</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (inputStream != null) &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用配置中心代替properties</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%A3%E6%9B%BFproperties/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E4%BB%A3%E6%9B%BFproperties/</url>
      <content type="html"><![CDATA[<h2 id="生成一个项目confogcenter"><a href="#生成一个项目confogcenter" class="headerlink" title="生成一个项目confogcenter"></a>生成一个项目<code>confogcenter</code></h2><p>用<code>cms-archetype</code>生成一个项目，然后在此基础上开发一个模块，用于管理配置信息（CRUD）</p><p>我写的配置中心在github上: <a href="https://github.com/kangyonggan/configcenter.git" target="_blank" rel="noopener">https://github.com/kangyonggan/configcenter.git</a></p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在spring把占位符替换之前，发送http get请求到配置中心读取配置，拿到此项目的所有配置信息后（json），把json数据解析成一对对的名值对，最后把所有的名值对全部放入系统配置中，即:<code>System.setProperty(name, value);</code>。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>在<code>applicationContext.xml</code>的最上方（也不一定最上，但一定要在所有占位符的上面）添加自定义的<code>bean</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop</span><br><span class="line">ohttp://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span><br><span class="line">ohttp://www.springframework.org/schema/beans</span><br><span class="line">ohttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span><br><span class="line">ohttp://www.springframework.org/schema/tx</span><br><span class="line">ohttp://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span><br><span class="line">ohttp://www.springframework.org/schema/context </span><br><span class="line">ohttp://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Activates annotation-based bean configuration --&gt;</span><br><span class="line">    &lt;context:annotation-config&gt;&lt;/context:annotation&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 读取属性文件，否则 java 类无法直接读取属性 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:app.properties&quot;&gt;&lt;/context:property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 读取配置中心 --&gt;</span><br><span class="line">    &lt;bean class=&quot;com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer&quot; &gt;&lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">    ...</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><code>MyPropertyPlaceholderConfigurer.java</code>的实现:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.archetype.cmscc.biz.core;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.kangyonggan.archetype.cmscc.biz.util.HttpUtil;</span><br><span class="line">import com.kangyonggan.archetype.cmscc.biz.util.PropertiesUtil;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/1/25</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">public class MyPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    public MyPropertyPlaceholderConfigurer() &#123;</span><br><span class="line">        loadConfigs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载配置</span><br><span class="line">     */</span><br><span class="line">    private void loadConfigs() &#123;</span><br><span class="line">        String server = PropertiesUtil.getProperties(&quot;config.center.server&quot;);</span><br><span class="line">        log.info(&quot;配置中心服务地址:&#123;&#125;&quot;, server);</span><br><span class="line"></span><br><span class="line">        String data = HttpUtil.sendGet(server);</span><br><span class="line"></span><br><span class="line">        if (StringUtils.isEmpty(data)) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;读取配置中心异常&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(&quot;已成功获取配置中心的配置&quot;);</span><br><span class="line"></span><br><span class="line">        JSONObject jsonObject = JSON.parseObject(data);</span><br><span class="line">        String errCode = (String) jsonObject.get(&quot;errCode&quot;);</span><br><span class="line">        String errMsg = (String) jsonObject.get(&quot;errMsg&quot;);</span><br><span class="line"></span><br><span class="line">        log.info(&quot;errCode:&#123;&#125;&quot;, errCode);</span><br><span class="line">        log.info(&quot;errMsg:&#123;&#125;&quot;, errMsg);</span><br><span class="line"></span><br><span class="line">        if (!&quot;success&quot;.equals(errCode)) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;读取配置中心失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONArray jsonArray = jsonObject.getJSONArray(&quot;configs&quot;);</span><br><span class="line">        log.info(&quot;共有&#123;&#125;项配置!&quot;, jsonArray.size());</span><br><span class="line"></span><br><span class="line">        load(jsonArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载配置</span><br><span class="line">     *</span><br><span class="line">     * @param jsonArray</span><br><span class="line">     */</span><br><span class="line">    public static void load(JSONArray jsonArray) &#123;</span><br><span class="line">        for (int i = 0; i &lt; jsonArray.size(); i++) &#123;</span><br><span class="line">            JSONObject object = jsonArray.getJSONObject(i);</span><br><span class="line">            log.info(&quot;正在存储配置:&#123;&#125;&quot;, object);</span><br><span class="line"></span><br><span class="line">            String name = object.getString(&quot;name&quot;);</span><br><span class="line">            String value = object.getString(&quot;value&quot;);</span><br><span class="line"></span><br><span class="line">            System.setProperty(name, value);</span><br><span class="line">            PropertiesUtil.putProperties(name, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(&quot;从配置中心加载配置完毕！！！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>public static void load(JSONArray jsonArray)</code>之所以写成了<code>static</code>是因为我其他地方也想使用, 比如：我发现ftp的ip配置错了，然后修改了ftp的ip，但是又不想重启服务器，这时候我就会在配置中心的控制台上点一下<code>推送配置</code>,然后客户端项目就能接收到配置了，然后就需要调用load方法刷新一下内存中的配置，但有些配置刷了也没用，比如jdbc的url等。</p><p>接收配置的代码<code>ConfigcenterController.java</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.archetype.cmscc.web.controller.web;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import java.net.URLDecoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/1/27</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;configcenter&quot;)</span><br><span class="line">@Log4j2</span><br><span class="line">public class ConfigcenterController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接收配置中心推送过来的配置</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(method = RequestMethod.POST)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public boolean receiver(@RequestParam(&quot;data&quot;) String data) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            data = URLDecoder.decode(data, &quot;UTF-8&quot;);</span><br><span class="line">            MyPropertyPlaceholderConfigurer.load(JSONArray.parseArray(data));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;接收配置失败&quot;, e);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h2><h4 id="1-日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了pom-xml-如：-lt-log4j2-home-gt-Users-kyg-logs-cmscc-lt-log4j2-home-gt"><a href="#1-日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了pom-xml-如：-lt-log4j2-home-gt-Users-kyg-logs-cmscc-lt-log4j2-home-gt" class="headerlink" title="1. 日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了pom.xml, 如：&lt;log4j2.home&gt;/Users/kyg/logs/cmscc&lt;/log4j2.home&gt;"></a>1. 日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了<code>pom.xml</code>, 如：<code>&lt;log4j2.home&gt;/Users/kyg/logs/cmscc&lt;/log4j2.home&gt;</code></h4><h4 id="2-配置中心服务器的地址配置在了app-properties，因为配置中心的地址是可能变的，所以不能硬编码，如：app-proerperties的内容"><a href="#2-配置中心服务器的地址配置在了app-properties，因为配置中心的地址是可能变的，所以不能硬编码，如：app-proerperties的内容" class="headerlink" title="2. 配置中心服务器的地址配置在了app.properties，因为配置中心的地址是可能变的，所以不能硬编码，如：app.proerperties的内容:"></a>2. 配置中心服务器的地址配置在了<code>app.properties</code>，因为配置中心的地址是可能变的，所以不能硬编码，如：<code>app.proerperties</code>的内容:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.center.server=http://localhost:7777/configuration?proj=$&#123;project.parent.artifactId&#125;&amp;env=$&#123;env&#125;</span><br></pre></td></tr></table></figure><p>其中<code>${project.parent.artifactId}</code>会取自<code>pom.xml</code>中父模块的artifactId,<br><code>${env}</code>指的是环境，比如开发环境，联调环境，生产环境等。我写在了pom.xml中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;local&lt;/id&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;local&lt;/env&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;local&lt;/env&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;uat&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;local&lt;/env&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;hd&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;local&lt;/env&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;local&lt;/env&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>我把使用配置中心的项目也写了一个项目原型,地址在:<a href="https://github.com/kangyonggan/cmscc-archetype.git" target="_blank" rel="noopener">https://github.com/kangyonggan/cmscc-archetype.git</a></p><h2 id="附配置中心推送配置的代码"><a href="#附配置中心推送配置的代码" class="headerlink" title="附配置中心推送配置的代码"></a>附配置中心推送配置的代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 推送配置</span><br><span class="line"> *</span><br><span class="line"> * @param id</span><br><span class="line"> * @param env</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@RequestMapping(value = &quot;push&quot;, method = RequestMethod.POST)</span><br><span class="line">@RequiresPermissions(&quot;CORE_PROJECT&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Map&lt;String, Object&gt; push(@RequestParam(&quot;id&quot;) Long id, @RequestParam(&quot;env&quot;) String env) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; resultMap = getResultMap();</span><br><span class="line">    Project project = projectService.findProjectById(id);</span><br><span class="line"></span><br><span class="line">    if (project != null &amp;&amp; StringUtils.isNotEmpty(project.getPushUrl())) &#123;</span><br><span class="line">        List&lt;Configuration&gt; configurations = configurationService.findProjectConfigurations(project.getCode(), env);</span><br><span class="line">        String json = JSON.toJSONString(configurations);</span><br><span class="line">        try &#123;</span><br><span class="line">            String data = URLEncoder.encode(json, &quot;UTF-8&quot;);</span><br><span class="line">            String result = HttpUtil.sendPost(project.getPushUrl(), &quot;data=&quot; + data);</span><br><span class="line">            if (!&quot;true&quot;.equals(result)) &#123;</span><br><span class="line">                setResultMapFailure(resultMap, &quot;推送失败，请稍后再试！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;推送配置失败&quot;, e);</span><br><span class="line">            setResultMapFailure(resultMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        setResultMapFailure(resultMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return resultMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>给自己的博客生成rss订阅源</title>
      <link href="/2017/03/25/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90rss%E8%AE%A2%E9%98%85%E6%BA%90/"/>
      <url>/2017/03/25/%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%94%9F%E6%88%90rss%E8%AE%A2%E9%98%85%E6%BA%90/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>把我的所有博客全部变成rss订阅源，以便别人订阅。</li><li>当我有博客更新时，会自定更新订阅源，或者省事一点每隔30分钟自动更新一次。</li></ol><h2 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h2><ol><li>查询所有博客。</li><li>遍历所有博客，按<code>rss规范</code>组装成xml。</li><li>把组装好的xml写入服务器某个位置，比如放在:<code>/rss/blog.xml</code></li><li>在rss阅读器中添加订阅源，url为:<code>http://cdn.kangyonggan.com/rss/blog.xml</code></li><li>订阅成功，阅读器会把所有博客缓存到本地，离线也可阅读。</li></ol><a id="more"></a><h2 id="按照rss规范组装xml"><a href="#按照rss规范组装xml" class="headerlink" title="按照rss规范组装xml"></a>按照rss规范组装xml</h2><p>使用第三方jar包<code>rsslibj</code>，它依赖<code>exml</code>,如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;rsslibj.version&gt;1.0RC2&lt;/rsslibj.version&gt;</span><br><span class="line">&lt;exml.version&gt;7.0&lt;/exml.version&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;rsslibj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;rsslibj&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;rsslibj.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;exml&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;exml&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;exml.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Channel channel = new Channel();</span><br><span class="line">channel.setTitle(&quot;朕的博客&quot;);</span><br><span class="line">channel.setLink(&quot;http://kangyonggan.com&quot;);</span><br><span class="line"></span><br><span class="line">String baseUrl = &quot;http://kangyonggan.com/#article/&quot;;</span><br><span class="line">String rssName = &quot;blog.xml&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    List&lt;Article&gt; list = articleService.findAllArticles();</span><br><span class="line">    log.info(&quot;一共&#123;&#125;篇文章&quot;, list.size());</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Article article = list.get(i);</span><br><span class="line">        Item item = new Item();</span><br><span class="line">        item.setTitle(article.getTitle());</span><br><span class="line">        item.setLink(baseUrl + article.getId());</span><br><span class="line">        item.setDcDate(article.getUpdatedTime());</span><br><span class="line">        item.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));</span><br><span class="line"></span><br><span class="line">        channel.addItem(i, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);</span><br><span class="line"></span><br><span class="line">    if (!file.exists()) &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PrintWriter writer = new PrintWriter(new FileWriter(file));</span><br><span class="line">    writer.write(channel.getFeed(&quot;rss&quot;));</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line"></span><br><span class="line">    FtpUtil.upload(rssName, &quot;rss/&quot;);</span><br><span class="line"></span><br><span class="line">    log.info(&quot;rss刷新成功&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    log.error(&quot;查询所有文章失败&quot;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有个问题，那就是<code>Item</code>不能设置发布时间，订阅后在阅读器里看不到文章的发布时间或者更新时间，所以我就从网上重新找了一个，它不去用任何jar包。</p><h2 id="解决发布时间问题"><a href="#解决发布时间问题" class="headerlink" title="解决发布时间问题"></a>解决发布时间问题</h2><h4 id="Feed-java"><a href="#Feed-java" class="headerlink" title="Feed.java:"></a><code>Feed.java</code>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.blog.model.rss;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/1/24</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class Feed &#123;</span><br><span class="line">    String title;</span><br><span class="line">    String link;</span><br><span class="line">    String description;</span><br><span class="line">    String language;</span><br><span class="line">    String copyright;</span><br><span class="line">    String pubDate;</span><br><span class="line">    List&lt;FeedMessage&gt; feedMessages = new ArrayList();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FeedMessage-java"><a href="#FeedMessage-java" class="headerlink" title="FeedMessage.java:"></a><code>FeedMessage.java</code>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.blog.model.rss;</span><br><span class="line"></span><br><span class="line">import lombok.Data;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/1/24</span><br><span class="line"> */</span><br><span class="line">@Data</span><br><span class="line">public class FeedMessage &#123;</span><br><span class="line"></span><br><span class="line">    String title;</span><br><span class="line"></span><br><span class="line">    String description;</span><br><span class="line"></span><br><span class="line">    String link;</span><br><span class="line"></span><br><span class="line">    String author;</span><br><span class="line"></span><br><span class="line">    String guid;</span><br><span class="line"></span><br><span class="line">    String pubDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RSSFeedWriter-java"><a href="#RSSFeedWriter-java" class="headerlink" title="RSSFeedWriter.java:"></a><code>RSSFeedWriter.java</code>:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.blog.biz.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.kangyonggan.blog.model.rss.Feed;</span><br><span class="line">import com.kangyonggan.blog.model.rss.FeedMessage;</span><br><span class="line"></span><br><span class="line">import javax.xml.stream.XMLEventFactory;</span><br><span class="line">import javax.xml.stream.XMLEventWriter;</span><br><span class="line">import javax.xml.stream.XMLOutputFactory;</span><br><span class="line">import javax.xml.stream.XMLStreamException;</span><br><span class="line">import javax.xml.stream.events.*;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2017/1/24</span><br><span class="line"> */</span><br><span class="line">public class RSSFeedWriter &#123;</span><br><span class="line"></span><br><span class="line">    private String outputFile;</span><br><span class="line">    private Feed feed;</span><br><span class="line"></span><br><span class="line">    public RSSFeedWriter(Feed feed, String outputFile) &#123;</span><br><span class="line">        this.feed = feed;</span><br><span class="line">        this.outputFile = outputFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void write() throws Exception &#123;</span><br><span class="line">        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();</span><br><span class="line"></span><br><span class="line">        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(new FileOutputStream(outputFile));</span><br><span class="line"></span><br><span class="line">        XMLEventFactory eventFactory = XMLEventFactory.newInstance();</span><br><span class="line">        XMLEvent end = eventFactory.createDTD(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">        // Create and write Start Tag</span><br><span class="line"></span><br><span class="line">        StartDocument startDocument = eventFactory.createStartDocument();</span><br><span class="line"></span><br><span class="line">        eventWriter.add(startDocument);</span><br><span class="line"></span><br><span class="line">        // Create open tag</span><br><span class="line">        eventWriter.add(end);</span><br><span class="line"></span><br><span class="line">        StartElement rssStart = eventFactory.createStartElement(&quot;&quot;, &quot;&quot;, &quot;rss&quot;);</span><br><span class="line">        eventWriter.add(rssStart);</span><br><span class="line">        eventWriter.add(eventFactory.createAttribute(&quot;version&quot;, &quot;2.0&quot;));</span><br><span class="line">        eventWriter.add(end);</span><br><span class="line"></span><br><span class="line">        eventWriter.add(eventFactory.createStartElement(&quot;&quot;, &quot;&quot;, &quot;channel&quot;));</span><br><span class="line">        eventWriter.add(end);</span><br><span class="line"></span><br><span class="line">        // Write the different nodes</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;title&quot;, feed.getTitle());</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;link&quot;, feed.getLink());</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;description&quot;, feed.getDescription());</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;language&quot;, feed.getLanguage());</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;copyright&quot;, feed.getCopyright());</span><br><span class="line"></span><br><span class="line">        createNode(eventWriter, &quot;pubdate&quot;, feed.getPubDate());</span><br><span class="line"></span><br><span class="line">        for (FeedMessage entry : feed.getFeedMessages()) &#123;</span><br><span class="line">            eventWriter.add(eventFactory.createStartElement(&quot;&quot;, &quot;&quot;, &quot;item&quot;));</span><br><span class="line">            eventWriter.add(end);</span><br><span class="line">            createNode(eventWriter, &quot;title&quot;, entry.getTitle());</span><br><span class="line">            createNode(eventWriter, &quot;description&quot;, entry.getDescription());</span><br><span class="line">            createNode(eventWriter, &quot;link&quot;, entry.getLink());</span><br><span class="line">            createNode(eventWriter, &quot;author&quot;, entry.getAuthor());</span><br><span class="line">            createNode(eventWriter, &quot;guid&quot;, entry.getGuid());</span><br><span class="line">            createNode(eventWriter, &quot;pubDate&quot;, entry.getPubDate());</span><br><span class="line">            eventWriter.add(end);</span><br><span class="line">            eventWriter.add(eventFactory.createEndElement(&quot;&quot;, &quot;&quot;, &quot;item&quot;));</span><br><span class="line">            eventWriter.add(end);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        eventWriter.add(end);</span><br><span class="line">        eventWriter.add(eventFactory.createEndElement(&quot;&quot;, &quot;&quot;, &quot;channel&quot;));</span><br><span class="line">        eventWriter.add(end);</span><br><span class="line">        eventWriter.add(eventFactory.createEndElement(&quot;&quot;, &quot;&quot;, &quot;rss&quot;));</span><br><span class="line"></span><br><span class="line">        eventWriter.add(end);</span><br><span class="line"></span><br><span class="line">        eventWriter.add(eventFactory.createEndDocument());</span><br><span class="line"></span><br><span class="line">        eventWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void createNode(XMLEventWriter eventWriter, String name,</span><br><span class="line"></span><br><span class="line">                            String value) throws XMLStreamException &#123;</span><br><span class="line">        XMLEventFactory eventFactory = XMLEventFactory.newInstance();</span><br><span class="line">        XMLEvent end = eventFactory.createDTD(&quot;\n&quot;);</span><br><span class="line">        XMLEvent tab = eventFactory.createDTD(&quot;\t&quot;);</span><br><span class="line">        // Create Start node</span><br><span class="line">        StartElement sElement = eventFactory.createStartElement(&quot;&quot;, &quot;&quot;, name);</span><br><span class="line">        eventWriter.add(tab);</span><br><span class="line">        eventWriter.add(sElement);</span><br><span class="line">        // Create Content</span><br><span class="line">        Characters characters = eventFactory.createCharacters(value);</span><br><span class="line">        eventWriter.add(characters);</span><br><span class="line">        // Create End node</span><br><span class="line">        EndElement eElement = eventFactory.createEndElement(&quot;&quot;, &quot;&quot;, name);</span><br><span class="line">        eventWriter.add(eElement);</span><br><span class="line">        eventWriter.add(end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Feed feed = new Feed();</span><br><span class="line">feed.setDescription(&quot;记录生活、工作和学习时的笔记心得等&quot;);</span><br><span class="line">feed.setLink(&quot;http://kangyonggan.com&quot;);</span><br><span class="line">feed.setTitle(&quot;朕的博客&quot;);</span><br><span class="line">List&lt;FeedMessage&gt; feedMessages = feed.getFeedMessages();</span><br><span class="line"></span><br><span class="line">String baseUrl = &quot;http://kangyonggan.com/#article/&quot;;</span><br><span class="line">String rssName = &quot;blog.xml&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    List&lt;Article&gt; list = articleService.findAllArticles();</span><br><span class="line">    log.info(&quot;一共&#123;&#125;篇文章&quot;, list.size());</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Article article = list.get(i);</span><br><span class="line">        FeedMessage feedMessage = new FeedMessage();</span><br><span class="line"></span><br><span class="line">        feedMessage.setTitle(article.getTitle());</span><br><span class="line">        feedMessage.setLink(baseUrl + article.getId());</span><br><span class="line">        feedMessage.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));</span><br><span class="line">        Date date = article.getUpdatedTime();</span><br><span class="line">        date.setTime(date.getTime() - 8 * 60 * 60 * 1000);</span><br><span class="line">        feedMessage.setPubDate(format.format(date));</span><br><span class="line">        feedMessages.add(feedMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);</span><br><span class="line"></span><br><span class="line">    if (!file.exists()) &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new RSSFeedWriter(feed, file.getPath()).write();</span><br><span class="line"></span><br><span class="line">    FtpUtil.upload(rssName, &quot;rss/&quot;);</span><br><span class="line"></span><br><span class="line">    log.info(&quot;rss刷新成功&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    log.error(&quot;查询所有文章失败&quot;, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附rss订阅源和订阅效果"><a href="#附rss订阅源和订阅效果" class="headerlink" title="附rss订阅源和订阅效果"></a>附rss订阅源和订阅效果</h2><p><img src="http://cdn.kangyonggan.com/upload/20170125103534094.png" alt="rss"></p><p><img src="http://cdn.kangyonggan.com/upload/20170125103943826.png" alt="reeder"></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用log4j2的SMTPAppender发送邮件报警</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8log4j2%E7%9A%84SMTPAppender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8log4j2%E7%9A%84SMTPAppender%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%8A%A5%E8%AD%A6/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>当项目中有<code>报错时</code>，要能<code>自动的</code>、<code>及时的</code>发邮件通知<code>指定人员</code>。</li><li>邮件中的错误日志要全面，最好能把当前线程的全部日志输出，不论日志级别。</li><li>仅当日志为error级别时，才发邮件通知。</li><li>可以配置邮件抄送给其他人。</li></ol><a id="more"></a><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;log4j2.api.version&gt;2.5&lt;/log4j2.api.version&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--Log4j2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置log4j2-xml"><a href="#配置log4j2-xml" class="headerlink" title="配置log4j2.xml"></a>配置<code>log4j2.xml</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;LOG_HOME&quot;&gt;/Users/kyg/logs/cms&lt;/property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;AllFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/all.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/error.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;SMTP name=&quot;Mail&quot; subject=&quot;内容管理系统 - 报警通知&quot; to=&quot;kangyonggan@gmail.com&quot; from=&quot;kangyg2017@163.com&quot;</span><br><span class="line">              smtpHost=&quot;smtp.163.com&quot; smtpUsername=&quot;kangyg2017@163.com&quot; smtpPassword=&quot;xxxxxxxx&quot; bufferSize=&quot;50&quot; &gt;</span><br><span class="line">        &lt;/SMTP&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncAll&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AllFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncError&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ErrorFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Mail&quot; &gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure><p>上面的配置中，关于报警的配置有两点:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AppenderRef ref=&quot;Mail&quot; &gt;&lt;/AppenderRef&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;SMTP name=&quot;Mail&quot; subject=&quot;内容管理系统 - 报警通知&quot; to=&quot;kangyonggan@gmail.com&quot; from=&quot;kangyg2017@163.com&quot;</span><br><span class="line">      smtpHost=&quot;smtp.163.com&quot; smtpUsername=&quot;kangyg2017@163.com&quot; smtpPassword=&quot;xxxxxxxx&quot; bufferSize=&quot;50&quot; &gt;</span><br><span class="line">&lt;/SMTP&gt;</span><br></pre></td></tr></table></figure><h2 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h2><ul><li>异步输出日志，不会影响主线程性能</li><li>error日志单独输出到error.log文件</li><li>all.log包含所有级别的日志</li><li>每天会备份旧的日志文件，产生新的日志文件</li><li>如果一天之中有日志文件超出大小限制(上面配的500M)，会存档当前文件，另外再创建一个新的文件</li><li>日志文件只保存近期的（上面配置的30天）</li></ul><blockquote><p>温馨提示：由于是个人项目，所以没配置多个邮件接收者，如有需要，请参考<a href="http://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender" target="_blank" rel="noopener">官方文档</a></p></blockquote><h2 id="五、收到的邮件截图"><a href="#五、收到的邮件截图" class="headerlink" title="五、收到的邮件截图"></a>五、收到的邮件截图</h2><p><img src="/uploads/20170123163536603.png" alt="mail"><br><img src="/uploads/20170123163703359.png" alt="mail"><br><img src="/uploads/20170123163703945.png" alt="mail"><br><img src="/uploads/20170123163704569.png" alt="mail"></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>maven一键生成cms项目</title>
      <link href="/2017/03/25/maven%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90cms%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017/03/25/maven%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90cms%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h1 id="cms系统原型"><a href="#cms系统原型" class="headerlink" title="cms系统原型"></a>cms系统原型</h1><p>由于经常需要搭建一些类似cms这样的系统，如果每次都是手动创建项目，创建模块，拷贝改，无疑是蛋疼的。<br>所以我需要做一个项目原型，每次需要搭建类似cms系统的时候，只需要一键即可生成！</p><a id="more"></a><h2 id="系统简介"><a href="#系统简介" class="headerlink" title="系统简介"></a>系统简介</h2><p>系统结构如下:</p><p><img src="/uploads/cms_1.png" alt="系统结构"></p><h3 id="各个模块之间的依赖关系"><a href="#各个模块之间的依赖关系" class="headerlink" title="各个模块之间的依赖关系"></a>各个模块之间的依赖关系</h3><ul><li><code>web模块</code> 依赖 <code>biz模块</code></li><li><code>biz模块</code> 依赖 <code>service模块</code>和<code>dao模块</code></li><li><code>service模块</code> 依赖 <code>model模块</code></li><li><code>dao模块</code> 依赖 <code>model模块</code></li></ul><h3 id="主要技术和框架"><a href="#主要技术和框架" class="headerlink" title="主要技术和框架"></a>主要技术和框架</h3><ul><li>Spring</li><li>SpringMVC</li><li>Mybatis</li><li>autoconfig</li><li>mbg</li><li>shiro</li><li>redis</li><li>dubbo</li><li>mysql</li><li>freemarker</li><li>ace admin ajax</li><li>ftp</li><li>log4j2</li><li>fastjson</li><li>lombok</li></ul><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>由于这只是一个项目原型，以后可能会用于各大场景，所以下面的功能只是一些最基础的。</p><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ol><li>登录</li><li>注册</li><li>找回密码</li></ol><h4 id="工作台"><a href="#工作台" class="headerlink" title="工作台"></a>工作台</h4><ol><li>系统<ul><li>用户管理</li><li>角色管理</li><li>菜单管理</li></ul></li><li>内容<ul><li>数据字典</li><li>缓存管理</li><li>内容管理</li></ul></li><li>我的<ul><li>个人资料</li></ul></li></ol><h2 id="原型截图"><a href="#原型截图" class="headerlink" title="原型截图"></a>原型截图</h2><p><img src="/uploads/cms_login.png" alt="登录界面"></p><p><img src="/uploads/cms_register.png" alt="注册界面"></p><p><img src="/uploads/cms_reset.png" alt="找回密码界面"></p><p><img src="/uploads/cms_profile.png" alt="个人资料界面"></p><p><img src="/uploads/cms_menu.png" alt="菜单管理界面"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>拉取项目到本地 <code>git clone https://github.com/kangyonggan/cms-archetype.git</code></li><li>编译并安装 <code>mvn clean install</code></li><li>一键生成项目 <code>mvn archetype:generate -DarchetypeGroupId=com.kangyonggan.archetype -DarchetypeArtifactId=cms-archetype -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=local</code></li></ol>]]></content>
      
      <categories>
          
          <category> 系统架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows防火墙导致ftp文件上传异常</title>
      <link href="/2017/03/25/windows%E9%98%B2%E7%81%AB%E5%A2%99%E5%AF%BC%E8%87%B4ftp%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8/"/>
      <url>/2017/03/25/windows%E9%98%B2%E7%81%AB%E5%A2%99%E5%AF%BC%E8%87%B4ftp%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>在win7系统下运行web项目，发现ftp文件上传异常，但是在linux下是好的，win7下报错信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[INFO ] 2017-01-21 21:24:03.388 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:53] - 连接文件服务器成功, 上传路径path:upload/</span><br><span class="line">[ERROR] 2017-01-21 21:24:22.899 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:75] - 文件上传异常</span><br><span class="line">java.net.SocketException: Software caused connection abort: socket write error</span><br><span class="line">oat java.net.SocketOutputStream.socketWrite0(Native Method) ~[?:1.8.0_111]</span><br><span class="line">oat java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[?:1.8.0_111]</span><br><span class="line">oat java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[?:1.8.0_111]</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><p>原因是win7防火墙的问题，关闭防火墙后一切就正常了。</p><p><img src="/uploads/20170121214431475.png" alt="关闭防火墙"></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用ace admin搭建单页面网站</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8ace%20admin%E6%90%AD%E5%BB%BA%E5%8D%95%E9%A1%B5%E9%9D%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8ace%20admin%E6%90%AD%E5%BB%BA%E5%8D%95%E9%A1%B5%E9%9D%A2%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul><li>Ace Admin <a href="/uploads/ace.zip">ace.zip</a></li><li>在线实例（已经没了） <a href="http://kangyonggan.com">http://kangyonggan.com</a></li><li>Github代码（已经没了） <a href="https://github.com/kangyonggan/blog.git" target="_blank" rel="noopener">https://github.com/kangyonggan/blog.git</a></li></ul><blockquote><p>网上很少有ace admin相关的资料，如需使用和学习，只能去看源代码…</p></blockquote><a id="more"></a><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>做出一个类似cms后台管理系统的单页面网站，效果如下:</p><p><img src="/uploads/20170109223706060.png" alt="加载中"></p><p><img src="/uploads/20170109223708522.png" alt="地址"> </p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>由于关于ace admin的文档很少，尤其是ace admin ajax的！所以这就要我们自己来读源代码，看实例来学习了。</p><h4 id="搭建本地demo"><a href="#搭建本地demo" class="headerlink" title="搭建本地demo"></a>搭建本地demo</h4><p>下载ace.zip并解压<br><img src="/uploads/20170109223701593.png" alt="下载"> </p><p>拷贝到tomcat webapps目录下</p><p><img src="/uploads/20170109223709211.png" alt="拷贝到tomcat"> </p><p>启动tomcat后，打开浏览器即可查看demo</p><p><img src="/uploads/20170109223706510.png" alt="查看demo"> </p><p>可以先进入<code>Ajax Demo Pages</code>提前感受一下单页面的好处。</p><h4 id="拷贝源码-修改"><a href="#拷贝源码-修改" class="headerlink" title="拷贝源码+修改"></a>拷贝源码+修改</h4><p>查看源码：右键–&gt;查看源代码</p><p><img src="/uploads/20170109223707758.png" alt="源码"></p><p>把ace的一些核心css和js拷贝到你的html中，由于我们是要做单页面，从<code>Ajax Demo Pages</code>中可以看出，关键词是<code>ajax</code><br>所以你需要格外的关注源码中出现的<code>ajax</code>,经过搜索后发现有用的是下面两点</p><p><img src="/uploads/20170109223702751.png" alt="ajax"><br><img src="/uploads/20170109223704068.png" alt="ajax"></p><p>点开<code>ace.ajax-content.js</code>, 如下：</p><p><img src="/uploads/20170109223702338.png" alt="ajax-content"></p><p>发现他是一个典型的jquery插件（不会jquery插件的看着会比较难，最好先去恶补一下），大致看一下这个插件，会发现它实现单页面的核心代码是:</p><p><img src="/uploads/20170109223704715.png" alt="geturl"></p><p>当用户点击超链接或者按钮时，插件代替你发起异步请求，服务器返回一个“页面”，插件拿到页面后，用下面红框框的核心代码把内容局部清空并替换，实现类似iframe的效果，给人一种我是单页面的错觉</p><p><img src="/uploads/20170109223707144.png" alt="replace"></p><p>对源码有个大致的了解就行，下面就可以动手搭建了。</p><h3 id="解读源码"><a href="#解读源码" class="headerlink" title="解读源码"></a>解读源码</h3><p>基础web环境搭建过程不再演示，我使用的freemarker模板，下面是我的html布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#assign</span> <span class="attr">ctx</span>=<span class="string">"$&#123;(rca.contextPath)!''&#125;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/app/images/favicon.ico"</span> <span class="attr">type</span>=<span class="string">"image/x-icon"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bootstrap &amp; fontawesome --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/font-awesome.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/jquery.gritter.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- page specific plugin styles --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- text fonts --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/ace-fonts.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#--skin--</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/ace-skins.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ace styles --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/css/ace.min.css"</span> <span class="attr">class</span>=<span class="string">"ace-main-stylesheet"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"main-ace-style"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--[if lte IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="hidden ajax-append-link" rel="stylesheet" href="$&#123;ctx&#125;/static/ace/dist/css/ace-part2.min.css" class="ace-main-stylesheet"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--[if lte IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="hidden ajax-append-link" rel="stylesheet" href="$&#123;ctx&#125;/static/ace/dist/css/ace-ie.min.css"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden ajax-append-link"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;ctx&#125;/static/app/css/app.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="$&#123;ctx&#125;/static/ace/dist/js/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="$&#123;ctx&#125;/static/ace/dist/js/respond.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@block</span> <span class="attr">name</span>=<span class="string">"app-style"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"skin-3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "<span class="attr">navbar.ftl</span>"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-container"</span> <span class="attr">id</span>=<span class="string">"main-container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#if</span> <span class="attr">hasSidebar</span>?? &amp;&amp; <span class="attr">hasSidebar</span>==<span class="string">true</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">#include</span> "<span class="attr">sidebar.ftl</span>"/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-content-inner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">#if</span> <span class="attr">home_name</span>?? &amp;&amp; <span class="attr">home_name</span>!=<span class="string">''</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"breadcrumbs"</span> <span class="attr">id</span>=<span class="string">"breadcrumbs"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"ace-icon fa fa-tachometer home-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-url</span>=<span class="string">"index"</span> <span class="attr">href</span>=<span class="string">"#index"</span>&gt;</span>$&#123;home_name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">#if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content-area"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "<span class="attr">footer.ftl</span>"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "<span class="attr">modal.ftl</span>"/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">id</span>=<span class="string">"btn-scroll-up"</span> <span class="attr">class</span>=<span class="string">"btn-scroll-up btn btn-sm btn-inverse"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"ace-icon fa fa-angle-double-up icon-only bigger-110"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">var ctx = '$&#123;ctx&#125;';</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/libs/jquery/jquery.bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/jquery.gritter.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/ace-extra.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/ace-elements.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/ace/dist/js/ace.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;ctx&#125;/static/app/js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">@block</span> <span class="attr">name</span>=<span class="string">"app-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>navbar.flt</code> <code>sidebar.ftl</code> <code>footer.ftl</code> 都是demo中的。<br>如果之前使用的就是freemarker+ace admin，那么你要重点关注下面两处代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-content-area"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心js<code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步加载界面</span></span><br><span class="line">    <span class="keyword">var</span> $ajaxContent = $(<span class="string">".page-content-area"</span>);</span><br><span class="line">    $ajaxContent.ace_ajax(&#123;</span><br><span class="line">        <span class="string">'default_url'</span>: <span class="string">'#index'</span>,</span><br><span class="line">        <span class="string">'content_url'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">hash</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.location.origin + <span class="built_in">window</span>.location.pathname + <span class="string">"/"</span> + hash;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'update_active'</span>: updateMenuActive,</span><br><span class="line">        <span class="string">'update_breadcrumbs'</span>: updateBreadcrumbs,</span><br><span class="line">        <span class="string">'update_title'</span>: updateTitle,</span><br><span class="line">        <span class="string">'loading_text'</span>: <span class="string">'&lt;span class="loading"&gt;正在加载, 请稍等...&lt;/span&gt;'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听异步加载失败事件</span></span><br><span class="line">    $ajaxContent.on(<span class="string">"ajaxloaderror"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = ctx + <span class="string">'/#500'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新菜单激活状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateMenuActive</span>(<span class="params">hash</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  当前菜单</span></span><br><span class="line">    <span class="keyword">var</span> $menu = $($(<span class="string">'a[data-url="'</span> + hash + <span class="string">'"]'</span>)[<span class="number">0</span>]).parent(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有菜单</span></span><br><span class="line">    <span class="keyword">var</span> $all_menus = $menu.parents(<span class="string">"ul.nav-list"</span>).find(<span class="string">"li"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除所有菜单状态</span></span><br><span class="line">    $all_menus.removeClass(<span class="string">"open"</span>);</span><br><span class="line">    $all_menus.removeClass(<span class="string">"active"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父菜单</span></span><br><span class="line">    <span class="keyword">var</span> $parent = $menu.parents(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($parent.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        $parent.addClass(<span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $menu.addClass(<span class="string">"active"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新面包屑</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBreadcrumbs</span>(<span class="params">hash</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $menu = $(<span class="string">'a[data-url="'</span> + hash + <span class="string">'"]'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这坨代码摘自ace.ajax-content.js</span></span><br><span class="line">    <span class="keyword">var</span> $breadcrumbs = $(<span class="string">'.breadcrumb'</span>);</span><br><span class="line">    <span class="keyword">if</span> ($breadcrumbs.length &gt; <span class="number">0</span> &amp;&amp; $breadcrumbs.is(<span class="string">':visible'</span>)) &#123;</span><br><span class="line">        $breadcrumbs.find(<span class="string">'&gt; li:not(:first-child)'</span>).remove();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        $menu.parents(<span class="string">'.nav li'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $link = $(<span class="keyword">this</span>).find(<span class="string">'&gt; a'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> $link_clone = $link.clone();</span><br><span class="line">            $link_clone.find(<span class="string">'i,.fa,.glyphicon,.ace-icon,.menu-icon,.badge,.label'</span>).remove();</span><br><span class="line">            <span class="keyword">var</span> text = $link_clone.text();</span><br><span class="line">            $link_clone.remove();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> href = $link.attr(<span class="string">'href'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> li = $(<span class="string">'&lt;li class="active"&gt;&lt;/li&gt;'</span>).appendTo($breadcrumbs);</span><br><span class="line">                li.text(text);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> li = $(<span class="string">'&lt;li&gt;&lt;a &gt;&lt;/a&gt;&lt;/li&gt;'</span>).insertAfter($breadcrumbs.find(<span class="string">'&gt; li:first-child'</span>));</span><br><span class="line">                li.find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>, href).text(text);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新标题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTitle</span>(<span class="params">hash</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $menu = $($(<span class="string">'a[data-url="'</span> + hash + <span class="string">'"]'</span>)[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> title = $.trim($menu.text());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (title != <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param hash</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateState</span>(<span class="params">hash</span>) </span>&#123;</span><br><span class="line">    updateBreadcrumbs(hash);</span><br><span class="line">    updateMenuActive(hash);</span><br><span class="line">    updateTitle(hash);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你对jquery插件了解的不多，估计很难去使用<code>ace_ajax</code>，因为网上和demo中都没有使用教程，我这是根据<code>ace.ajax-content.js</code>源代码中的jquery插件反推出来的插件使用方法。</p><p>在插件源代码的最后暴露出插件有哪些公共属性和方法可被你覆写和调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$.fn.aceAjax = $.fn.ace_ajax = <span class="function"><span class="keyword">function</span> (<span class="params">option, value, value2, value3</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> method_call;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> $set = <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">var</span> data = $<span class="keyword">this</span>.data(<span class="string">'ace_ajax'</span>);</span><br><span class="line"> <span class="keyword">var</span> options = <span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!data) $<span class="keyword">this</span>.data(<span class="string">'ace_ajax'</span>, (data = <span class="keyword">new</span> AceAjax(<span class="keyword">this</span>, options)));</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> option === <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> data[option] === <span class="string">'function'</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span>(value3 != <span class="literal">undefined</span>) method_call = data[option](value, value2, value3);</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(value2 != <span class="literal">undefined</span>) method_call = data[option](value, value2);</span><br><span class="line"> <span class="keyword">else</span> method_call = data[option](value);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> (method_call === <span class="literal">undefined</span>) ? $set : method_call;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.fn.aceAjax.defaults = $.fn.ace_ajax.defaults = &#123;</span><br><span class="line"> content_url: <span class="literal">false</span>,</span><br><span class="line"> default_url: <span class="literal">false</span>,</span><br><span class="line"> loading_icon: <span class="string">'fa fa-spin fa-spinner fa-2x orange'</span>,</span><br><span class="line"> loading_text: <span class="string">''</span>,</span><br><span class="line"> loading_overlay: <span class="literal">null</span>,</span><br><span class="line"> update_breadcrumbs: <span class="literal">true</span>,</span><br><span class="line"> update_title: <span class="literal">true</span>,</span><br><span class="line"> update_active: <span class="literal">true</span>,</span><br><span class="line"> close_active: <span class="literal">false</span>,</span><br><span class="line"> max_load_wait: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如<code>loading_text</code>,看名称就大概猜出是在异步加载界面时，给用户的提示信息，例如<code>正在加载, 请稍等...</code>， 当然这只是大概的猜测，我们要真想使用它，肯定要读相应的源代码并且动手去验证一下。</p><p>过程中难免会遇到各种问题，只要耐心解读源码，一定会攻破的，我也遇到了好多坑，昨天花了一整天的时间才把我原本的博客给变成了单页面的，这主要是因为我的聪明才智和之前就使用的ace admin。</p><blockquote><p>温馨提示: <code>ace.ajax-content.js</code>文件被包含在了<code>ace.min.js</code>中，因此只需要引入<code>ace.min.js</code>即可</p></blockquote>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL读写分离的实现</title>
      <link href="/2017/03/25/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2017/03/25/MySQL%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol><li>主库:192.168.2.108:3306/kyg</li><li>从库1:192.168.2.113:3306/kyg</li><li>从库2:192.168.2.103:3306/kyg</li></ol><a id="more"></a><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ol><li>写数据时使用主库</li><li>读数据时使用从库</li></ol><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>使用MySQL自身提供的一个驱动<code>com.mysql.jdbc.ReplicationDriver</code>来实现读写分离。<br>如果一个方法是只读的，那么ReplicationDriver就会为你选择从库读取数据，反之就会选择主库进行读写。<br>可以结合SpringAop配置事物的读写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:advice id=&quot;transactionAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;remove*&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tx:method name=&quot;search*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">        &lt;tx:method name=&quot;*&quot; read-only=&quot;true&quot; propagation=&quot;REQUIRED&quot;&gt;&lt;/tx:method&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><p>jdbc的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog.jdbc.driver     = com.mysql.jdbc.Driver</span><br><span class="line">blog.jdbc.password   = abc</span><br><span class="line">blog.jdbc.url        = jdbc:mysql:replication://192.168.2.108:3306,192.168.2.113:3306,192.168.2.103:3306/kyg</span><br><span class="line">blog.jdbc.username   = abc</span><br></pre></td></tr></table></figure><h3 id="观察日志"><a href="#观察日志" class="headerlink" title="观察日志"></a>观察日志</h3><p><img src="/uploads/20170107152930664.png" alt="走主库"></p><p><img src="/uploads/20170107152931258.png" alt="走从库"></p>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx做负载均衡遇到session共享的问题</title>
      <link href="/2017/03/25/nginx%E5%81%9A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%81%87%E5%88%B0session%E5%85%B1%E4%BA%AB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/03/25/nginx%E5%81%9A%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%81%87%E5%88%B0session%E5%85%B1%E4%BA%AB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="常见的解决方案有"><a href="#常见的解决方案有" class="headerlink" title="常见的解决方案有:"></a>常见的解决方案有:</h3><h4 id="不使用session，换用cookie"><a href="#不使用session，换用cookie" class="headerlink" title="不使用session，换用cookie"></a>不使用session，换用cookie</h4><ul><li>简单方便对服务器无压力</li><li>如果客户端把cookie禁掉了的话，那么session就无法同步了</li><li>cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的</li></ul><h4 id="session存在数据库"><a href="#session存在数据库" class="headerlink" title="session存在数据库"></a>session存在数据库</h4><ul><li>会加大数据库的IO，增加数据库的负担</li><li>数据库读写速度较慢，不利于session的适时同步</li></ul><a id="more"></a><h4 id="session存在memcache或者Redis中"><a href="#session存在memcache或者Redis中" class="headerlink" title="session存在memcache或者Redis中"></a>session存在memcache或者Redis中</h4><ul><li>不会加大数据库的负担</li><li>并且安全性比用cookie大大的提高</li><li>把session放到内存里面，比从文件中读取要快很多</li><li>但偶尔会因网络较慢而出现掉线</li></ul><h4 id="使用nginx中的ip-hash技术"><a href="#使用nginx中的ip-hash技术" class="headerlink" title="使用nginx中的ip_hash技术"></a>使用nginx中的ip_hash技术</h4><ul><li>能够将某个ip的请求定向到同一台后端</li><li>nginx不是最前端的服务器的时候，就跪了，因为转发到nginx的ip是不变的</li><li>nginx不是最后端的服务器的时候，也得跪</li></ul><blockquote><p>我个人的情况比较适合选择方案3+4</p></blockquote><h3 id="配置如下"><a href="#配置如下" class="headerlink" title="配置如下"></a>配置如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream kyg.com &#123;</span><br><span class="line">        server  42.196.156.22:8088;</span><br><span class="line">        server  42.196.156.22:18088;</span><br><span class="line">        server  42.196.156.22:28088;</span><br><span class="line">        ip_hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                # try_files $uri $uri/ =404;</span><br><span class="line">                # Uncomment to enable naxsi on this location</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">                proxy_pass http://kyg.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 设定访问静态文件直接读取不经过tomcat</span><br><span class="line">        location ^~ /static/ &#123;</span><br><span class="line">                proxy_pass http://kyg.com;</span><br><span class="line">                root /WEB-INF/static/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在<code>upstream</code>下面加了<code>ip_hash;</code>配置</p><blockquote><p>集群在设计之初最好设计成无状态的</p></blockquote>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx负载均衡的配置</title>
      <link href="/2017/03/25/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol><li>机器1的ip:10.10.10.248, tomcat端口:8088</li><li>机器2的ip:10.10.10.166, tomcat端口:8088</li><li>nginx所在机器ip:10.10.10.248, 监听端口80</li></ol><a id="more"></a><h3 id="启动两个tomcat，配置nginx"><a href="#启动两个tomcat，配置nginx" class="headerlink" title="启动两个tomcat，配置nginx"></a>启动两个tomcat，配置nginx</h3><p>我使用的是jenkins启动的tomcat，一键部署成功, 效果如下:</p><p><img src="/uploads/20170101200131662.png" alt="tomcat-166.png"></p><p><img src="/uploads/20170101200131669.png" alt="tomcat-248.png"></p><p>我的nginx是部署在248服务器上，监听的是80端口， 现在想做的就是:<br>在访问<a href="http://10.10.10.248:80的时候，nginx把所有的请求均等转发到10.10.10.248:8088和10.10.10.166:8088" target="_blank" rel="noopener">http://10.10.10.248:80的时候，nginx把所有的请求均等转发到10.10.10.248:8088和10.10.10.166:8088</a></p><p>nginx配置<code>/etc/nginx/sites-available/default</code>如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">upstream kyg.com &#123;</span><br><span class="line">       server  10.10.10.248:8088;</span><br><span class="line">       server  10.10.10.166:8088;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                # try_files $uri $uri/ =404;</span><br><span class="line">                # Uncomment to enable naxsi on this location</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">                proxy_pass http://kyg.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 设定访问静态文件直接读取不经过tomcat</span><br><span class="line">        location ^~ /static/ &#123;</span><br><span class="line">                proxy_pass http://kyg.com;</span><br><span class="line">                root /WEB-INF/static/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改nginx配置后需要重新加载配置<code>sudo nginx -s reload</code></p><h3 id="查看日志，分析结果"><a href="#查看日志，分析结果" class="headerlink" title="查看日志，分析结果"></a>查看日志，分析结果</h3><ol><li>分别在两台服务器上<code>tail -f /home/kyg/logs/blog/all.log</code>  </li><li>然后访问<a href="http://10.10.10.248" target="_blank" rel="noopener">http://10.10.10.248</a>  </li><li>观察哪台服务器会刷日志</li><li>再次访问<a href="http://10.10.10.248" target="_blank" rel="noopener">http://10.10.10.248</a></li><li>观察哪台服务器会刷日志</li><li>重复访问观察…</li></ol><p><img src="/uploads/20170101205501760.png" alt="log"></p><p>发现nginx会把所有的请求均等的（发给你一次发给我一次）转发到两台服务器, 当然你也可以配置权重，让某台服务分担的压力小一点，或者动态负载均衡等。</p><h3 id="kill其中一个tomcat"><a href="#kill其中一个tomcat" class="headerlink" title="kill其中一个tomcat"></a>kill其中一个tomcat</h3><p>我现在把166服务器kill了，在访问并观察日志, 结果：</p><ol><li>网站仍然可以正常访问</li><li>所有的访问全部转发到248服务器</li></ol><h3 id="分布式服务需要解决的几个问题"><a href="#分布式服务需要解决的几个问题" class="headerlink" title="分布式服务需要解决的几个问题"></a>分布式服务需要解决的几个问题</h3><ol><li>会话共享，请参考我的另一篇博客<a href="http://kangyonggan.com#article/35">shiro集成redis实现session集群共享</a></li><li>文件共享, 请参考我的另一篇博客<a href="http://kangyonggan.com#article/22">ubuntu下配置ftp服务器</a></li></ol>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL5.6主从复制的配置</title>
      <link href="/2017/03/25/MySQL5-6%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/MySQL5-6%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><ol><li>主库机器IP: <code>10.10.10.248</code></li><li>从库机器IP: <code>10.10.10.166</code></li><li>数据库版本: <code>Mysql 5.6</code></li><li>操作系统: <code>Ubuntu 14.04</code></li></ol><a id="more"></a><h3 id="配置主库"><a href="#配置主库" class="headerlink" title="配置主库"></a>配置主库</h3><h4 id="修改-etc-mysql-my-cfg配置，在-mysqld-下面添加："><a href="#修改-etc-mysql-my-cfg配置，在-mysqld-下面添加：" class="headerlink" title="修改/etc/mysql/my.cfg配置，在[mysqld]下面添加："></a>修改<code>/etc/mysql/my.cfg</code>配置，在<code>[mysqld]</code>下面添加：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 启动二进制文件</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"># 服务器ID</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"># 要同步的数据库(多个可重复指定)</span><br><span class="line">#binlog-do-db=api</span><br><span class="line">#binlog-do-db=blog</span><br><span class="line"></span><br><span class="line"># 不要同步的数据库</span><br><span class="line">#replicate-ignore-db=test</span><br></pre></td></tr></table></figure><p>保存后重启mysql: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h4 id="创建一个用户，并授权给从服务器"><a href="#创建一个用户，并授权给从服务器" class="headerlink" title="创建一个用户，并授权给从服务器"></a>创建一个用户，并授权给从服务器</h4><p>登录mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>创建用户<code>kyg</code>并授权给从服务器:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to &apos;kyg&apos;@&apos;10.10.10.166&apos; identified by &apos;kyg&apos;;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.kangyonggan.com/upload/20170101145536544.png" alt="master"></p><p>最后别忘了刷新权限:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h4 id="查看主库状态"><a href="#查看主库状态" class="headerlink" title="查看主库状态"></a>查看主库状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>记录下<code>File</code>和<code>Position</code>的值，后面配置从库时会用到</p><p><img src="http://cdn.kangyonggan.com/upload/20170101145208095.png" alt="master-status"></p><h3 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h3><h4 id="修改-etc-mysql-my-cfg配置，在-mysqld-下面添加：-1"><a href="#修改-etc-mysql-my-cfg配置，在-mysqld-下面添加：-1" class="headerlink" title="修改/etc/mysql/my.cfg配置，在[mysqld]下面添加："></a>修改<code>/etc/mysql/my.cfg</code>配置，在<code>[mysqld]</code>下面添加：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从库ID</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><p>保存后重启mysql:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h3 id="登录mysql，并配置相关参数"><a href="#登录mysql，并配置相关参数" class="headerlink" title="登录mysql，并配置相关参数:"></a>登录mysql，并配置相关参数:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">change master to  </span><br><span class="line">master_host = &apos;10.10.10.248&apos;,  </span><br><span class="line">master_user = &apos;kyg&apos;,  </span><br><span class="line">master_password = &apos;kyg&apos;,  </span><br><span class="line">master_log_file = &apos;mysql-bin.000004&apos;,  </span><br><span class="line">master_log_pos = 120;</span><br></pre></td></tr></table></figure><p>查看从库状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p>会发现从库还没开启复制</p><p><img src="http://cdn.kangyonggan.com/upload/20170101145456162.png" alt="slave-status1"></p><p>这时候就需要开启从库的复制功能<code>start slave;</code></p><p><img src="http://cdn.kangyonggan.com/upload/20170101145208097.png" alt="slave-status2"></p><p>上面的截图再往下滚动， 可能会看见报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error connecting to master &apos;kyg@10.10.10.248:3306&apos; - retry-time: 60  retries: 7</span><br></pre></td></tr></table></figure><p>这是由于主库配置了<code>bind-address:127.0.0.1</code>, 为了简单，我直接把这一行配置注释了(有安全隐患)</p><p>停止从库的复制功能:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="在主库创建一个数据库blog"><a href="#在主库创建一个数据库blog" class="headerlink" title="在主库创建一个数据库blog"></a>在主库创建一个数据库<code>blog</code></h3><p>然后在从库中查看所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.kangyonggan.com/upload/20170101145208096.png" alt="show-db"></p><p>会发现从库从主库中复制了一个数据库, 实验已经成功，其他CRUD请自行实验</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在ubuntu14.04下安装nginx服务器</title>
      <link href="/2017/03/25/%E5%9C%A8ubuntu14-04%E4%B8%8B%E5%AE%89%E8%A3%85nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/03/25/%E5%9C%A8ubuntu14-04%E4%B8%8B%E5%AE%89%E8%A3%85nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>安装完成后打开浏览器输入<code>http://localhost</code>, 看到下图代表安装成功:</p><p><img src="/uploads/20170101125316443.png" alt="nginx"></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>启动: <code>nginx -c /etc/nginx/nginx.conf</code></li><li>停止: <code>nginx -s stop</code></li><li>重新加载（配置）: <code>nginx -s reload</code></li><li>重新打开日志文件: <code>nginx -s reopen</code></li></ol><h3 id="动静分离反向代理配置"><a href="#动静分离反向代理配置" class="headerlink" title="动静分离反向代理配置"></a>动静分离反向代理配置</h3><p>修改<code>/etc/nginx/sites-available/default</code>配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/</span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                # try_files $uri $uri/ =404;</span><br><span class="line">                # Uncomment to enable naxsi on this location</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">                proxy_pass http://localhost:8088;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 设定访问静态文件直接读取不经过tomcat</span><br><span class="line">        location ^~ /static/ &#123;</span><br><span class="line">                proxy_pass http://localhost:8088;</span><br><span class="line">                root /WEB-INF/static/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下杀死一个进程的常用手段</title>
      <link href="/2017/03/25/linux%E4%B8%8B%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%B8%B8%E7%94%A8%E6%89%8B%E6%AE%B5/"/>
      <url>/2017/03/25/linux%E4%B8%8B%E6%9D%80%E6%AD%BB%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%B8%B8%E7%94%A8%E6%89%8B%E6%AE%B5/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis-server | cut -c 9-15 | xargs kill -9</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.04从命令行启动</title>
      <link href="/2017/03/25/Ubuntu14-04%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8/"/>
      <url>/2017/03/25/Ubuntu14-04%E4%BB%8E%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h3 id="修改配置-etc-default-grub"><a href="#修改配置-etc-default-grub" class="headerlink" title="修改配置 /etc/default/grub"></a>修改配置 /etc/default/grub</h3><ul><li>注释此行：<code>#GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash&quot;</code></li><li><code>GRUB_CMDLINE_LINUX=&quot;&quot;</code> 改为 <code>GRUB_CMDLINE_LINUX=&quot;text&quot;</code></li><li><code>#GRUB_TERMINAL=console</code> 的注释干掉</li></ul><h3 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>不出意外会从命令行启动， 意外会发生在ubuntu16.04上</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.04盒盖不休眠</title>
      <link href="/2017/03/25/Ubuntu14-04%E7%9B%92%E7%9B%96%E4%B8%8D%E4%BC%91%E7%9C%A0/"/>
      <url>/2017/03/25/Ubuntu14-04%E7%9B%92%E7%9B%96%E4%B8%8D%E4%BC%91%E7%9C%A0/</url>
      <content type="html"><![CDATA[<h3 id="修改配置-etc-systemd-logind-conf"><a href="#修改配置-etc-systemd-logind-conf" class="headerlink" title="修改配置 /etc/systemd/logind.conf"></a>修改配置 /etc/systemd/logind.conf</h3><p>然后将其中的：<code>#HandleLidSwitch=suspend</code> 改成： <code>HandleLidSwitch=ignore</code></p><h3 id="然后重启服务："><a href="#然后重启服务：" class="headerlink" title="然后重启服务："></a>然后重启服务：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo restart systemd-logind</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shiro集成redis实现session集群共享</title>
      <link href="/2017/03/25/shiro%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0session%E9%9B%86%E7%BE%A4%E5%85%B1%E4%BA%AB/"/>
      <url>/2017/03/25/shiro%E9%9B%86%E6%88%90redis%E5%AE%9E%E7%8E%B0session%E9%9B%86%E7%BE%A4%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>session在tomcat集群中共享（单点登录）</li><li>tomcat重启后会话不丢失</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>覆写<code>EnterpriseCacheSessionDAO</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kangyonggan.blog.web.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kangyonggan.api.common.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kangyonggan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2016/12/31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEnterpriseCacheSessionDAO</span> <span class="keyword">extends</span> <span class="title">EnterpriseCacheSessionDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建session，保存到redis数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        Serializable sessionId = <span class="keyword">super</span>.doCreate(session);</span><br><span class="line">        redisService.set(sessionId.toString(), session);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先从缓存中获取session，如果没有再去数据库中获取</span></span><br><span class="line">        Session session = <span class="keyword">super</span>.doReadSession(sessionId);</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">            session = (Session) redisService.get(sessionId.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新session的最后一次访问时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doUpdate(session);</span><br><span class="line">        redisService.set(session.getId().toString(), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除session</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(Session session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doDelete(session);</span><br><span class="line">        redisService.delete(session.getId().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是一般还是别在集群中使用session。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jdk1.8发送http请求报SSLv3的解决方案</title>
      <link href="/2017/03/25/jdk1-8%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82%E6%8A%A5SSLv3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2017/03/25/jdk1-8%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82%E6%8A%A5SSLv3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>从 JDK 8u31 发行版开始，已停用 SSLv3 协议（安全套接字层），该协议在正常情况下不可用。如果确实需要 SSLv3，可以重新激活该协议…</p><h3 id="SSLv3激活步骤"><a href="#SSLv3激活步骤" class="headerlink" title="SSLv3激活步骤"></a>SSLv3激活步骤</h3><p>切到${java_home}/jre/lib/security目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/security</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改<code>java.security</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi java.security</span><br></pre></td></tr></table></figure><p>找到<code>jdk.tls.disabledAlgorithms</code>属性， 删除<code>SSLv3</code>并保存</p><p>查找:<code>/jdk.tls.disabledAlgorithms</code></p><blockquote><p>温馨提示:需要root权限</p></blockquote>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现全文检索-基于MySQL</title>
      <link href="/2017/03/25/%E5%AE%9E%E7%8E%B0%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2-%E5%9F%BA%E4%BA%8EMySQL/"/>
      <url>/2017/03/25/%E5%AE%9E%E7%8E%B0%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2-%E5%9F%BA%E4%BA%8EMySQL/</url>
      <content type="html"><![CDATA[<p>我们经常在网站上能看到搜索框， 可以用空格分割关键词、可以用拼音搜索等…</p><h3 id="把关键字拆分为一组词"><a href="#把关键字拆分为一组词" class="headerlink" title="把关键字拆分为一组词"></a>把<code>关键字</code>拆分为一组<code>词</code></h3><p>例子：搜索<code>懒人快乐</code>， 后台程序就会把<code>懒人快乐</code>拆分成两个词<code>懒人,快乐</code>。</p><p>说明：可以使用<code>jieba-analysis</code>结巴分词， 用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.huaban&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jieba-analysis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.blog.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.huaban.analysis.jieba.JiebaSegmenter;</span><br><span class="line">import com.huaban.analysis.jieba.SegToken;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 16/7/22</span><br><span class="line"> */</span><br><span class="line">public class FenCi &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分词器</span><br><span class="line">     */</span><br><span class="line">    private static final JiebaSegmenter segmenter = new JiebaSegmenter();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 中文分词, 并转成拼音</span><br><span class="line">     *</span><br><span class="line">     * @param data</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String process(String data) &#123;</span><br><span class="line">        if (StringUtils.isEmpty(data)) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data = data.replaceAll(&quot;\\s&quot;, &quot; &quot;);</span><br><span class="line">        data = data.replaceAll(&quot;&apos;&quot;, &quot; &quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;SegToken&gt; list = segmenter.process(data, JiebaSegmenter.SegMode.INDEX);</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        list.forEach(segToken -&gt; sb.append(PinYin.converterToSpellWithMuti(segToken.word)).append(&quot;,&quot;));</span><br><span class="line">        sb.deleteCharAt(sb.lastIndexOf(&quot;,&quot;));</span><br><span class="line"></span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把词转化为拼音"><a href="#把词转化为拼音" class="headerlink" title="把词转化为拼音"></a>把<code>词</code>转化为<code>拼音</code></h3><p>例子：<code>懒人,快乐</code>会被后台程序转化为<code>lanren,kuaile,kuaiyue</code>，之所以不是<code>lanren,kuaile</code>而是<code>lanren,kuaile,kuaiyue</code>， 是因为<code>乐</code>是多音字。</p><p>说明：可以使用<code>pinyin4j</code>把汉字转化为拼音， 用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.belerweb&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;pinyin4j&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.blog.util;</span><br><span class="line"></span><br><span class="line">import net.sourceforge.pinyin4j.PinyinHelper;</span><br><span class="line">import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;</span><br><span class="line">import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;</span><br><span class="line">import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;</span><br><span class="line">import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 16/7/22</span><br><span class="line"> */</span><br><span class="line">public class PinYin &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 汉字转换位汉语拼音首字母，英文字符不变，特殊字符丢失 支持多音字，生成方式如（长沙市长:cssc,zssz,zssc,cssz）</span><br><span class="line">     *</span><br><span class="line">     * @param chines 汉字</span><br><span class="line">     * @return 拼音</span><br><span class="line">     */</span><br><span class="line">    public static String converterToFirstSpell(String chines) &#123;</span><br><span class="line">        StringBuffer pinyinName = new StringBuffer();</span><br><span class="line">        char[] nameChar = chines.toCharArray();</span><br><span class="line">        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();</span><br><span class="line">        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        for (int i = 0; i &lt; nameChar.length; i++) &#123;</span><br><span class="line">            if (nameChar[i] &gt; 128) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // 取得当前汉字的所有全拼</span><br><span class="line">                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(</span><br><span class="line">                            nameChar[i], defaultFormat);</span><br><span class="line">                    if (strs != null) &#123;</span><br><span class="line">                        for (int j = 0; j &lt; strs.length; j++) &#123;</span><br><span class="line">                            // 取首字母</span><br><span class="line">                            pinyinName.append(strs[j].charAt(0));</span><br><span class="line">                            if (j != strs.length - 1) &#123;</span><br><span class="line">                                pinyinName.append(&quot;,&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // else &#123;</span><br><span class="line">                    // pinyinName.append(nameChar[i]);</span><br><span class="line">                    // &#125;</span><br><span class="line">                &#125; catch (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                pinyinName.append(nameChar[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            pinyinName.append(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // return pinyinName.toString();</span><br><span class="line">        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失</span><br><span class="line">     * 不支持多音字，生成方式如（重当参:zhongdangcen）</span><br><span class="line">     *</span><br><span class="line">     * @param chines 汉字</span><br><span class="line">     * @return 拼音</span><br><span class="line">     */</span><br><span class="line">    public static String converterToSpell(String chines) &#123;</span><br><span class="line">        StringBuffer pinyinName = new StringBuffer();</span><br><span class="line">        char[] nameChar = chines.toCharArray();</span><br><span class="line">        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();</span><br><span class="line">        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        for (int i = 0; i &lt; nameChar.length; i++) &#123;</span><br><span class="line">            if (nameChar[i] &gt; 128) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // 取得当前汉字的所有全拼</span><br><span class="line">                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(</span><br><span class="line">                            nameChar[i], defaultFormat);</span><br><span class="line">                    if (strs != null &amp;&amp; strs.length &gt; 0) &#123;</span><br><span class="line">                        pinyinName.append(strs[0]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                pinyinName.append(nameChar[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            pinyinName.append(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // return pinyinName.toString();</span><br><span class="line">        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失</span><br><span class="line">     * 支持多音字，生成方式如（重当参:zhongdangcen,zhongdangcan,chongdangcen</span><br><span class="line">     * ,chongdangshen,zhongdangshen,chongdangcan）</span><br><span class="line">     *</span><br><span class="line">     * @param chines 汉字</span><br><span class="line">     * @return 拼音</span><br><span class="line">     */</span><br><span class="line">    public static String converterToSpellWithMuti(String chines) &#123;</span><br><span class="line">        StringBuffer pinyinName = new StringBuffer();</span><br><span class="line">        char[] nameChar = chines.toCharArray();</span><br><span class="line">        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();</span><br><span class="line">        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);</span><br><span class="line">        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);</span><br><span class="line">        for (int i = 0; i &lt; nameChar.length; i++) &#123;</span><br><span class="line">            if (nameChar[i] &gt; 128) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // 取得当前汉字的所有全拼</span><br><span class="line">                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(</span><br><span class="line">                            nameChar[i], defaultFormat);</span><br><span class="line">                    if (strs != null) &#123;</span><br><span class="line">                        for (int j = 0; j &lt; strs.length; j++) &#123;</span><br><span class="line">                            pinyinName.append(strs[j]);</span><br><span class="line">                            if (j != strs.length - 1) &#123;</span><br><span class="line">                                pinyinName.append(&quot;,&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (BadHanyuPinyinOutputFormatCombination e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                pinyinName.append(nameChar[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            pinyinName.append(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // return pinyinName.toString();</span><br><span class="line">        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 去除多音字重复数据</span><br><span class="line">     *</span><br><span class="line">     * @param theStr</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static List&lt;Map&lt;String, Integer&gt;&gt; discountTheChinese(String theStr) &#123;</span><br><span class="line">        // 去除重复拼音后的拼音列表</span><br><span class="line">        List&lt;Map&lt;String, Integer&gt;&gt; mapList = new ArrayList&lt;Map&lt;String, Integer&gt;&gt;();</span><br><span class="line">        // 用于处理每个字的多音字，去掉重复</span><br><span class="line">        Map&lt;String, Integer&gt; onlyOne = null;</span><br><span class="line">        String[] firsts = theStr.split(&quot; &quot;);</span><br><span class="line">        // 读出每个汉字的拼音</span><br><span class="line">        for (String str : firsts) &#123;</span><br><span class="line">            onlyOne = new Hashtable();</span><br><span class="line">            String[] china = str.split(&quot;,&quot;);</span><br><span class="line">            // 多音字处理</span><br><span class="line">            for (String s : china) &#123;</span><br><span class="line">                Integer count = onlyOne.get(s);</span><br><span class="line">                if (count == null) &#123;</span><br><span class="line">                    onlyOne.put(s, new Integer(1));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    onlyOne.remove(s);</span><br><span class="line">                    count++;</span><br><span class="line">                    onlyOne.put(s, count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mapList.add(onlyOne);</span><br><span class="line">        &#125;</span><br><span class="line">        return mapList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解析并组合拼音，对象合并方案(推荐使用)</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static String parseTheChineseByObject(</span><br><span class="line">            List&lt;Map&lt;String, Integer&gt;&gt; list) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; first = null; // 用于统计每一次,集合组合数据</span><br><span class="line">        // 遍历每一组集合</span><br><span class="line">        for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">            // 每一组集合与上一次组合的Map</span><br><span class="line">            Map&lt;String, Integer&gt; temp = new Hashtable&lt;String, Integer&gt;();</span><br><span class="line">            // 第一次循环，first为空</span><br><span class="line">            if (first != null) &#123;</span><br><span class="line">                // 取出上次组合与此次集合的字符，并保存</span><br><span class="line">                for (String s : first.keySet()) &#123;</span><br><span class="line">                    for (String s1 : list.get(i).keySet()) &#123;</span><br><span class="line">                        String str = s + s1;</span><br><span class="line">                        temp.put(str, 1);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                // 清理上一次组合数据</span><br><span class="line">                if (temp != null &amp;&amp; temp.size() &gt; 0) &#123;</span><br><span class="line">                    first.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                for (String s : list.get(i).keySet()) &#123;</span><br><span class="line">                    String str = s;</span><br><span class="line">                    temp.put(str, 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 保存组合数据以便下次循环使用</span><br><span class="line">            if (temp != null &amp;&amp; temp.size() &gt; 0) &#123;</span><br><span class="line">                first = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String returnStr = &quot;&quot;;</span><br><span class="line">        if (first != null) &#123;</span><br><span class="line">            // 遍历取出组合字符串</span><br><span class="line">            for (String str : first.keySet()) &#123;</span><br><span class="line">                returnStr += (str + &quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (returnStr.length() &gt; 0) &#123;</span><br><span class="line">            returnStr = returnStr.substring(0, returnStr.length() - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return returnStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单独创建一个表用于全文检索"><a href="#单独创建一个表用于全文检索" class="headerlink" title="单独创建一个表用于全文检索"></a>单独创建一个表用于全文检索</h3><p>例子：现在有一个文章表<code>article</code>, 它有<code>title</code>和<code>body</code>等字段，我们想要实现的效果是~如果我们检索的关键字在title或body中， 那么我们就把这条文章记录检索出来。</p><ul><li>创建一个用于检索的表<code>article_index</code>， 它有<code>article_id</code>，<code>title</code>，<code>body</code>等字段， 其中title和body字段要给的大一点， 因为这两个字段将要存储文章表的title和body所对应的拼音，具体给多大请自行分析。</li><li>ALTER TABLE article_index ENGINE = MyISAM; 默认是InnoDB。MyISAM：支持全文索引， 但不支持事务。InnoDB：支持事务， 但不支持全文索引。</li><li>ALTER TABLE <code>article_index</code> ADD FULLTEXT INDEX (<code>title</code>, <code>body</code>); 给title和body字段添加全文索引。</li><li>在发表一篇新的文章时， 把文章的<code>title</code>用<code>结巴分词</code>分成多个词， 再用<code>pinyin4j</code>转化为拼音， <code>body</code>字段也做相同处理，最后把转化后的article_id、title和body存储到<code>article_index</code>表中，用于全文检索。</li></ul><p>说明：关于全文索引的一些常用知识<code>SHOW VARIABLES LIKE \&#39;ft_min_word_len\&#39;;</code>， <code>REPAIR TABLE article_index QUICK;</code> 作用以及用法请自行学习。</p><h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><p>例子：检索的关键字为<code>懒人快乐</code></p><ul><li>先把分词， 变为<code>懒人,快乐</code>。</li><li>再把汉字变拼音<code>lanren,kuaile,kuaiyue</code>。</li><li>检索：<code>SELECT * FROM article_index WHERE match(title, body) against(\&#39;lanren,kuaile,kuaiyue\&#39; IN BOOLEAN MODE)</code></li><li>根据检索到article_id去文章表查询对应的文章</li></ul><p>说明：此检索是基于MySQL的， 其他数据库的检索请自行学习， 检索语句还有很多模式， 请自行学习。</p><blockquote><p>结巴分词的时候会返回偏移量，所以你可以根据偏移量定位到文章中的关键词， 然后变成红色。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现前端markdown编辑器</title>
      <link href="/2017/03/25/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AFmarkdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2017/03/25/%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AFmarkdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在做网站的时候， 一帮都有后台管理可以发布一些文章或者公告之类的，一般情况下我们使用的是富文本编辑器（类似word），但我并不喜欢它， 我更喜欢markdown编辑器…</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载bootstrap <a href="http://v3.bootcss.com" target="_blank" rel="noopener">http://v3.bootcss.com</a></li><li>下载jquery <a href="http://jquery.com/download" target="_blank" rel="noopener">http://jquery.com/download</a></li><li>下载marked <a href="https://github.com/chjj/marked" target="_blank" rel="noopener">https://github.com/chjj/marked</a></li><li>下载bootstrap-markdown <a href="http://www.codingdrama.com/bootstrap-markdown/" target="_blank" rel="noopener">http://www.codingdrama.com/bootstrap-markdown</a></li></ul><a id="more"></a><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="引入css"><a href="#引入css" class="headerlink" title="引入css"></a>引入css</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;hidden ajax-append-link&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;div class=&quot;hidden ajax-append-link&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/bootstrap-markdown.min.css&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a>引入js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/marked.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap-markdown.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=&quot;content&quot; id=&quot;content&quot; rows=&quot;10&quot;&gt;&lt;textarea&gt;</span><br></pre></td></tr></table></figure><h3 id="把文本域变为markdown编辑器"><a href="#把文本域变为markdown编辑器" class="headerlink" title="把文本域变为markdown编辑器"></a>把文本域变为markdown编辑器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#content&quot;).markdown(&#123;resize: &apos;vertical&apos;&#125;);</span><br></pre></td></tr></table></figure><h3 id="更多用法请参考："><a href="#更多用法请参考：" class="headerlink" title="更多用法请参考："></a>更多用法请参考：</h3><p><a href="http://www.codingdrama.com/bootstrap-markdown/" target="_blank" rel="noopener">http://www.codingdrama.com/bootstrap-markdown</a></p>]]></content>
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu下mysql数据库恢复</title>
      <link href="/2017/03/25/ubuntu%E4%B8%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D/"/>
      <url>/2017/03/25/ubuntu%E4%B8%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<p>前端时间我在玩主从库的时候， 一不小心把mysql数据库玩坏了， 连服务都启动不了了， 经过一番修复后还是不行， 可怜我的博客都在库里, 不过我却在庆幸， 因为这叫置之死地而后生，我又能学到牛逼技术了…</p><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>mysql数据是放在/var/lib/mysql下面的，需要备份的内容有：</p><ul><li>ibdata1</li><li>performance_schema</li><li>blog文件夹 （对应数据库blog）</li><li>其他你需要恢复的数据库</li></ul><a id="more"></a><h3 id="重装mysql"><a href="#重装mysql" class="headerlink" title="重装mysql"></a>重装mysql</h3><p>重装教程网上一堆， 这里就不再赘述。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>把备份的几个文件， 替换回去， 然后重启mysql， 这时候会报错， 查看mysql日志后发现是权限不足导致。</p><p>原因是：备份与恢复数据的用户一般都需要比较高的权限才能操作， 比如root，所以替换后的文件的所有者是root， 而不再是mysql， 因此需要改变文件拥有者和赋权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/mysql</span><br><span class="line">chown mysql *</span><br><span class="line"></span><br><span class="line">chmod 700 blog;</span><br><span class="line">chmod 700 ibdata1;</span><br><span class="line">chmod 700 performance_schema;</span><br></pre></td></tr></table></figure><p>必要时还需要删除这两个日志文件<code>ib_logfile0</code>和<code>ib_logfile1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ib_logfile*</span><br></pre></td></tr></table></figure><p>重启， 不出意外应该是可以登录mysql了， <code>show databases</code>能看到已经恢复的blog数据库了， <code>use blog;show tables</code>能看见article表了。</p><p>但是，在查询article表的时候，又会报权限不足的错， 道理是相同的， 我们去<code>/var/lib/mysql/blog</code>目录下，重新改变拥有者:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/mysql/blog</span><br><span class="line">chown mysql *</span><br></pre></td></tr></table></figure><p>重启，验证， 成功！</p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下防火墙的一些简单使用</title>
      <link href="/2017/03/25/Ubuntu%E4%B8%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/03/25/Ubuntu%E4%B8%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>公司的很多项目都是放在Linux机器上的，因此安装防火墙还是很有必要的…</p><h3 id="安装防火墙"><a href="#安装防火墙" class="headerlink" title="安装防火墙"></a>安装防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install firewalld</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看开放的端口"><a href="#查看开放的端口" class="headerlink" title="查看开放的端口"></a>查看开放的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><h3 id="把一个端口开放"><a href="#把一个端口开放" class="headerlink" title="把一个端口开放"></a>把一个端口开放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=8080/tcp</span><br></pre></td></tr></table></figure><h3 id="端口开放之后要重新加载"><a href="#端口开放之后要重新加载" class="headerlink" title="端口开放之后要重新加载"></a>端口开放之后要重新加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="移除一个开放的端口"><a href="#移除一个开放的端口" class="headerlink" title="移除一个开放的端口"></a>移除一个开放的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用aop和自定义注解打印出参入参日志和方法执行时间</title>
      <link href="/2017/03/25/%E4%BD%BF%E7%94%A8aop%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%89%93%E5%8D%B0%E5%87%BA%E5%8F%82%E5%85%A5%E5%8F%82%E6%97%A5%E5%BF%97%E5%92%8C%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
      <url>/2017/03/25/%E4%BD%BF%E7%94%A8aop%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%89%93%E5%8D%B0%E5%87%BA%E5%8F%82%E5%85%A5%E5%8F%82%E6%97%A5%E5%BF%97%E5%92%8C%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p><code>LogTime.java</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.common.annotation;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 在方法上加此注解会打印入参和出参，会计算方法消耗的时间</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/12/8</span><br><span class="line"> */</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface LogTime &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="主要逻辑："><a href="#主要逻辑：" class="headerlink" title="主要逻辑："></a>主要逻辑：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.common.aop;</span><br><span class="line"></span><br><span class="line">import com.kangyonggan.api.common.annotation.LogTime;</span><br><span class="line">import com.kangyonggan.api.common.util.AopUtil;</span><br><span class="line">import com.kangyonggan.api.common.util.DateUtils;</span><br><span class="line">import com.kangyonggan.api.common.util.PropertiesUtil;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 切于内部service的实现方法上， 需要在方法上手动加上@LogTime注解， 打印入参和出参，打印方法执行时间, 慢方法打印error日志</span><br><span class="line"> *</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/11/30</span><br><span class="line"> */</span><br><span class="line">@Log4j2</span><br><span class="line">public class LogAop &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设定的方法最大执行时间</span><br><span class="line">     */</span><br><span class="line">    private Long slowMethodTime;</span><br><span class="line"></span><br><span class="line">    public LogAop() &#123;</span><br><span class="line">        String val = PropertiesUtil.getPropertiesOrDefault(&quot;slow.method.time&quot;, &quot;10&quot;);</span><br><span class="line">        slowMethodTime = Long.parseLong(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param joinPoint</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        Object args[] = joinPoint.getArgs();</span><br><span class="line">        Class clazz = joinPoint.getTarget().getClass();</span><br><span class="line"></span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());</span><br><span class="line">        String targetName = &quot;[&quot; + clazz.getName() + &quot;.&quot; + method.getName() + &quot;]&quot;;</span><br><span class="line"></span><br><span class="line">        LogTime logTime = method.getAnnotation(LogTime.class);</span><br><span class="line">        Object result;</span><br><span class="line">        if (logTime != null) &#123;</span><br><span class="line">            log.info(&quot;进入方法:&quot; + targetName + &quot; - args:&quot; + AopUtil.getStringFromRequest(args));</span><br><span class="line"></span><br><span class="line">            long beginTime = DateUtils.getNow().getTime();</span><br><span class="line">            result = joinPoint.proceed(args);</span><br><span class="line">            long endTime = DateUtils.getNow().getTime();</span><br><span class="line">            long time = endTime - beginTime;</span><br><span class="line"></span><br><span class="line">            log.info(&quot;离开方法:&quot; + targetName + &quot; - return:&quot; + AopUtil.getStringFromResponse(result));</span><br><span class="line">            log.info(&quot;方法耗时:&quot; + time + &quot;ms - &quot; + targetName);</span><br><span class="line"></span><br><span class="line">            if (time &gt; slowMethodTime * 1000) &#123;</span><br><span class="line">                log.error(&quot;方法执行超过设定时间&quot; + slowMethodTime + &quot;s,&quot; + targetName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result = joinPoint.proceed(args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到的<code>AopUtil.java</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.common.util;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONArray;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/11/30</span><br><span class="line"> */</span><br><span class="line">public class AopUtil &#123;</span><br><span class="line">    public static String getStringFromRequest(Object[] args) &#123;</span><br><span class="line">        String req = &quot;&quot;;</span><br><span class="line">        for (Object arg : args) &#123;</span><br><span class="line">            if (arg == null) &#123;</span><br><span class="line">                req = req + &quot;null,&quot;;</span><br><span class="line">                continue;</span><br><span class="line">            &#125; else if (arg instanceof List == true) &#123;</span><br><span class="line">                req = req + JSON.toJSONString(arg);</span><br><span class="line">            &#125; else if (arg.getClass().isArray()) &#123;</span><br><span class="line">                req = req + JSONArray.toJSONString(arg);</span><br><span class="line">            &#125; else if (arg instanceof Enum) &#123;</span><br><span class="line">                req = req + JSON.toJSONString(arg) + &quot;,&quot;;</span><br><span class="line">            &#125; else if (!(arg instanceof String)</span><br><span class="line">                    &amp;&amp; !(arg instanceof BigDecimal)</span><br><span class="line">                    &amp;&amp; !(arg instanceof Boolean)</span><br><span class="line">                    &amp;&amp; !(arg instanceof Integer)</span><br><span class="line">                    &amp;&amp; (arg instanceof Object)) &#123;</span><br><span class="line">                req = req + JSON.toJSONString(arg) + &quot;,&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                req = req + arg.toString() + &quot;,&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.isNotEmpty(req) &amp;&amp; req.length() &gt; 100) &#123;</span><br><span class="line">            return req.hashCode() + &quot;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return req;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String getStringFromResponse(Object arg) &#123;</span><br><span class="line">        String rsp = &quot;&quot;;</span><br><span class="line">        if (arg == null) &#123;</span><br><span class="line">            rsp = rsp + &quot;null,&quot;;</span><br><span class="line">            return rsp;</span><br><span class="line">        &#125; else if (arg instanceof List) &#123;</span><br><span class="line">            rsp = rsp + JSON.toJSONString(arg);</span><br><span class="line">            return rsp;</span><br><span class="line">        &#125; else if (arg instanceof Enum) &#123;</span><br><span class="line">            rsp = rsp + JSON.toJSONString(arg);</span><br><span class="line">            return rsp;</span><br><span class="line">        &#125; else if (!(arg instanceof String)</span><br><span class="line">                &amp;&amp; !(arg instanceof BigDecimal)</span><br><span class="line">                &amp;&amp; !(arg instanceof Boolean)</span><br><span class="line">                &amp;&amp; !(arg instanceof Integer)</span><br><span class="line">                &amp;&amp; (arg instanceof Object)) &#123;</span><br><span class="line">            rsp = rsp + JSON.toJSONString(arg) + &quot;,&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            rsp = rsp + arg.toString() + &quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return rsp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mybatis Generator集成MapperPlugin、LombokPlugin和SerializablePlugin</title>
      <link href="/2017/03/25/MybatisGenerator%E9%9B%86%E6%88%90MapperPlugin%E3%80%81LombokPlugin%E5%92%8CSerializablePlugin/"/>
      <url>/2017/03/25/MybatisGenerator%E9%9B%86%E6%88%90MapperPlugin%E3%80%81LombokPlugin%E5%92%8CSerializablePlugin/</url>
      <content type="html"><![CDATA[<h3 id="MBG集成MapperPlugin、LombokPlugin和SerializablePlugin"><a href="#MBG集成MapperPlugin、LombokPlugin和SerializablePlugin" class="headerlink" title="MBG集成MapperPlugin、LombokPlugin和SerializablePlugin"></a><code>MBG</code>集成<code>MapperPlugin</code>、<code>LombokPlugin</code>和<code>SerializablePlugin</code></h3><p>可以生成的持久层代码:  </p><ul><li>生成BeanMapper.java</li><li>生成BeanMapper.xml</li><li>生成Bean.java</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>生成的Mapper.java继承了MyMapper.java(所有单表的crud全部不用写SQL)</li><li>实体bean拥有@Data注解（免去写getter、setter和toString的烦恼）</li><li>实体bean实现Serializable接口，可以放心的放入Redis缓存或传输如分布式系统间（如:dubbo）</li></ul><a id="more"></a><blockquote><p>坑：生成的Mapper.java，默认不带注解<code>@Repository</code>，如果你又没用spring扫描mapper包， 在运行时会报错，是运行时而不是启动时。</p></blockquote><h3 id="引入依赖和插件"><a href="#引入依赖和插件" class="headerlink" title="引入依赖和插件"></a>引入依赖和插件</h3><p><code>pom.xml</code>中的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin.mybatis-generator.version&gt;1.3.2&lt;/plugin.mybatis-generator.version&gt;</span><br><span class="line">&lt;mybatis-generator.version&gt;1.3.2&lt;/mybatis-generator.version&gt;</span><br><span class="line">&lt;mybatis-mapper.version&gt;3.3.8&lt;/mybatis-mapper.version&gt;</span><br><span class="line">&lt;lombok.version&gt;1.16.8&lt;/lombok.version&gt;</span><br><span class="line">         </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!--MBG plugin--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;plugin.mybatis-generator.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">        &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;$&#123;project.groupId&#125;&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;api-dao&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mybatis-generator.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;mybatis-mapper.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>提示：MBG插件之所以依赖dao, 是因为我在插件中使用了dao中的两个类,下面有。</p></blockquote><h3 id="代码和插件配置"><a href="#代码和插件配置" class="headerlink" title="代码和插件配置"></a>代码和插件配置</h3><p><code>MyMapper.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.mapper;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import tk.mybatis.mapper.common.ConditionMapper;</span><br><span class="line">import tk.mybatis.mapper.common.ExampleMapper;</span><br><span class="line">import tk.mybatis.mapper.common.SqlServerMapper;</span><br><span class="line">import tk.mybatis.mapper.common.base.BaseDeleteMapper;</span><br><span class="line">import tk.mybatis.mapper.common.base.BaseSelectMapper;</span><br><span class="line">import tk.mybatis.mapper.common.base.BaseUpdateMapper;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 16/5/12</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public interface MyMapper&lt;T&gt; extends</span><br><span class="line">        BaseSelectMapper&lt;T&gt;,</span><br><span class="line">        BaseUpdateMapper&lt;T&gt;,</span><br><span class="line">        BaseDeleteMapper&lt;T&gt;,</span><br><span class="line">        ExampleMapper&lt;T&gt;,</span><br><span class="line">        ConditionMapper&lt;T&gt;,</span><br><span class="line">        SqlServerMapper&lt;T&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LombokPlugin.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.mapper.util;</span><br><span class="line"></span><br><span class="line">import org.mybatis.generator.api.IntrospectedColumn;</span><br><span class="line">import org.mybatis.generator.api.IntrospectedTable;</span><br><span class="line">import org.mybatis.generator.api.PluginAdapter;</span><br><span class="line">import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;</span><br><span class="line">import org.mybatis.generator.api.dom.java.Method;</span><br><span class="line">import org.mybatis.generator.api.dom.java.TopLevelClass;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 16/5/12</span><br><span class="line"> */</span><br><span class="line">public class LombokPlugin extends PluginAdapter &#123;</span><br><span class="line">    private FullyQualifiedJavaType dataAnnotation = new FullyQualifiedJavaType(&quot;lombok.Data&quot;);</span><br><span class="line"></span><br><span class="line">    public boolean validate(List&lt;String&gt; warnings) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        this.addDataAnnotation(topLevelClass);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        this.addDataAnnotation(topLevelClass);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) &#123;</span><br><span class="line">        this.addDataAnnotation(topLevelClass);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean modelGetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean modelSetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void addDataAnnotation(TopLevelClass topLevelClass) &#123;</span><br><span class="line">        topLevelClass.addImportedType(this.dataAnnotation);</span><br><span class="line">        topLevelClass.addAnnotation(&quot;@Data&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置插件<code>generatorConfig.xml</code>, 插件放在dao模块的<code>src/main/resources</code>目录下即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration PUBLIC</span><br><span class="line">        &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=&quot;sqlContext&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--base mapper--&gt;</span><br><span class="line">        &lt;plugin type=&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;mappers&quot; value=&quot;com.kangyonggan.api.mapper.MyMapper&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--serialize plugin--&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;&gt;&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--lombok plugin--&gt;</span><br><span class="line">        &lt;plugin type=&quot;com.kangyonggan.api.mapper.util.LombokPlugin&quot;&gt;&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--jdbc driver--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/api&quot;</span><br><span class="line">                        userId=&quot;root&quot; password=&quot;123456&quot;&gt;&lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Xxx.java--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.kangyonggan.api.model.vo&quot;</span><br><span class="line">                            targetProject=&quot;../api-model/src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--XxxMapper.xml--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--XxxMapper.java--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.kangyonggan.api.mapper&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--table name--&gt;</span><br><span class="line">        &lt;table tableName=&quot;table_name&quot;&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;&gt;&lt;/generatedKey&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>在项目跟目录下<code>mvn clean install</code>, 目的是打包<code>xxx-dao.jar</code>，好让插件去依赖</li><li>使用 IntelliJ IDEA的，请参考下图(两步), 其他工具我不用，请自行摸索</li></ol><p><img src="/uploads/20170105191303945.png" alt="使用说明"></p><blockquote><p>温馨提示：以上配置是我个人配置，请勿直接使用，使用前请自行改造。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>多环境下autoconfig使用的小例子</title>
      <link href="/2017/03/25/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8Bautoconfig%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
      <url>/2017/03/25/%E5%A4%9A%E7%8E%AF%E5%A2%83%E4%B8%8Bautoconfig%E4%BD%BF%E7%94%A8%E7%9A%84%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h3 id="为什么使用Autoconfig"><a href="#为什么使用Autoconfig" class="headerlink" title="为什么使用Autoconfig"></a>为什么使用Autoconfig</h3><p>在一个应用中，我们总是会遇到一些参数，例如：</p><ul><li>数据库服务器IP地址、端口、用户名；</li><li>用来保存上传资料的目录。</li><li>一些参数，诸如是否打开cache、加密所用的密钥名称等等。</li></ul><p>这些参数有一个共性，那就是：它们和应用的逻辑无关，只和当前环境、当前系统用户相关。以下场景很常见：</p><ul><li>在开发、测试、发布阶段，使用不同的数据库服务器；</li><li>在开发阶段，使用Windows的A开发者将用户上传的文件存放在d:\my_upload目录中，而使用Linux的B开发者将同样的文件存放在/home/myname/my_upload目录中。</li><li>在开发阶段设置cache=off，在生产环境中设置cache=on。</li><li>很明显，这些参数不适合被“硬编码”在配置文件或代码中。因为每一个从源码库中取得它们的人，都有可能需要修改它们，使之与自己的环境相匹配, autoconfig就是很好的选择。</li></ul><a id="more"></a><h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><p>在<code>pom.xml</code>中引入插件，下面为多环境配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin.autoconfig.version&gt;1.2&lt;/plugin.autoconfig.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!-- autoconfig --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.citrus.tool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;autoconfig-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;plugin.autoconfig.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;compile&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;compile&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;autoconfig&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;userProperties&gt;$&#123;antx.path&#125;&lt;/userProperties&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">        &lt;/activation&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;antx.path&gt;$&#123;user.home&#125;/antx-dev.properties&lt;/antx.path&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;prod&lt;/id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;antx.path&gt;$&#123;user.home&#125;/antx-prod.properties&lt;/antx.path&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在<code>src/main/resources</code>下创建目录<code>Meta-INF/autoconfig</code>，在目录下创建文件<code>auto-config.xml</code>, 下面是我的配置（依个人而定）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;group&gt;</span><br><span class="line">        &lt;!-- dubbo --&gt;</span><br><span class="line">        &lt;property name=&quot;api.dubbo.name&quot; description=&quot;项目名字&quot; defaultValue=&quot;api&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.dubbo.registry.address&quot; description=&quot;dubbo注册地址&quot;</span><br><span class="line">                  defaultValue=&quot;zookeeper://127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.dubbo.protocol.port&quot; description=&quot;dubbo注册端口&quot; defaultValue=&quot;-1&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.dubbo.timeout&quot; description=&quot;dubbo超时时间&quot; defaultValue=&quot;10000&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.dubbo.api.version&quot; description=&quot;api提供接口的版本&quot; defaultValue=&quot;1.0.0&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- redis --&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.maxTotal&quot; description=&quot;redis最大连接数&quot; defaultValue=&quot;1000&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.minIdle&quot; description=&quot;redis最小等待数&quot; defaultValue=&quot;50&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.maxIdle&quot; description=&quot;redis最大等待数&quot; defaultValue=&quot;100&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.testOnBorrow&quot; description=&quot;redis测试支持&quot; defaultValue=&quot;true&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.host&quot; description=&quot;redis主机ip&quot; defaultValue=&quot;127.0.0.1&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.port&quot; description=&quot;redis主机端口&quot; defaultValue=&quot;6379&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.password&quot; description=&quot;redis密码&quot; defaultValue=&quot;123456&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--jdbc--&gt;</span><br><span class="line">        &lt;property name=&quot;api.jdbc.driver&quot; description=&quot;jdbc驱动&quot; defaultValue=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.jdbc.url&quot; description=&quot;jdbc地址&quot; defaultValue=&quot;jdbc:mysql://127.0.0.1:3306/api&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.jdbc.username&quot; description=&quot;jdbc用户名&quot; defaultValue=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.jdbc.password&quot; description=&quot;jdbc密码&quot; defaultValue=&quot;123456&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- log4j2 --&gt;</span><br><span class="line">        &lt;property name=&quot;api.log4j2.home&quot; description=&quot;log4j2日志的文件主目录&quot; defaultValue=&quot;/root/logs/api&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;api.slow.method.time&quot; description=&quot;慢方法时间(秒)&quot; defaultValue=&quot;10&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.slow.interface.time&quot; description=&quot;慢接口时间(秒)&quot; defaultValue=&quot;10&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.redis.prefix.key&quot; description=&quot;redis键的前缀&quot; defaultValue=&quot;api&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;api.cache.open&quot; description=&quot;是否开启缓存,Y:开启,N:不开启&quot; defaultValue=&quot;Y&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;generate template=&quot;app.properties&quot;&gt;&lt;/generate&gt;</span><br><span class="line">        &lt;generate template=&quot;applicationContext-datasource.xml&quot;&gt;&lt;/generate&gt;</span><br><span class="line">        &lt;generate template=&quot;applicationContext-provider.xml&quot;&gt;&lt;/generate&gt;</span><br><span class="line">        &lt;generate template=&quot;applicationContext-redis.xml&quot;&gt;&lt;/generate&gt;</span><br><span class="line">        &lt;generate template=&quot;log4j2.xml&quot;&gt;&lt;/generate&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在上一步中可以看到antx将会替换五个文件，下面是其中一个文件的配置<code>applicationContext-redis.xml</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">ohttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;api.redis.maxTotal&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;api.redis.minIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;api.redis.maxIdle&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;api.redis.testOnBorrow&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;jedisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><br><span class="line">          p:hostName=&quot;$&#123;api.redis.host&#125;&quot; p:port=&quot;$&#123;api.redis.port&#125;&quot; p:password=&quot;$&#123;api.redis.password&#125;&quot; p:poolConfig-ref=&quot;poolConfig&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;keySerializer&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; &gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;valueSerializer&quot;&gt;</span><br><span class="line">            &lt;bean class=&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;&gt;&lt;/bean&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在项目<code>mvn clean install</code>的时候，antx会自动替换它所包含的文件，可以再<code>target</code>目录下查看指定的文件是否被替换成功</p></blockquote>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>刚刚安装的ubuntu16.04.1没ssh服务</title>
      <link href="/2017/03/25/%E5%88%9A%E5%88%9A%E5%AE%89%E8%A3%85%E7%9A%84ubuntu16-04-1%E6%B2%A1ssh%E6%9C%8D%E5%8A%A1/"/>
      <url>/2017/03/25/%E5%88%9A%E5%88%9A%E5%AE%89%E8%A3%85%E7%9A%84ubuntu16-04-1%E6%B2%A1ssh%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>在ubuntu16.04.1安装ssh服务，让远程可以用ssh登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何把内网机器变成外网可以访问的服务器</title>
      <link href="/2017/03/25/%E5%A6%82%E4%BD%95%E6%8A%8A%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8%E5%8F%98%E6%88%90%E5%A4%96%E7%BD%91%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/03/25/%E5%A6%82%E4%BD%95%E6%8A%8A%E5%86%85%E7%BD%91%E6%9C%BA%E5%99%A8%E5%8F%98%E6%88%90%E5%A4%96%E7%BD%91%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>需要一台内网机器（性能越强越好）【192.168.1.100】</li><li>一个有公网IP的路由器，或者移动内网或者电信内网IP都可以【101.245.198.155】</li><li>一个公网服务器（不需要内存太大，1G足够）【121.40.66.176】</li></ol><blockquote><p>路由器和公网服务器要能互通，如果不通，可以尝试重启路由器，重启的作用是换一个新的ip，也许就通了</p></blockquote><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>把服务器部署在内网机器上，比如我的博客在内网可以访问:192.168.1.100:8088</li><li>登录路由器，配置“端口转发”，把请求路由器8088端口的请求，转发到请求192.168.1.100:8088</li><li>登录公网服务器，执行远程端口转发命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -L 80:101.245.198.155:8088 kyg@101.245.198.155</span><br></pre></td></tr></table></figure><p>表示，请求公网80端口的请求，会被转发到路由器（101.245.198.155）的8088端口</p><h3 id="保持转发链接不中断（自动重连）"><a href="#保持转发链接不中断（自动重连）" class="headerlink" title="保持转发链接不中断（自动重连）"></a>保持转发链接不中断（自动重连）</h3><p>查看任务<br><code>crontab -l</code></p><p>创建任务<br><code>crontab -e</code></p><p>每小时重连一次<br><code>0 * * * * sh conn.sh</code></p>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu14.04下配置ftp服务器</title>
      <link href="/2017/03/25/ubuntu14-04%E4%B8%8B%E9%85%8D%E7%BD%AEftp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2017/03/25/ubuntu14-04%E4%B8%8B%E9%85%8D%E7%BD%AEftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vsftpd</span><br></pre></td></tr></table></figure><h3 id="ftp服务器启动和重启"><a href="#ftp服务器启动和重启" class="headerlink" title="ftp服务器启动和重启"></a>ftp服务器启动和重启</h3><ul><li>启动:<code>/etc/init.d/vsftpd start</code>  </li><li>重启:<code>/etc/init.d/vsftpd restart</code>  </li></ul><a id="more"></a><h3 id="创建ftp用户"><a href="#创建ftp用户" class="headerlink" title="创建ftp用户"></a>创建ftp用户</h3><p>ftp用户需满足下面条件：  </p><ul><li>此用户只是用来使用ftp服务的</li><li>此用户不可登录服务器</li><li>此用户不能访问ftp指定文件夹之外的文件</li></ul><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户ftp0</span><br><span class="line">useradd -d /home/ftp0 -m ftp0</span><br><span class="line"># 修改ftp0的密码</span><br><span class="line">passwd ftp0</span><br></pre></td></tr></table></figure><h3 id="修改ftp配置"><a href="#修改ftp配置" class="headerlink" title="修改ftp配置"></a>修改ftp配置</h3><p>修改<code>/etc/vsftpd.conf</code>的几个关键配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO cal_user=YES# 只能访问自身的目录，此处有坑，需加上下面一行</span><br><span class="line">allow_writeable_chroot=YES# 允许写自身发目录</span><br></pre></td></tr></table></figure><h3 id="让用户不能登录"><a href="#让用户不能登录" class="headerlink" title="让用户不能登录"></a>让用户不能登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /sbin/nologin ftp0</span><br></pre></td></tr></table></figure><p>注意，ubuntu下还需要在<code>/etc/shells</code>最后加上：<code>/sbin/nologin</code></p><blockquote><p>最后需要重启ftp服务器</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ftp</span><br><span class="line">ftp&gt; open 192.168.1.100</span><br><span class="line">user:ftp0</span><br><span class="line">pwd:xxxxx</span><br><span class="line">success!</span><br></pre></td></tr></table></figure><h3 id="附javaftp上传代码"><a href="#附javaftp上传代码" class="headerlink" title="附javaftp上传代码"></a>附javaftp上传代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">package com.kangyonggan.api.biz;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.net.ftp.FTPReply;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author kangyonggan</span><br><span class="line"> * @since 2016/12/25</span><br><span class="line"> */</span><br><span class="line">public class TestFtp &#123;</span><br><span class="line"></span><br><span class="line">    private FTPClient ftp;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param path     上传到ftp服务器哪个路径下</span><br><span class="line">     * @param addr     地址</span><br><span class="line">     * @param port     端口号</span><br><span class="line">     * @param username 用户名</span><br><span class="line">     * @param password 密码</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private boolean connect(String path, String addr, int port, String username, String password) throws Exception &#123;</span><br><span class="line">        boolean result = false;</span><br><span class="line">        ftp = new FTPClient();</span><br><span class="line">        int reply;</span><br><span class="line">        ftp.connect(addr, port);</span><br><span class="line">        ftp.login(username, password);</span><br><span class="line">        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);</span><br><span class="line">        reply = ftp.getReplyCode();</span><br><span class="line">        if (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">            ftp.disconnect();</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        ftp.changeWorkingDirectory(path);</span><br><span class="line">        result = true;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param file 上传的文件或文件夹</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private void upload(File file) throws Exception &#123;</span><br><span class="line">        if (file.isDirectory()) &#123;</span><br><span class="line">            ftp.makeDirectory(file.getName());</span><br><span class="line">            ftp.changeWorkingDirectory(file.getName());</span><br><span class="line">            String[] files = file.list();</span><br><span class="line">            for (int i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">                File file1 = new File(file.getPath() + &quot;\\&quot; + files[i]);</span><br><span class="line">                if (file1.isDirectory()) &#123;</span><br><span class="line">                    upload(file1);</span><br><span class="line">                    ftp.changeToParentDirectory();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    File file2 = new File(file.getPath() + &quot;\\&quot; + files[i]);</span><br><span class="line">                    FileInputStream input = new FileInputStream(file2);</span><br><span class="line">                    ftp.storeFile(file2.getName(), input);</span><br><span class="line">                    input.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            File file2 = new File(file.getPath());</span><br><span class="line">            FileInputStream input = new FileInputStream(file2);</span><br><span class="line">            ftp.storeFile(file2.getName(), input);</span><br><span class="line">            input.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        TestFtp t = new TestFtp();</span><br><span class="line">        t.connect(&quot;/home/ftp0/&quot;, &quot;192.168.1.100&quot;, 21, &quot;ftp0&quot;, &quot;123456&quot;);</span><br><span class="line">        File file = new File(&quot;/Users/kyg/Downloads/blog.sql&quot;);</span><br><span class="line">        t.upload(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat8访问软连接目录下的文件</title>
      <link href="/2017/03/25/Tomcat8%E8%AE%BF%E9%97%AE%E8%BD%AF%E8%BF%9E%E6%8E%A5%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2017/03/25/Tomcat8%E8%AE%BF%E9%97%AE%E8%BD%AF%E8%BF%9E%E6%8E%A5%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="Tomcat-7-修改context-xml"><a href="#Tomcat-7-修改context-xml" class="headerlink" title="Tomcat 7 修改context.xml:"></a>Tomcat 7 修改<code>context.xml</code>:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context allowLinking=&quot;true&quot; &gt;&lt;/Context&gt;</span><br></pre></td></tr></table></figure><h3 id="Tomcat-8-修改context-xml"><a href="#Tomcat-8-修改context-xml" class="headerlink" title="Tomcat 8 修改context.xml:"></a>Tomcat 8 修改<code>context.xml</code>:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line">  &lt;Resources allowLinking=&quot;true&quot; &gt;&lt;/Resources&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><h3 id="使用软链接"><a href="#使用软链接" class="headerlink" title="使用软链接"></a>使用软链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/kyg/data/blog/upload/ /home/kyg/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh端口转发</title>
      <link href="/2017/03/25/ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2017/03/25/ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      <content type="html"><![CDATA[<h3 id="转发本地到远端"><a href="#转发本地到远端" class="headerlink" title="转发本地到远端"></a>转发本地到远端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -L 本地端口:远端IP:远端端口 远端用户名@远端IP</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -L 2222:42.196.156.22:22 kyg@42.196.156.22</span><br></pre></td></tr></table></figure><a id="more"></a>  <p>所有请求本地2222端口的请求，都会转发给42.196.156的22端口</p><blockquote><p>网络前提：本地机器一定要能访问远端机器，不要求远端机器能访问本地机器</p></blockquote><!-- more --><h3 id="转发远端到本地"><a href="#转发远端到本地" class="headerlink" title="转发远端到本地"></a>转发远端到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g –R 远端端口:本地IP:本地端口 远端用户名@远端IP</span><br></pre></td></tr></table></figure><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -R 2323:127.0.0.1:22 root@121.40.66.176</span><br></pre></td></tr></table></figure><p>所有请求121.40.66.176:2323的请求，都会转发给本地的22端口</p><blockquote><p>网络前提：远端机器一定要能访问本地机器，不要求本地机器能访问远端机器</p></blockquote>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql数据库定时备份</title>
      <link href="/2017/03/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/"/>
      <url>/2017/03/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/</url>
      <content type="html"><![CDATA[<h3 id="创建备份脚本"><a href="#创建备份脚本" class="headerlink" title="创建备份脚本"></a>创建备份脚本</h3><p>创建<code>.bak.sh</code>, 内容为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line"></span><br><span class="line">today=`date +%Y%m%d`</span><br><span class="line"></span><br><span class="line"># bak to local</span><br><span class="line">mysqldump -uroot -p123456 blog &gt; /home/kyg/bak/blog-bak-$today.sql</span><br><span class="line"></span><br><span class="line"># bak to remote</span><br><span class="line">scp /home/kyg/bak/blog-bak-$today.sql root@121.40.66.176:/root/bak/</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>其中，备份到远程时，用到了免密登录，请参考我的另一篇博客</p></blockquote><h3 id="定时执行"><a href="#定时执行" class="headerlink" title="定时执行"></a>定时执行</h3><p>定时执行用的是linux下自带的<code>crontab</code>命令</p><p><code>crontab -l</code> 查看任务</p><p><code>crontab -e</code> 编辑任务</p><p>我设置的是，每天凌晨3点执行备份:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># m h  dom mon dow   command</span><br><span class="line">0 3 * * * sh /home/kyg/.bak.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu16.0.4启动zookeeper报错</title>
      <link href="/2017/03/25/ubuntu16-0-4%E5%90%AF%E5%8A%A8zookeeper%E6%8A%A5%E9%94%99/"/>
      <url>/2017/03/25/ubuntu16-0-4%E5%90%AF%E5%8A%A8zookeeper%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh: 81: /home/kyg/install/server1/zookeeper-3.4.9/bin/zkEnv.sh: Syntax error: &quot;(&quot; unexpected (expecting &quot;fi&quot;)</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l /bin/sh</span><br><span class="line">lrwxrwxrwx 1 root root 4 12月 24 17:22 /bin/sh -&gt; dash</span><br><span class="line">ls -l /bin/sh</span><br><span class="line">lrwxrwxrwx 1 root root 4 12月 24 20:01 /bin/sh -&gt; bash</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu下方向键不好使的解决方案</title>
      <link href="/2017/03/25/ubuntu%E4%B8%8B%E6%96%B9%E5%90%91%E9%94%AE%E4%B8%8D%E5%A5%BD%E4%BD%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2017/03/25/ubuntu%E4%B8%8B%E6%96%B9%E5%90%91%E9%94%AE%E4%B8%8D%E5%A5%BD%E4%BD%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h3 id="先卸载vim-tiny"><a href="#先卸载vim-tiny" class="headerlink" title="先卸载vim-tiny"></a>先卸载vim-tiny</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove vim-common</span><br></pre></td></tr></table></figure><h3 id="再安装vim-full："><a href="#再安装vim-full：" class="headerlink" title="再安装vim full："></a>再安装vim full：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install vim</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-jenkins的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-jenkins%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载jenkins到本地"><a href="#下载jenkins到本地" class="headerlink" title="下载jenkins到本地"></a>下载<a href="jenkins.io/index.html">jenkins</a>到本地</h3><h3 id="上传本地jenkins到Ubuntu服务器"><a href="#上传本地jenkins到Ubuntu服务器" class="headerlink" title="上传本地jenkins到Ubuntu服务器"></a>上传本地jenkins到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp jenkins.war root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="直接把war包放入tomcat的webapps目录下并重启tomcat即可"><a href="#直接把war包放入tomcat的webapps目录下并重启tomcat即可" class="headerlink" title="直接把war包放入tomcat的webapps目录下并重启tomcat即可"></a>直接把war包放入tomcat的webapps目录下并重启tomcat即可</h3><a id="more"></a><h3 id="安装maven插件"><a href="#安装maven插件" class="headerlink" title="安装maven插件"></a>安装maven插件</h3><p>去这个地址<a href="http://updates.jenkins-ci.org/download/plugins/" target="_blank" rel="noopener">http://updates.jenkins-ci.org/download/plugins/</a>下载maven插件到本地</p><p>然后在jenkins–&gt;系统管理–&gt;管理插件–&gt;高级–&gt;上传插件–&gt;选择maven插件(maven-plugin.hpi)–&gt;上传–&gt;重启</p><h3 id="jenkins执行shell重启tomcat无效"><a href="#jenkins执行shell重启tomcat无效" class="headerlink" title="jenkins执行shell重启tomcat无效"></a>jenkins执行shell重启tomcat无效</h3><p>需要在Post steps中执行<code>export BUILD_ID=BUILD_BLOG</code>,如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export BUILD_ID=BUILD_BLOG</span><br><span class="line">sh /home/kyg/shell/deploy-blog.sh</span><br></pre></td></tr></table></figure><h3 id="构建时，-需要指定maven配置"><a href="#构建时，-需要指定maven配置" class="headerlink" title="构建时， 需要指定maven配置"></a>构建时， 需要指定maven配置</h3><p>如果没指定， 会使用默认配置，会联网下载依赖到.m2文件夹下，所以需要指定<code>settings.xml</code>配置文件的位置, 如下图:</p><p><img src="/uploads/20170101020115076.png" alt="jenkins-maven"></p>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用jdk自带的keytool导入查看删除证书</title>
      <link href="/2017/03/25/%E7%94%A8jdk%E8%87%AA%E5%B8%A6%E7%9A%84keytool%E5%AF%BC%E5%85%A5%E6%9F%A5%E7%9C%8B%E5%88%A0%E9%99%A4%E8%AF%81%E4%B9%A6/"/>
      <url>/2017/03/25/%E7%94%A8jdk%E8%87%AA%E5%B8%A6%E7%9A%84keytool%E5%AF%BC%E5%85%A5%E6%9F%A5%E7%9C%8B%E5%88%A0%E9%99%A4%E8%AF%81%E4%B9%A6/</url>
      <content type="html"><![CDATA[<h2 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -alias sh2_test -file /Users/kyg/Downloads/sh2_test.cer</span><br></pre></td></tr></table></figure><h2 id="删除证书"><a href="#删除证书" class="headerlink" title="删除证书"></a>删除证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo keytool -delete -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit</span><br></pre></td></tr></table></figure><h2 id="查看证书"><a href="#查看证书" class="headerlink" title="查看证书"></a>查看证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>使用时，jdk路径请自行替换</li><li>一般cacerts的密码默认为changit</li><li>keytool命令在bin目录下</li></ul>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git中一般需要忽略的内容</title>
      <link href="/2017/03/25/Git%E4%B8%AD%E4%B8%80%E8%88%AC%E9%9C%80%E8%A6%81%E5%BF%BD%E7%95%A5%E7%9A%84%E5%86%85%E5%AE%B9/"/>
      <url>/2017/03/25/Git%E4%B8%AD%E4%B8%80%E8%88%AC%E9%9C%80%E8%A6%81%E5%BF%BD%E7%95%A5%E7%9A%84%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<h2 id="gitignore的内容"><a href="#gitignore的内容" class="headerlink" title=".gitignore的内容"></a><code>.gitignore</code>的内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Maven #</span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"># IDEA #</span><br><span class="line">.idea/</span><br><span class="line">*.iml</span><br><span class="line"></span><br><span class="line"># Eclipse #</span><br><span class="line">.settings/</span><br><span class="line">.metadata/</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">Servers/</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>log4j2的使用和配置</title>
      <link href="/2017/03/25/log4j2%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/log4j2%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在<code>pom.xml</code>中添加依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;log4j2.api.version&gt;2.5&lt;/log4j2.api.version&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;!--Log4j2--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;$&#123;log4j2.api.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置log4j2-xml"><a href="#配置log4j2-xml" class="headerlink" title="配置log4j2.xml"></a>配置<code>log4j2.xml</code></h3><ol><li>异步输出日志，不会影响主线程性能</li><li>error日志单独输出到error.log文件</li><li>all.log包含所有级别的日志</li><li>每天会备份旧的日志文件，产生新的日志文件</li><li>如果一天之中有日志文件超出大小限制(下面配的500M)，会存档当前文件，另外再创建一个新的文件</li><li>日志文件只保存近期的（下面配置的30天）</li></ol><p>这已经可以满足大部分需求了，如果还不满足，那就再改造吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Configuration status=&quot;WARN&quot; monitorInterval=&quot;300&quot;&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;property name=&quot;LOG_HOME&quot;&gt;/Users/kyg/logs/test&lt;/property&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;AllFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/all.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/all-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;RollingRandomAccessFile name=&quot;ErrorFile&quot; fileName=&quot;$&#123;LOG_HOME&#125;/error.log&quot;</span><br><span class="line">                                 filePattern=&quot;$&#123;LOG_HOME&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%logger&#123;36&#125;.%t:%L] - %msg%n&quot;&gt;&lt;/PatternLayout&gt;</span><br><span class="line">            &lt;Policies&gt;</span><br><span class="line">                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;&gt;&lt;/TimeBasedTriggeringPolicy&gt;</span><br><span class="line">                &lt;SizeBasedTriggeringPolicy size=&quot;500 MB&quot;&gt;&lt;/SizeBasedTriggeringPolicy&gt;</span><br><span class="line">            &lt;/Policies&gt;</span><br><span class="line">            &lt;DefaultRolloverStrategy max=&quot;30&quot;&gt;&lt;/DefaultRolloverStrategy&gt;</span><br><span class="line">            &lt;Filters&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;fatal&quot; onMatch=&quot;DENY&quot; onMismatch=&quot;NEUTRAL&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">                &lt;ThresholdFilter level=&quot;error&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;&gt;&lt;/ThresholdFilter&gt;</span><br><span class="line">            &lt;/Filters&gt;</span><br><span class="line">        &lt;/RollingRandomAccessFile&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncAll&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AllFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">        &lt;Async name=&quot;AsyncError&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ErrorFile&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Async&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot; additivity=&quot;true&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;Console&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncAll&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;AsyncError&quot;&gt;&lt;/AppenderRef&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Java后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH免密登录</title>
      <link href="/2017/03/25/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2017/03/25/SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>现在有两台机器A和B， 想要用ssh从A登录到B， 并且不使用密码</p><h3 id="在A机器上生成密钥对"><a href="#在A机器上生成密钥对" class="headerlink" title="在A机器上生成密钥对"></a>在A机器上生成密钥对</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后会有三次提示用户输入， 什么也不要输入， 直接回车， 就会在用户根目录生成<code>.ssh</code>文件夹, 文件夹里会有<code>id_rsa</code>私钥和<code>id_rsa.pub</code>公钥</p><h3 id="把公钥导入B机器"><a href="#把公钥导入B机器" class="headerlink" title="把公钥导入B机器"></a>把公钥导入B机器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_rsa.pub root@192.168.20.212</span><br></pre></td></tr></table></figure><a id="more"></a><p>执行这个命令会要求输入一次密码， 不过以后就不用再输密码了。<br>如果A机器没安装ssh-copy-id命令， 也可以手动导入， 先把公钥scp到B机器（也要输入一次密码），<br>然后输出到.ssh/authorized_keys文件中即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub &gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="免密登录测试"><a href="#免密登录测试" class="headerlink" title="免密登录测试"></a>免密登录测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.20.212</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-dubbo-admin的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-dubbo-admin%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-dubbo-admin%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="上传本地dubbo-admin到Ubuntu服务器"><a href="#上传本地dubbo-admin到Ubuntu服务器" class="headerlink" title="上传本地dubbo-admin到Ubuntu服务器"></a>上传本地dubbo-admin到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp dubbo-admin.war root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压dubbo-monitor到tomcat-webapps-ROOT-目录下"><a href="#解压dubbo-monitor到tomcat-webapps-ROOT-目录下" class="headerlink" title="解压dubbo-monitor到tomcat/webapps/ROOT/目录下"></a>解压dubbo-monitor到tomcat/webapps/ROOT/目录下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># unzip dubbo-admin.war -d /root/install/apache-tomcat-8.5.6/webapps/ROOT/</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改<code>webapps/ROOT/WEB-INF/dubbo.properties</code>中<code>dubbo.registry.address</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181</span><br></pre></td></tr></table></figure><p>修改tomcat的server.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;9090&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; &gt;&lt;/Connector&gt;</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh bin/shutdown.sh</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://localhost:9090/" target="_blank" rel="noopener">http://localhost:9090/</a>  </p><ul><li>用户名: </li><li>密码:</li></ul>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-dubbo-monitor2.5.3的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-dubbo-monitor2-5-3%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-dubbo-monitor2-5-3%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载dubbo-monitor2-5-3到本地"><a href="#下载dubbo-monitor2-5-3到本地" class="headerlink" title="下载dubbo-monitor2.5.3到本地"></a>下载<a href="http://download.csdn.net/detail/liweifengwf/7864009" target="_blank" rel="noopener">dubbo-monitor2.5.3</a>到本地</h3><h3 id="上传本地dubbo-monitor到Ubuntu服务器"><a href="#上传本地dubbo-monitor到Ubuntu服务器" class="headerlink" title="上传本地dubbo-monitor到Ubuntu服务器"></a>上传本地dubbo-monitor到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp dubbo-monitor-simple-2.5.3-assembly.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压dubbo-monitor到指定目录"><a href="#解压dubbo-monitor到指定目录" class="headerlink" title="解压dubbo-monitor到指定目录"></a>解压dubbo-monitor到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf dubbo-monitor-simple-2.5.3-assembly.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改<code>conf/dubbo.properties</code>中<code>dubbo.registry.address</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./bin/start.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./bin/stop.sh</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./bin/restart.sh</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-nexus3.1.0的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-nexus3-1-0%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-nexus3-1-0%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载nexus3-1-0到本地"><a href="#下载nexus3-1-0到本地" class="headerlink" title="下载nexus3.1.0到本地"></a>下载<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">nexus3.1.0</a>到本地</h3><h3 id="上传本地nexus到Ubuntu服务器"><a href="#上传本地nexus到Ubuntu服务器" class="headerlink" title="上传本地nexus到Ubuntu服务器"></a>上传本地nexus到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp nexus-3.1.0-04-unix.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压nexus到指定目录"><a href="#解压nexus到指定目录" class="headerlink" title="解压nexus到指定目录"></a>解压nexus到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf nexus-3.1.0-04-unix.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./nexus start</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./nexus stop</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a></p><ul><li>用户名:admin</li><li>密码:admin123</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>配置<code>settings.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">    &lt;server&gt;</span><br><span class="line">      &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">      &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">  &lt;/servers&gt;</span><br></pre></td></tr></table></figure><p>配置<code>pom.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">        &lt;name&gt;nexus releases&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://kangyonggan.com:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line"></span><br><span class="line">    &lt;snapshotRepository&gt;</span><br><span class="line">        &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">        &lt;name&gt;nexus snapshots&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://kangyonggan.com:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class="line">    &lt;/snapshotRepository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nexus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-zookeeper3.4.9的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-zookeeper3-4-9%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-zookeeper3-4-9%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载zookeeper3-4-9到本地"><a href="#下载zookeeper3-4-9到本地" class="headerlink" title="下载zookeeper3.4.9到本地"></a>下载<a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.9/" target="_blank" rel="noopener">zookeeper3.4.9</a>到本地</h3><h3 id="上传本地zookeeper到Ubuntu服务器"><a href="#上传本地zookeeper到Ubuntu服务器" class="headerlink" title="上传本地zookeeper到Ubuntu服务器"></a>上传本地zookeeper到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp zookeeper-3.4.9.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压zookeeper到指定目录"><a href="#解压zookeeper到指定目录" class="headerlink" title="解压zookeeper到指定目录"></a>解压zookeeper到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/install/server1</span><br><span class="line"># tar zxvf zookeeper-3.4.9.tar.gz -C /root/install/server1/</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置（集群）"><a href="#配置（集群）" class="headerlink" title="配置（集群）"></a>配置（集群）</h3><p>在<code>server1</code>目录下创建两个目录，分别是<code>data</code>和<code>logs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/install/server1/</span><br><span class="line">mkdir data</span><br><span class="line">mkdir logs</span><br></pre></td></tr></table></figure><p>此时，server1目录下有三个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/install/server1# pwd</span><br><span class="line">/root/install/server1</span><br><span class="line">root@iZ23ldh8kudZ:~/install/server1# ll</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x  5 root root 4096 Dec 17 15:43 ./</span><br><span class="line">drwxr-xr-x  8 root root 4096 Dec 17 15:39 ../</span><br><span class="line">drwxr-xr-x  2 root root 4096 Dec 17 15:43 data/</span><br><span class="line">drwxr-xr-x  2 root root 4096 Dec 17 15:43 logs/</span><br><span class="line">drwxr-xr-x 10 1001 1001 4096 Aug 23 15:42 zookeeper-3.4.9/</span><br></pre></td></tr></table></figure><p>在<code>data</code>目录下创建文件<code>myid</code>,其内容为<code>1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /data/myid</span><br><span class="line"># 内容为1</span><br></pre></td></tr></table></figure><p>复制配置文件<code>zookeeper-3.4.9/conf/zoo_sample.cfg</code>到<code>zookeeper-3.4.9/conf/zoo.cfg</code>, 并修改其内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/root/install/server1/data</span><br><span class="line">dataLogsDir=/root/install/server1/logs</span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line">server.1=121.40.66.176:2888:3888</span><br><span class="line">server.2=139.196.28.125:2888:3888</span><br></pre></td></tr></table></figure><blockquote><p>每台服务器都要有类似的配置</p></blockquote><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在<code>/etc/profile</code>文件最后追加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper environment</span><br><span class="line">export PATH=$PATH:/root/install/server1/zookeeper-3.4.9/bin</span><br></pre></td></tr></table></figure><p>立即生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># zkServer.sh start</span><br></pre></td></tr></table></figure><h3 id="查看是否启动"><a href="#查看是否启动" class="headerlink" title="查看是否启动"></a>查看是否启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@iZ23ldh8kudZ:~/install/server1/zookeeper-3.4.9# jps</span><br><span class="line">7096 QuorumPeerMain</span><br><span class="line">7114 Jps</span><br></pre></td></tr></table></figure><p>看到<code>QuorumPeerMain</code>就说明启动成功了</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># zkServer.sh stop</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-tomcat8.5.6的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-tomcat8-5-6%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-tomcat8-5-6%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载tomcat8-5-6到本地"><a href="#下载tomcat8-5-6到本地" class="headerlink" title="下载tomcat8.5.6到本地"></a>下载<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">tomcat8.5.6</a>到本地</h3><h3 id="上传本地tomcat到Ubuntu服务器"><a href="#上传本地tomcat到Ubuntu服务器" class="headerlink" title="上传本地tomcat到Ubuntu服务器"></a>上传本地tomcat到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp apache-tomcat-8.5.6.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压tomcat到指定目录"><a href="#解压tomcat到指定目录" class="headerlink" title="解压tomcat到指定目录"></a>解压tomcat到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf apache-tomcat-8.5.6.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh startup.sh</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sh shutdown.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-mysql5.6的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-mysql5-6%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-mysql5-6%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server-5.6</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/mysql start</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/mysql stop</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure><h3 id="调整内存"><a href="#调整内存" class="headerlink" title="调整内存"></a>调整内存</h3><p>修改<code>/etc/mysql/my.cnf</code>,在<code>[mysqld]</code>后面追加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance_schema_max_table_instances=200</span><br><span class="line">table_definition_cache=200</span><br><span class="line">table_open_cache=128</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-git1.9.1的安装配置</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-git1-9-1%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-git1-9-1%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="更新apt-get"><a href="#更新apt-get" class="headerlink" title="更新apt-get"></a>更新apt-get</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get update</span><br></pre></td></tr></table></figure><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install git</span><br></pre></td></tr></table></figure><h3 id="测试git是否生效"><a href="#测试git是否生效" class="headerlink" title="测试git是否生效"></a>测试git是否生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># git --version</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-maven3.3.9</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-maven3-3-9/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-maven3-3-9/</url>
      <content type="html"><![CDATA[<h3 id="下载maven3-3-9到本地"><a href="#下载maven3-3-9到本地" class="headerlink" title="下载maven3.3.9到本地"></a>下载<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven3.3.9</a>到本地</h3><h3 id="上传本地maven到Ubuntu服务器"><a href="#上传本地maven到Ubuntu服务器" class="headerlink" title="上传本地maven到Ubuntu服务器"></a>上传本地maven到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp apache-maven-3.3.9-bin.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压maven到指定目录"><a href="#解压maven到指定目录" class="headerlink" title="解压maven到指定目录"></a>解压maven到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="配置maven的环境变量"><a href="#配置maven的环境变量" class="headerlink" title="配置maven的环境变量"></a>配置maven的环境变量</h3><p>在<code>/etc/profile</code>文件尾追加下面的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># maven environment</span><br><span class="line">export M2_HOME=/root/install/apache-maven-3.3.9</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure><a id="more"></a><p>之后，重新加载配置，让配置生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source profile</span><br></pre></td></tr></table></figure><h3 id="5-测试环境变量是否生效"><a href="#5-测试环境变量是否生效" class="headerlink" title="5. 测试环境变量是否生效"></a>5. 测试环境变量是否生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mvn -version</span><br></pre></td></tr></table></figure><h3 id="6-配置本地仓库路径"><a href="#6-配置本地仓库路径" class="headerlink" title="6. 配置本地仓库路径"></a>6. 配置本地仓库路径</h3><p>在<code>/root/install/apache-maven-3.3.9/conf/settings.xml</code>文件中配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;/root/data/repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-redis3.2.0的安装配置</title>
      <link href="/2017/03/25/Ubuntu14.0.4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-redis3.2.0%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/03/25/Ubuntu14.0.4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-redis3.2.0%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="下载redis3-2到本地"><a href="#下载redis3-2到本地" class="headerlink" title="下载redis3.2到本地"></a>下载<a href="https://redis.io/" target="_blank" rel="noopener">redis3.2</a>到本地</h3><h3 id="上传本地redis到Ubuntu服务器"><a href="#上传本地redis到Ubuntu服务器" class="headerlink" title="上传本地redis到Ubuntu服务器"></a>上传本地redis到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp redis-3.2.0.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压redis到指定目录"><a href="#解压redis到指定目录" class="headerlink" title="解压redis到指定目录"></a>解压redis到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf redis-3.2.0.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在<code>/root/install/redis-3.2.0/redis.conf</code>后面追加下面的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-server redis.conf &amp;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli -a 123456</span><br><span class="line">&gt; ping</span><br></pre></td></tr></table></figure><p>输出:<code>PONG</code></p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli -a 123456 shutdown</span><br></pre></td></tr></table></figure><h3 id="清空所有缓存"><a href="#清空所有缓存" class="headerlink" title="清空所有缓存"></a>清空所有缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli -a 123456 KEYS &quot;*&quot; | xargs redis-cli -a 123456 DEL</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu14.0.4安装及配置系列-jdk1.8的安装配</title>
      <link href="/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-jdk1-8%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D/"/>
      <url>/2017/03/25/Ubuntu14-0-4%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E7%B3%BB%E5%88%97-jdk1-8%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D/</url>
      <content type="html"><![CDATA[<h3 id="下载jdk1-8到本地"><a href="#下载jdk1-8到本地" class="headerlink" title="下载jdk1.8到本地"></a>下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk1.8</a>到本地</h3><h3 id="上传本地jdk到Ubuntu服务器"><a href="#上传本地jdk到Ubuntu服务器" class="headerlink" title="上传本地jdk到Ubuntu服务器"></a>上传本地jdk到Ubuntu服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp jdk-8u111-linux-x64.tar.gz root@121.40.66.176:/root/soft/</span><br></pre></td></tr></table></figure><h3 id="解压jdk到指定目录"><a href="#解压jdk到指定目录" class="headerlink" title="解压jdk到指定目录"></a>解压jdk到指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf jdk-8u111-linux-x64.tar.gz -C /root/install/</span><br></pre></td></tr></table></figure><h3 id="配置jdk的环境变量"><a href="#配置jdk的环境变量" class="headerlink" title="配置jdk的环境变量"></a>配置jdk的环境变量</h3><p>在<code>/etc/profile</code>文件尾追加下面的配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># jdk environment  </span><br><span class="line">export JAVA_HOME=/root/install/jdk1.8.0_111  </span><br><span class="line">export JRE_HOME=/root/install/jdk1.8.0_111/jre  </span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  </span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><a id="more"></a><p>之后，重新加载配置，让配置生效:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source profile</span><br></pre></td></tr></table></figure><h3 id="5-测试环境变量是否生效"><a href="#5-测试环境变量是否生效" class="headerlink" title="5. 测试环境变量是否生效"></a>5. 测试环境变量是否生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># java -version</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 系统运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx报错：413 Request Entity Too Large</title>
      <link href="/2017/03/25/Nginx%E6%8A%A5%E9%94%99%EF%BC%9A413%20RequestEntityTooLarge/"/>
      <url>/2017/03/25/Nginx%E6%8A%A5%E9%94%99%EF%BC%9A413%20RequestEntityTooLarge/</url>
      <content type="html"><![CDATA[<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在http模块下添加配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
